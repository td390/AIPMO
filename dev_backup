// Cloudflare Worker â€” PMO AI Menu + Meeting Note + Auto Report + Chat Bot + Grok 3 Mini + Confluence + Jira + Zalo
// ENV báº¯t buá»™c:
// - R2_ACCOUNT_ID, R2_ACCESS_KEY_ID, R2_SECRET_ACCESS_KEY, R2_BUCKET, R2_PUBLIC_BASE_URL
// - DEEPGRAM_API_KEY, XAI_API_KEY, (optional) XAI_BASE_URL (vd: https://us-east-1.api.x.ai/v1)
// - ATLASSIAN_BASE (vd: https://kvmon-dev.atlassian.net/wiki hoáº·c https://kvmon-dev.atlassian.net)
// - ATLASSIAN_USER (email) hoáº·c ATLASSIAN_EMAIL, ATLASSIAN_API_TOKEN
// - ZALO_BOT_TOKEN, ZALO_WEBHOOK_SECRET_TOKEN

// ============================================================================
// 1) KERNEL HELPERS
// ============================================================================
function corsHeaders() {
  return {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET,POST,OPTIONS',
    'Access-Control-Allow-Headers': 'content-type, authorization, x-bot-api-secret-token, X-Bot-Api-Secret-Token'
  };
}
function json(obj, status = 200) {
  return new Response(JSON.stringify(obj), {
    status,
    headers: { 'content-type': 'application/json; charset=utf-8', ...corsHeaders() }
  });
}
async function safeJson(req) {
  try {
    const ct = (req.headers.get('content-type') || '').toLowerCase();
    if (ct.includes('application/json')) {
      return await req.json();
    }
    const text = await req.text(); // fallback
    return text ? JSON.parse(text) : {};
  } catch {
    return {};
  }
}
class StepError extends Error { constructor(step, message) { super(message); this.step = step; } }
function toStepError(err) { return (err instanceof StepError) ? err : new StepError('unknown', String(err?.message || err)); }

// ============================================================================
// 2) CHAT CORE (dÃ¹ng chung cho web & Zalo)
// ============================================================================
function isJiraQuestion(text) {
  if (!text) return false;
  const s = String(text).toLowerCase();

  const keywords = [
    'jira','task','ticket','issue','tráº¡ng thÃ¡i','status','Æ°u tiÃªn','priority',
    'assignee','project','dá»± Ã¡n','backlog','sprint','bug','story','epic',
    'to do','in progress','done','deadline','quÃ¡ háº¡n','duedate','due date',
    'created','updated','assign','giao','tiáº¿n Ä‘á»™','bao nhiÃªu task','board'
  ];
  if (keywords.some(k => s.includes(k))) return true;

  // Pattern mÃ£ issue kiá»ƒu ABC-123
  return /[A-Z][A-Z0-9_]{1,9}-\d+/.test(text);
}

async function processChatMessage(env, message, opts = {}) {
  if (!message || !String(message).trim()) {
    return { success: false, error: 'Missing message' };
  }
  const projectKey = (opts && opts.projectKey) ? String(opts.projectKey).trim() : '';

  if (isJiraQuestion(message)) {
    try {
      const jql = await generateJQL(env, message, projectKey); // << truyá»n project
      const jiraResults = await executeJQL(env, jql);
      const response = generateResponse(message, jql, jiraResults);
      return { success: true, response, jql, results: jiraResults };
    } catch (error) {
      let errorMessage = 'ÄÃ£ xáº£y ra lá»—i khi xá»­ lÃ½ cÃ¢u há»i Jira cá»§a báº¡n.';
      if (error.step === 'grok') errorMessage = 'Xin lá»—i, tÃ´i khÃ´ng thá»ƒ hiá»ƒu cÃ¢u há»i Jira. Vui lÃ²ng thá»­ diá»…n Ä‘áº¡t láº¡i.';
      else if (error.step === 'jira') errorMessage = 'Hiá»‡n khÃ´ng truy cáº­p Ä‘Æ°á»£c Jira. Vui lÃ²ng thá»­ láº¡i sau.';
      return { success: false, error: errorMessage, details: error.message };
    }
  }

  try {
    const answer = await askGrok(env, message);
    return { success: true, response: answer, jql: '', results: [] };
  } catch (error) {
    return { success: false, error: 'CÃ³ lá»—i khi tráº£ lá»i há»™i thoáº¡i tá»± nhiÃªn.', details: error.message };
  }
}


async function generateJQL(env, message, defaultProjectKey) {
  const base = (env.XAI_BASE_URL || 'https://api.x.ai/v1').replace(/\/$/, '');

  const prompt = [
    '# Táº O JQL Tá»ª CÃ‚U Há»ŽI Tá»° NHIÃŠN',
    '',
    'Báº¡n lÃ  má»™t chuyÃªn gia vá» Jira Query Language (JQL). HÃ£y chuyá»ƒn Ä‘á»•i cÃ¢u há»i tá»± nhiÃªn cá»§a ngÆ°á»i dÃ¹ng thÃ nh cÃ¢u lá»‡nh JQL chÃ­nh xÃ¡c.',
    '',
    '## QUY Táº®C:',
    '- Káº¾T THÃšC cÃ¢u JQL báº±ng "ORDER BY created DESC".',
    '- KHÃ”NG sá»­ dá»¥ng LIMIT.',
    '',
    '## VÃ Dá»¤:',
    'CÃ¢u há»i: "TÃ´i muá»‘n xem táº¥t cáº£ cÃ¡c task Ä‘ang trong tráº¡ng thÃ¡i In Progress"',
    'JQL: status = "In Progress" ORDER BY created DESC',
    '',
    '## CÃ‚U Há»ŽI Cá»¦A NGÆ¯á»œI DÃ™NG:',
    message,
    '',
    '## Káº¾T QUáº¢: (chá»‰ tráº£ vá» JQL)'
  ].join('\n');

  const body = { model: 'grok-3-mini', input: prompt, temperature: 0.2 };

  const r = await fetch(`${base}/responses`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${env.XAI_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body)
  });
  if (!r.ok) throw new StepError('grok', `xAI ${r.status}: ${await r.text()}`);
  const data = await r.json();

  let jql = '';
  if (data.output_text) jql = data.output_text.trim();
  if (!jql && data.output?.[1]?.content?.[0]?.text) jql = data.output[1].content[0].text.trim();
  if (!jql) throw new StepError('grok', 'KhÃ´ng thá»ƒ táº¡o JQL tá»« cÃ¢u há»i');

  jql = jql.replace(/\bLIMIT\s+\d+/ig, '').replace(/\s{2,}/g, ' ').trim();

  if (!/order\s+by/i.test(jql)) jql = `${jql.trim()} ORDER BY created DESC`;
  else {
    const core = jql.replace(/\border\s+by\b[\s\S]*$/i, '').trim();
    jql = `${core} ORDER BY created DESC`;
  }

  const hasProjectFilter = /\bproject\s*(=|in)\b/i.test(jql);
  const hasIssueKey = /[A-Z][A-Z0-9_]{1,9}-\d+/.test(String(message));
  const fallbackKey = (defaultProjectKey || 'TRADE').toUpperCase().replace(/[^A-Z0-9_]/g, '');
  if (!hasProjectFilter && !hasIssueKey) {
    const core = jql.replace(/\border\s+by\b[\s\S]*$/i, '').trim();
    jql = `(project = "${fallbackKey}") AND (${core}) ORDER BY created DESC`;
  }
  return jql;
}



async function executeJQL(env, jql) {
  const BASE_JIRA = envJiraBase(env);
  const API_URL = `${BASE_JIRA}/rest/api/3/search`;

  try {
    const m = jql.match(/\bLIMIT\s+(\d+)/i);
    const maxResults = m ? Math.max(1, Math.min(1000, parseInt(m[1], 10))) : 50;
    const cleanJql = jql.replace(/\bLIMIT\s+\d+/ig, '').trim();

    const r = await fetch(`${API_URL}?jql=${encodeURIComponent(cleanJql)}&maxResults=${maxResults}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        'Accept': 'application/json',
        'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
      }
    });

    if (!r.ok) {
      throw new StepError('jira', `JQL ${r.status}: ${await r.text()}`);
    }

    const data = await r.json();

    if (!data.issues || !Array.isArray(data.issues)) {
      return [];
    }

    const results = data.issues.map(issue => ({
      key: issue.key,
      summary: issue.fields.summary,
      status: issue.fields.status?.name,
      priority: issue.fields.priority ? issue.fields.priority.name : 'Not set',
      assignee: issue.fields.assignee ? issue.fields.assignee.displayName : null
    }));

    return results;
  } catch (error) {
    throw error;
  }
}

function generateResponse(message, jql, results) {
  const count = results.length;

  if (count === 0) {
    return `TÃ´i Ä‘Ã£ tÃ¬m kiáº¿m theo cÃ¢u há»i cá»§a báº¡n nhÆ°ng khÃ´ng tÃ¬m tháº¥y káº¿t quáº£ nÃ o. JQL Ä‘Ã£ sá»­ dá»¥ng lÃ :\n\n\`${jql}\``;
  }

  let response = `TÃ´i Ä‘Ã£ tÃ¬m tháº¥y ${count} káº¿t quáº£ cho cÃ¢u há»i cá»§a báº¡n.\n\nJQL Ä‘Ã£ sá»­ dá»¥ng lÃ :\n\`${jql}\``;

  if (count > 10) {
    response += `\n\n(Chá»‰ hiá»ƒn thá»‹ 10 káº¿t quáº£ Ä‘áº§u)`;
  }

  return response;
}

// ============================================================================
// 3) ZALO INTEGRATION
// ============================================================================
async function zaloSendMessage(env, chatId, text) {
  if (!env.ZALO_BOT_TOKEN) throw new StepError('zalo', 'Missing ZALO_BOT_TOKEN');
  const api = `https://bot-api.zapps.me/bot${env.ZALO_BOT_TOKEN}/sendMessage`;

  const payloadText = String(text || '');
  const CHUNK = 900; // an toÃ n
  const parts = payloadText.match(new RegExp(`[\\s\\S]{1,${CHUNK}}`, 'g')) || [''];

  let lastRes = null;
  for (const p of parts) {
    const payload = { chat_id: String(chatId), text: p };

    // retry nháº¹ khi 429 (rate limit)
    let attempt = 0;
    for (;;) {
      const r = await fetch(api, {
        method: 'POST',
        headers: { 'content-type': 'application/json; charset=utf-8' },
        body: JSON.stringify(payload)
      });
      const t = await r.text();
      if (r.ok) {
        try { lastRes = JSON.parse(t); } catch { lastRes = { ok: true, raw: t }; }
        break;
      }
      if (r.status === 429 && attempt < 2) {
        await new Promise(rs => setTimeout(rs, 500 * (attempt + 1)));
        attempt++;
        continue;
      }
      throw new StepError('zalo', `sendMessage ${r.status}: ${t}`);
    }
  }
  return lastRes;
}

async function zaloSetWebhook(env, webhookUrl, secretToken) {
  if (!env.ZALO_BOT_TOKEN) throw new StepError('zalo', 'Missing ZALO_BOT_TOKEN');
  const api = `https://bot-api.zapps.me/bot${env.ZALO_BOT_TOKEN}/setWebhook`;
  const secret = secretToken || env.ZALO_SECRET_TOKEN || 'dev-secret';

  const r = await fetch(api, {
    method: 'POST',
    headers: { 'content-type': 'application/json; charset=utf-8' },
    body: JSON.stringify({ url: webhookUrl, secret_token: secret })
  });
  const t = await r.text();
  if (!r.ok) throw new StepError('zalo', `setWebhook ${r.status}: ${t}`);
  try { return JSON.parse(t); } catch { return { ok: true, raw: t }; }
}


function buildZaloReply(original, jql, results) {
  const list = Array.isArray(results) ? results : [];
  if (!jql) {
    // KhÃ´ng pháº£i Jira â†’ tráº£ lá»i tá»± nhiÃªn
    return (original && typeof original === 'string')
      ? String(original).slice(0, 2000)
      : 'OK';
  }
  if (list.length === 0) {
    return [
      'KhÃ´ng tÃ¬m tháº¥y káº¿t quáº£ theo cÃ¢u há»i.',
      'JQL:',
      '```',
      jql,
      '```'
    ].join('\n');
  }
  const top = list.slice(0, 10);
  const lines = top.map((r, i) =>
    `${i + 1}. ${r.key} â€” ${r.summary} [${r.status} | ${r.priority}] ${r.assignee ? `@${r.assignee}` : ''}`
  );
  if (list.length > top.length) lines.push(`â€¦ vÃ  ${list.length - top.length} káº¿t quáº£ khÃ¡c.`);
  return [
    `TÃ¬m tháº¥y ${list.length} káº¿t quáº£.`,
    'JQL:',
    '```',
    jql,
    '```',
    '',
    ...lines
  ].join('\n');
}

async function handleZaloMessage(env, chatId, text) {
  try {
    const out = await processChatMessage(env, text);

    if (!out.success) {
      const msg = out.error || 'CÃ³ lá»—i khi xá»­ lÃ½. Vui lÃ²ng thá»­ láº¡i sau.';
      await zaloSendMessage(env, chatId, msg);
      return;
    }

    if (!out.jql) {
      await zaloSendMessage(env, chatId, out.response || 'OK');
      return;
    }

    const reply = buildZaloReply(out.response, out.jql, out.results || []);
    await zaloSendMessage(env, chatId, reply);
  } catch (e) {
    console.error('handleZaloMessage error', e);
    try { await zaloSendMessage(env, chatId, 'Xin lá»—i, há»‡ thá»‘ng Ä‘ang báº­n. Thá»­ láº¡i sau nhÃ©.'); } catch {}
  }
}


// ============================================================================
// 4) R2 SIGNING
// ============================================================================
function toHex(buf) { return [...new Uint8Array(buf)].map(b => b.toString(16).padStart(2, '0')).join(''); }
async function sha256Hex(str) { const enc = new TextEncoder(); return toHex(await crypto.subtle.digest('SHA-256', enc.encode(str))); }
async function hmac(key, data) {
  const enc = new TextEncoder();
  const cryptoKey = key instanceof CryptoKey ? key : await crypto.subtle.importKey('raw', typeof key === 'string' ? enc.encode(key) : key, { name: 'HMAC', hash: 'SHA-256' }, false, ['sign']);
  return crypto.subtle.sign('HMAC', cryptoKey, enc.encode(data));
}
async function getSigningKey(secret, shortDate) {
  const kDate = await hmac('AWS4' + secret, shortDate);
  const kRegion = await hmac(kDate, 'auto');
  const kService = await hmac(kRegion, 's3');
  return hmac(kService, 'aws4_request');
}
async function presignURL(env, method, key, expiresSec) {
  const bucket = env.R2_BUCKET || 'db-meetingnote';
  const accountId = env.R2_ACCOUNT_ID, accessKey = env.R2_ACCESS_KEY_ID, secretKey = env.R2_SECRET_ACCESS_KEY;
  if (!accountId || !accessKey || !secretKey) throw new Error('Missing R2 signing secrets');

  const host = accountId + '.r2.cloudflarestorage.com';
  const now = new Date();
  const amzDate = now.toISOString().replace(/[:-]|\..*/g, '').slice(0, 15) + 'Z';
  const shortDate = amzDate.slice(0, 8);
  const credential = accessKey + '/' + shortDate + '/auto/s3/aws4_request';

  const qs = new URLSearchParams({
    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
    'X-Amz-Credential': credential,
    'X-Amz-Date': amzDate,
    'X-Amz-Expires': String(expiresSec),
    'X-Amz-SignedHeaders': 'host'
  });
  const canonicalQuery = qs.toString();
  const canonicalHeaders = 'host:' + host + '\n';
  const signedHeaders = 'host';
  const payloadHash = 'UNSIGNED-PAYLOAD';
  const uri = '/' + bucket + '/' + encodeURIComponent(key);

  const canonicalRequest = [method, uri, canonicalQuery, canonicalHeaders, signedHeaders, payloadHash].join('\n');
  const stringToSign = ['AWS4-HMAC-SHA256', amzDate, shortDate + '/auto/s3/aws4_request', await sha256Hex(canonicalRequest)].join('\n');

  const kSigning = await getSigningKey(secretKey, shortDate);
  const signature = toHex(await hmac(await kSigning, stringToSign));
  return 'https://' + host + uri + '?' + canonicalQuery + '&X-Amz-Signature=' + signature;
}

// ============================================================================
// 5) MEETING PIPELINE (Deepgram â†’ Grok)
// ============================================================================
function extractTranscript(data) {
  if (!data || typeof data !== 'object') return '';
  if (typeof data.transcript === 'string' && data.transcript.trim()) return data.transcript;
  const t1 = data?.results?.channels?.[0]?.alternatives?.[0]?.transcript;
  if (typeof t1 === 'string' && t1.trim()) return t1;
  const t2 = data?.channels?.[0]?.alternatives?.[0]?.transcript;
  if (typeof t2 === 'string' && t2.trim()) return t2;
  if (Array.isArray(data?.results) && data.results.length) {
    const join = data.results.map(r => r?.alternatives?.[0]?.transcript || r?.transcript || '').filter(Boolean).join(' ').trim();
    if (join) return join;
  }
  return '';
}

// Cáº­p nháº­t hÃ m buildLLMPrompt
function buildLLMPrompt(transcript) {
  return [
    '# Táº O [MOM] BiÃªn báº£n há»p Tá»ª MEETING NOTES',
    '',
    'Báº¡n lÃ  má»™t chuyÃªn gia phÃ¢n tÃ­ch cuá»™c há»p dá»± Ã¡n. HÃ£y Ä‘á»c meeting notes vÃ  trÃ­ch xuáº¥t thÃ´ng tin theo cáº¥u trÃºc JSON chÃ­nh xÃ¡c dÆ°á»›i Ä‘Ã¢y.',
    '',
    '## Cáº¤U TRÃšC JSON Báº®T BUá»˜C:',
    '{',
    '  "discussion_topics": [',
    '    {',
    '      "content": "string",',
    '      "pic": "string",',
    '      "note": "string"',
    '    }',
    '  ],',
    '  "action_items": [',
    '    {',
    '      "content": "string",',
    '      "deadline": "string (YYYY-MM-DD)",',
    '      "pic": "string",',
    '      "note": "string"',
    '    }',
    '  ],',
    '  "assessment": "ÄÃºng tiáº¿n Ä‘á»™" | "Cháº­m tiáº¿n Ä‘á»™"',
    '}',
    '',
    '## HÆ¯á»šNG DáºªN CHI TIáº¾T:',
    '1. Táº­p trung vÃ o viá»‡c trÃ­ch xuáº¥t thÃ´ng tin chÃ­nh xÃ¡c tá»« transcript',
    '2. Äáº£m báº£o táº¥t cáº£ cÃ¡c trÆ°á»ng Ä‘á»u Ä‘Æ°á»£c Ä‘iá»n (náº¿u khÃ´ng cÃ³ thÃ´ng tin thÃ¬ Ä‘á»ƒ trá»‘ng string "")',
    '3. TrÆ°á»ng "assessment" PHáº¢I lÃ  má»™t trong hai giÃ¡ trá»‹: "ÄÃºng tiáº¿n Ä‘á»™" hoáº·c "Cháº­m tiáº¿n Ä‘á»™"',
    '4. Äá»‘i vá»›i discussion_topics: trÃ­ch xuáº¥t ná»™i dung tháº£o luáº­n, ngÆ°á»i phá»¥ trÃ¡ch (PIC) vÃ  ghi chÃº liÃªn quan',
    '5. Äá»‘i vá»›i action_items: trÃ­ch xuáº¥t hÃ nh Ä‘á»™ng cáº§n thá»±c hiá»‡n, deadline (náº¿u cÃ³), ngÆ°á»i phá»¥ trÃ¡ch (PIC) vÃ  ghi chÃº liÃªn quan',
    '6. Deadline nÃªn Ä‘Æ°á»£c Ä‘á»‹nh dáº¡ng YYYY-MM-DD, náº¿u khÃ´ng cÃ³ ngÃ y cá»¥ thá»ƒ thÃ¬ Ä‘á»ƒ trá»‘ng',
    '',
    '## TRANSCRIPT:',
    transcript,
    '',
    '## Káº¾T QUáº¢: Chá»‰ tráº£ vá» JSON há»£p lá»‡, khÃ´ng thÃªm báº¥t ká»³ vÄƒn báº£n nÃ o khÃ¡c.'
  ].join('\n');
}

// ThÃªm hÃ m xÃ¢y dá»±ng prompt cho Risk Management
function buildRiskManagementPrompt(transcript) {
  return [
    '# Táº O BÃO CÃO RISK MANAGEMENT Tá»ª MEETING NOTES',
    '',
    'Báº¡n lÃ  má»™t chuyÃªn gia phÃ¢n tÃ­ch rá»§i ro dá»± Ã¡n. HÃ£y Ä‘á»c meeting notes vÃ  trÃ­ch xuáº¥t thÃ´ng tin theo cáº¥u trÃºc JSON chÃ­nh xÃ¡c dÆ°á»›i Ä‘Ã¢y.',
    '',
    '## Cáº¤U TRÃšC JSON Báº®T BUá»˜C:',
    '{',
    '  "risk_items": [',
    '    {',
    '      "description": "string",',
    '      "risk_level": "Cháº¥p nháº­n Ä‘Æ°á»£c" | "Cáº§n xem xÃ©t" | "Cáº§n quáº£n lÃ½" | "KhÃ´ng cháº¥p nháº­n",',
    '      "strategy": "TrÃ¡nh" | "Giáº£m thiá»ƒu" | "Chuyá»ƒn giao" | "Cháº¥p nháº­n",',
    '      "action": "string",',
    '      "timeline": "string (YYYY-MM-DD)"',
    '    }',
    '  ]',
    '}',
    '',
    '## HÆ¯á»šNG DáºªN CHI TIáº¾T:',
    '1. Táº­p trung vÃ o viá»‡c trÃ­ch xuáº¥t thÃ´ng tin chÃ­nh xÃ¡c tá»« transcript',
    '2. Äáº£m báº£o táº¥t cáº£ cÃ¡c trÆ°á»ng Ä‘á»u Ä‘Æ°á»£c Ä‘iá»n (náº¿u khÃ´ng cÃ³ thÃ´ng tin thÃ¬ Ä‘á»ƒ trá»‘ng string "")',
    '3. TrÆ°á»ng "risk_level" PHáº¢I lÃ  má»™t trong bá»‘n giÃ¡ trá»‹: "Cháº¥p nháº­n Ä‘Æ°á»£c", "Cáº§n xem xÃ©t", "Cáº§n quáº£n lÃ½", "KhÃ´ng cháº¥p nháº­n"',
    '4. TrÆ°á»ng "strategy" PHáº¢I lÃ  má»™t trong bá»‘n giÃ¡ trá»‹: "TrÃ¡nh", "Giáº£m thiá»ƒu", "Chuyá»ƒn giao", "Cháº¥p nháº­n"',
    '5. Äá»‘i vá»›i description: mÃ´ táº£ ngáº¯n gá»n rá»§i ro',
    '6. Äá»‘i vá»›i action: hÃ nh Ä‘á»™ng á»©ng phÃ³ phá»• cáº­p tháº¿',
    '7. Timeline nÃªn Ä‘Æ°á»£c Ä‘á»‹nh dáº¡ng YYYY-MM-DD, náº¿u khÃ´ng cÃ³ ngÃ y cá»¥ thá»ƒ thÃ¬ Ä‘á»ƒ trá»‘ng',
    '',
    '## TRANSCRIPT:',
    transcript,
    '',
    '## Káº¾T QUáº¢: Chá»‰ tráº£ vá» JSON há»£p lá»‡, khÃ´ng thÃªm báº¥t ká»³ vÄƒn báº£n nÃ o khÃ¡c.'
  ].join('\n');
}

// ThÃªm hÃ m xÃ¢y dá»±ng prompt cho Progress Report
function buildProgressReportPrompt(transcript) {
  return [
    '# Táº O BÃO CÃO TIáº¾N Äá»˜ Dá»° ÃN TRá»ŒNG ÄIá»‚M Tá»ª MEETING NOTES',
    '',
    'Báº¡n lÃ  má»™t chuyÃªn gia phÃ¢n tÃ­ch tiáº¿n Ä‘á»™ dá»± Ã¡n. HÃ£y Ä‘á»c meeting notes vÃ  trÃ­ch xuáº¥t thÃ´ng tin theo cáº¥u trÃºc JSON chÃ­nh xÃ¡c dÆ°á»›i Ä‘Ã¢y.',
    '',
    '## Cáº¤U TRÃšC JSON Báº®T BUá»˜C:',
    '{',
    '  "progress_items": [',
    '    {',
    '      "content": "string",',
    '      "master_plan": "string",',
    '      "progress": "string",',
    '      "evaluation": "ÄÃºng tiáº¿n Ä‘á»™" | "Cháº­m tiáº¿n Ä‘á»™" | "VÆ°á»£t tiáº¿n Ä‘á»™",',
    '      "next_plan": "string",',
    '      "challenges": "string",',
    '      "proposals": "string",',
    '      "notes": "string"',
    '    }',
    '  ]',
    '}',
    '',
    '## HÆ¯á»šNG DáºªN CHI TIáº¾T:',
    '1. Táº­p trung vÃ o viá»‡c trÃ­ch xuáº¥t thÃ´ng tin chÃ­nh xÃ¡c tá»« transcript',
    '2. Äáº£m báº£o táº¥t cáº£ cÃ¡c trÆ°á»ng Ä‘á»u Ä‘Æ°á»£c Ä‘iá»n (náº¿u khÃ´ng cÃ³ thÃ´ng tin thÃ¬ Ä‘á»ƒ trá»‘ng string "")',
    '3. TrÆ°á»ng "evaluation" PHáº¢I lÃ  má»™t trong ba giÃ¡ trá»‹: "ÄÃºng tiáº¿n Ä‘á»™", "Cháº­m tiáº¿n Ä‘á»™", "VÆ°á»£t tiáº¿n Ä‘á»™"',
    '4. Äá»‘i vá»›i content: ná»™i dung dá»± Ã¡n chÃ­nh',
    '5. Äá»‘i vá»›i master_plan: káº¿ hoáº¡ch chÃ­nh/thá»i gian cá»§a dá»± Ã¡n',
    '6. Äá»‘i vá»›i progress: bÃ¡o cÃ¡o tiáº¿n Ä‘á»™ ngáº¯n gá»n',
    '7. Äá»‘i vá»›i next_plan: káº¿ hoáº¡ch tiáº¿p theo ngáº¯n gá»n',
    '8. Äá»‘i vá»›i challenges: khÃ³ khÄƒn vÆ°á»›ng máº¯c gáº·p pháº£i',
    '9. Äá»‘i vá»›i proposals: Ä‘á» xuáº¥t/kiáº¿n nghá»‹ giáº£i phÃ¡p',
    '10. Äá»‘i vá»›i notes: ghi chÃº bá»• sung',
    '',
    '## TRANSCRIPT:',
    transcript,
    '',
    '## Káº¾T QUáº¢: Chá»‰ tráº£ vá» JSON há»£p lá»‡, khÃ´ng thÃªm báº¥t ká»³ vÄƒn báº£n nÃ o khÃ¡c.'
  ].join('\n');
}

// Cáº­p nháº­t hÃ m meetingJsonSchema
function meetingJsonSchema() {
  return {
    type: 'object',
    properties: {
      discussion_topics: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            content: { type: 'string' },
            pic: { type: 'string' },
            note: { type: 'string' }
          },
          required: ['content']
        }
      },
      action_items: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            content: { type: 'string' },
            deadline: { type: 'string', format: 'date' },
            pic: { type: 'string' },
            note: { type: 'string' }
          },
          required: ['content']
        }
      },
      assessment: { type: 'string', enum: ['ÄÃºng tiáº¿n Ä‘á»™', 'Cháº­m tiáº¿n Ä‘á»™'] }
    },
    required: ['discussion_topics', 'action_items', 'assessment'],
    additionalProperties: true
  };
}

// ThÃªm schema cho Risk Management
function riskManagementJsonSchema() {
  return {
    type: 'object',
    properties: {
      risk_items: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            description: { type: 'string' },
            risk_level: { 
              type: 'string', 
              enum: ['Cháº¥p nháº­n Ä‘Æ°á»£c', 'Cáº§n xem xÃ©t', 'Cáº§n quáº£n lÃ½', 'KhÃ´ng cháº¥p nháº­n'] 
            },
            strategy: { 
              type: 'string', 
              enum: ['TrÃ¡nh', 'Giáº£m thiá»ƒu', 'Chuyá»ƒn giao', 'Cháº¥p nháº­n'] 
            },
            action: { type: 'string' },
            timeline: { type: 'string', format: 'date' }
          },
          required: ['description', 'risk_level', 'strategy', 'action']
        }
      }
    },
    required: ['risk_items'],
    additionalProperties: true
  };
}

// ThÃªm schema cho Progress Report
function progressReportJsonSchema() {
  return {
    type: 'object',
    properties: {
      progress_items: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            content: { type: 'string' },
            master_plan: { type: 'string' },
            progress: { type: 'string' },
            evaluation: { 
              type: 'string',
              enum: ['ÄÃºng tiáº¿n Ä‘á»™', 'Cháº­m tiáº¿n Ä‘á»™', 'VÆ°á»£t tiáº¿n Ä‘á»™']
            },
            next_plan: { type: 'string' },
            challenges: { type: 'string' },
            proposals: { type: 'string' },
            notes: { type: 'string' }
          },
          required: ['content', 'master_plan', 'progress', 'evaluation', 'next_plan', 'challenges', 'proposals', 'notes']
        }
      }
    },
    required: ['progress_items'],
    additionalProperties: true
  };
}

// Cáº­p nháº­t hÃ m callGrok Ä‘á»ƒ há»— trá»£ template
async function callGrok(env, transcript, template = 'mom') {
  const base = (env.XAI_BASE_URL || 'https://api.x.ai/v1').replace(/\/$/, '');
  let prompt, schema;

  if (template === 'risk') {
    prompt = buildRiskManagementPrompt(transcript);
    schema = riskManagementJsonSchema();
  } else if (template === 'progress') {
    prompt = buildProgressReportPrompt(transcript);
    schema = progressReportJsonSchema();
  } else {
    prompt = buildLLMPrompt(transcript);
    schema = meetingJsonSchema();
  }

  const body = {
    model: 'grok-3-mini',
    input: prompt,
    temperature: 0.2,
    response_format: {
      type: 'json_schema',
      json_schema: { name: 'pmo_extract', schema: schema, strict: true }
    }
  };
  
  const r = await fetch(`${base}/responses`, {
    method: 'POST',
    headers: { 
      'Authorization': `Bearer ${env.XAI_API_KEY}`, 
      'Content-Type': 'application/json' 
    },
    body: JSON.stringify(body)
  });
  
  const text = await r.text();
  if (!r.ok) throw new StepError('grok', `xAI ${r.status}: ${text}`);
  const data = JSON.parse(text);

  let raw = '';
  let parsed = {};

  try {
    if (data.output_text) raw = data.output_text;
    if (!raw && data.output?.[1]?.content?.[0]) {
      raw = data.output[1].content[0].text;
    }
    if (raw) {
      const jsonMatch = raw.match(/\{[\s\S]*\}/);
      parsed = jsonMatch ? JSON.parse(jsonMatch[0]) : JSON.parse(raw);
    }

    // Äáº£m báº£o cáº¥u trÃºc dá»¯ liá»‡u Ä‘Ãºng
    if (template === 'risk') {
      if (!parsed.risk_items) parsed.risk_items = [];
      
      // Äáº£m báº£o má»—i má»¥c cÃ³ Ä‘á»§ trÆ°á»ng
      parsed.risk_items = parsed.risk_items.map(item => ({
        description: item.description || "",
        risk_level: item.risk_level || "Cáº§n xem xÃ©t",
        strategy: item.strategy || "Giáº£m thiá»ƒu",
        action: item.action || "",
        timeline: item.timeline || ""
      }));
    } else if (template === 'progress') {
      if (!parsed.progress_items) parsed.progress_items = [];
      
      // Äáº£m báº£o má»—i má»¥c cÃ³ Ä‘á»§ trÆ°á»ng
      parsed.progress_items = parsed.progress_items.map(item => ({
        content: item.content || "",
        master_plan: item.master_plan || "",
        progress: item.progress || "",
        evaluation: item.evaluation || "ÄÃºng tiáº¿n Ä‘á»™",
        next_plan: item.next_plan || "",
        challenges: item.challenges || "",
        proposals: item.proposals || "",
        notes: item.notes || ""
      }));
    } else {
      // Giá»¯ nguyÃªn logic hiá»‡n táº¡i cho template mom
      if (!parsed.discussion_topics) parsed.discussion_topics = [];
      if (!parsed.action_items) parsed.action_items = [];
      if (!parsed.assessment) parsed.assessment = "ÄÃºng tiáº¿n Ä‘á»™";

      parsed.discussion_topics = parsed.discussion_topics.map(topic => ({
        content: topic.content || "",
        pic: topic.pic || "",
        note: topic.note || ""
      }));

      parsed.action_items = parsed.action_items.map(action => ({
        content: action.content || "",
        deadline: action.deadline || "",
        pic: action.pic || "",
        note: action.note || ""
      }));
    }
  } catch (e) {
    // Náº¿u cÃ³ lá»—i, táº¡o cáº¥u trÃºc máº·c Ä‘á»‹nh
    if (template === 'risk') {
      parsed = {
        risk_items: []
      };
    } else if (template === 'progress') {
      parsed = {
        progress_items: []
      };
    } else {
      parsed = {
        discussion_topics: [],
        action_items: [],
        assessment: "ÄÃºng tiáº¿n Ä‘á»™"
      };
    }
  }

  return { json: parsed, raw: raw || '', response: data };
}

async function askGrok(env, userText) {
  const base = (env.XAI_BASE_URL || 'https://api.x.ai/v1').replace(/\/$/, '');
  const body = { model: 'grok-3-mini', input: String(userText || ''), temperature: 0.3 };

  const r = await fetch(`${base}/responses`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${env.XAI_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body)
  });

  if (!r.ok) {
    throw new StepError('grok', `xAI ${r.status}: ${await r.text()}`);
  }

  const data = await r.json();
  let text = '';
  if (data.output_text) text = data.output_text.trim();
  if (!text && data.output?.[1]?.content?.[0]?.text) {
    text = data.output[1].content[0].text.trim();
  }

  return text || 'MÃ¬nh chÆ°a cháº¯c vá» cÃ¢u nÃ y. Báº¡n cÃ³ thá»ƒ nÃ³i rÃµ hÆ¡n bá»‘i cáº£nh hoáº·c má»¥c tiÃªu muá»‘n Ä‘áº¡t khÃ´ng?';
}

// ============================================================================
// 6) CONFLUENCE/JIRA COMMON
// ============================================================================
function envConfluenceBase(env) {
  // tráº£ vá» https://{site}.atlassian.net/wiki
  let base = (env.ATLASSIAN_BASE || '').trim();
  if (!base) throw new StepError('confluence', 'Missing ATLASSIAN_BASE');
  base = base.replace(/\/+$/, '');
  if (!/\/wiki$/.test(base)) base += '/wiki';
  return base;
}


/**
 * Láº¥y YYYY-MM-DD theo **mÃºi giá» Ä‘á»‹a phÆ°Æ¡ng** (Æ°u tiÃªn env.TZ hoáº·c offset phÃºt).
 * - env.TZ: IANA time zone (vd: 'Asia/Ho_Chi_Minh')
 * - env.TIMEZONE_OFFSET_MINUTES: sá»‘ phÃºt lá»‡ch so vá»›i UTC (VN = 420)
 */
function localDateISO(env){
  // 1) Æ¯u tiÃªn IANA timezone náº¿u cÃ³
  const tz = (env.TZ || env.TIMEZONE || '').trim();
  if (tz) {
    try {
      const parts = new Intl.DateTimeFormat('en-US', {
        timeZone: tz,
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
      }).formatToParts(new Date());
      const y = parts.find(p=>p.type==='year').value;
      const m = parts.find(p=>p.type==='month').value;
      const d = parts.find(p=>p.type==='day').value;
      return `${y}-${m}-${d}`; // YYYY-MM-DD
    } catch (_e) { /* fallback below */ }
  }
  // 2) Fallback theo offset phÃºt
  const offStr = String(env.TIMEZONE_OFFSET_MINUTES || env.TZ_OFFSET_MINUTES || 420);
  const off = parseInt(offStr, 10);
  const now = new Date();
  const utcMs = now.getTime() + now.getTimezoneOffset()*60000;
  const local = new Date(utcMs + (isNaN(off)?420:off)*60000);
  const y = local.getFullYear();
  const m = String(local.getMonth()+1).padStart(2,'0');
  const d = String(local.getDate()).padStart(2,'0');
  return `${y}-${m}-${d}`;
}

function confluenceApiUrl(env, path) {
  return envConfluenceBase(env) + '/rest/api' + (path || '');
}
function envJiraBase(env) {
  // tráº£ vá» https://{site}.atlassian.net (khÃ´ng cÃ³ /wiki)
  let base = (env.ATLASSIAN_BASE || '').trim();
  if (!base) throw new StepError('jira', 'Missing ATLASSIAN_BASE');
  base = base.replace(/\/+$/, '');
  if (base.endsWith('/wiki')) {
    base = base.substring(0, base.length - 5);
  }
  return base;
}
function atlassianEmail(env) {
  return env.ATLASSIAN_EMAIL || env.ATLASSIAN_USER;
}
function escapeHtml(s = '') { return String(s).replace(/[&<>"]/g, c => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;' }[c])); }

// HÃ m chuyá»ƒn Ä‘á»•i vÄƒn báº£n thÃ nh bullet points
function textToBulletPoints(text) {
  if (!text || typeof text !== 'string') return '';

  let processedText = text.trim();
  processedText = processedText.replace(/^[\-\*\+]\s*/gm, '- ');

  processedText = processedText.replace(/;|,+/g, function (match) {
    return (match === ';' || match.length >= 2) ? '||SPLIT||' : match;
  });

  let points = [];
  let parts = processedText.split('||SPLIT||');

  for (const part of parts) {
    const trimmedPart = part.trim();
    if (!trimmedPart) continue;

    let sentenceParts = trimmedPart.split(/[.!?]+/);

    for (const sentencePart of sentenceParts) {
      const trimmedSentence = sentencePart.trim();
      if (!trimmedSentence) continue;

      if (trimmedSentence.length > 50) {
        let subParts = trimmedSentence.split(/,\s*[A-ZÃÃ€áº¢Ãƒáº Ä‚áº®áº°áº²áº´áº¶Ã‚áº¤áº¦áº¨áºªáº¬ÄÃ‰Ãˆáººáº¼áº¸ÃÃŒá»ˆÄ¨á»ŠÃ“Ã’á»ŽÃ•á»ŒÃ”á»á»’á»”á»–á»˜Æ á»šá»œá»žá» á»¢ÃšÃ™á»¦Å¨á»¤Æ¯á»¨á»ªá»¬á»®á»°Ãá»²á»¶á»¸á»´]/);

        if (subParts.length > 1) {
          for (const subPart of subParts) {
            const trimmedSub = subPart.trim();
            if (trimmedSub) {
              if (trimmedSub.endsWith(',')) {
                points.push(trimmedSub.substring(0, trimmedSub.length - 1).trim());
              } else {
                points.push(trimmedSub);
              }
            }
          }
        } else {
          points.push(trimmedSentence);
        }
      } else {
        points.push(trimmedSentence);
      }
    }
  }

  if (points.length === 0) {
    return escapeHtml(text);
  }

  let bulletPoints = '';
  for (const point of points) {
    const trimmedPoint = point.trim();
    if (trimmedPoint) {
      bulletPoints += `- ${escapeHtml(trimmedPoint)}<br/>`;
    }
  }

  return bulletPoints;
}

// Cáº­p nháº­t hÃ m buildConfluenceTableHTML Ä‘á»ƒ há»— trá»£ Risk Management
function buildConfluenceTableHTML(obj = {}, template = 'mom') {
  const esc = (val) => {
    const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
    return String(val).replace(/[&<>"']/g, m => map[m]);
  };

  if (template === 'risk' && obj.risk_items) {
    const items = Array.isArray(obj.risk_items) ? obj.risk_items : [];
    const rows = items.filter(item => {
      if (!item) return false;
      const desc = String(item.description || '').trim();
      const level = String(item.risk_level || '').trim();
      const strategy = String(item.strategy || '').trim();
      const action = String(item.action || '').trim();
      const timeline = String(item.timeline || '').trim();
      return !!(desc || level || strategy || action || timeline);
    });

    return `
<div style="margin-top:12px;font-size:15px">
<table class="confluenceTable" style="width:100%;border-collapse:collapse;table-layout:fixed">
  <colgroup>
    <col style="width:56px">
    <col>
    <col style="width:180px">
    <col style="width:180px">
    <col>
    <col style="width:150px">
  </colgroup>
  <tbody>
    <tr><th colspan="6" class="confluenceTh" style="text-align:center">Risk Management</th></tr>
    <tr>
      <th class="confluenceTh">STT</th>
      <th class="confluenceTh">MÃ´ táº£</th>
      <th class="confluenceTh">Má»©c Ä‘á»™ rá»§i ro</th>
      <th class="confluenceTh">Chiáº¿n lÆ°á»£c á»©ng phÃ³</th>
      <th class="confluenceTh">HÃ nh Ä‘á»™ng á»©ng phÃ³ phá»• cáº­p tháº¿</th>
      <th class="confluenceTh">Thá»i háº¡n</th>
    </tr>
    ${
      rows.length ? rows.map((item, i) => `
        <tr>
          <td class="confluenceTd" style="text-align:center">${i+1}</td>
          <td class="confluenceTd">${esc(item.description)}</td>
          <td class="confluenceTd">${esc(item.risk_level)}</td>
          <td class="confluenceTd">${esc(item.strategy)}</td>
          <td class="confluenceTd">${esc(item.action)}</td>
          <td class="confluenceTd">${esc(item.timeline)}</td>
        </tr>
      `).join('') : `
      <tr><td class="confluenceTd" colspan="6">KhÃ´ng cÃ³ rá»§i ro</td></tr>
      `
    }
  </tbody>
</table>
</div>`.trim();
  }

  if (template === 'progress' && obj.progress_items) {
    const items = Array.isArray(obj.progress_items) ? obj.progress_items : [];
    const rows = items.filter(item => {
      if (!item) return false;
      const content = String(item.content || '').trim();
      const masterPlan = String(item.master_plan || '').trim();
      const progress = String(item.progress || '').trim();
      const evaluation = String(item.evaluation || '').trim();
      const nextPlan = String(item.next_plan || '').trim();
      const challenges = String(item.challenges || '').trim();
      const proposals = String(item.proposals || '').trim();
      const notes = String(item.notes || '').trim();
      return !!(content || masterPlan || progress || evaluation || nextPlan || challenges || proposals || notes);
    });

    return `
<div style="margin-top:12px;font-size:15px">
<table class="confluenceTable" style="width:100%;border-collapse:collapse;table-layout:fixed">
  <colgroup>
    <col style="width:56px">
    <col>
    <col style="width:150px">
    <col style="width:150px">
    <col style="width:150px">
    <col style="width:150px">
    <col style="width:150px">
    <col style="width:150px">
    <col>
  </colgroup>
  <tbody>
    <tr><th colspan="9" class="confluenceTh" style="text-align:center">BÃ¡o cÃ¡o tiáº¿n Ä‘á»™ dá»± Ã¡n trá»ng Ä‘iá»ƒm</th></tr>
    <tr>
      <th class="confluenceTh">STT</th>
      <th class="confluenceTh">Ná»™i dung</th>
      <th class="confluenceTh">Master plan/Time line</th>
      <th class="confluenceTh">BÃ¡o cÃ¡o tiáº¿n Ä‘á»™</th>
      <th class="confluenceTh">ÄÃ¡nh giÃ¡ tiáº¿n Ä‘á»™</th>
      <th class="confluenceTh">Káº¿ hoáº¡ch tiáº¿p theo</th>
      <th class="confluenceTh">KhÃ³ khÄƒn vÆ°á»›ng máº¯c</th>
      <th class="confluenceTh">Äá» xuáº¥t/Kiáº¿n nghá»‹</th>
      <th class="confluenceTh">Ghi chÃº</th>
    </tr>
    ${
      rows.length ? rows.map((item, i) => `
        <tr>
          <td class="confluenceTd" style="text-align:center">${i+1}</td>
          <td class="confluenceTd">${esc(item.content)}</td>
          <td class="confluenceTd">${esc(item.master_plan)}</td>
          <td class="confluenceTd">${esc(item.progress)}</td>
          <td class="confluenceTd">${esc(item.evaluation)}</td>
          <td class="confluenceTd">${esc(item.next_plan)}</td>
          <td class="confluenceTd">${esc(item.challenges)}</td>
          <td class="confluenceTd">${esc(item.proposals)}</td>
          <td class="confluenceTd">${esc(item.notes)}</td>
        </tr>
      `).join('') : `
      <tr><td class="confluenceTd" colspan="9">KhÃ´ng cÃ³ dá»¯ liá»‡u</td></tr>
      `
    }
  </tbody>
</table>
</div>`.trim();
  }

  // Giá»¯ nguyÃªn logic hiá»‡n táº¡i cho template mom
  const dt = Array.isArray(obj.discussion_topics) ? obj.discussion_topics : [];
  const dtRows = dt.filter(t => {
    if (!t) return false;
    const c = String(t.content ?? '').trim();
    const p = String(t.pic ?? '').trim();
    const n = String(t.note ?? '').trim();
    return !!(c || p || n);
  });

  const discussionTable = `
<div style="margin-top:12px;font-size:15px">
<table class="confluenceTable" style="width:100%;border-collapse:collapse;table-layout:fixed">
  <colgroup>
    <col style="width:56px">
    <col>
    <col style="width:180px">
    <col style="width:240px">
  </colgroup>
  <tbody>
    <tr><th colspan="4" class="confluenceTh" style="text-align:center">Discussion topics</th></tr>
    <tr>
      <th class="confluenceTh">STT</th>
      <th class="confluenceTh">Ná»™i dung</th>
      <th class="confluenceTh">PIC</th>
      <th class="confluenceTh">Ghi chÃº</th>
    </tr>
    ${
      dtRows.length ? dtRows.map((t,i)=>`
        <tr>
          <td class="confluenceTd" style="text-align:center">${i+1}</td>
          <td class="confluenceTd">${esc(t.content)}</td>
          <td class="confluenceTd">${esc(t.pic)}</td>
          <td class="confluenceTd">${esc(t.note)}</td>
        </tr>
      `).join('') : `
      <tr><td class="confluenceTd" colspan="4">KhÃ´ng cÃ³ ná»™i dung tháº£o luáº­n</td></tr>
      `
    }
  </tbody>
</table>
</div>`.trim();

  // -------- Action items (own table) --------
  const ai = Array.isArray(obj.action_items) ? obj.action_items : [];
  const aiRows = ai.filter(a => {
    if (!a) return false;
    const c = String(a.content ?? '').trim();
    const d = String(a.deadline ?? '').trim();
    const p = String(a.pic ?? '').trim();
    const n = String(a.note ?? '').trim();
    return !!(c || d || p || n);
  });

  const actionTable = aiRows.length ? `
<div style="margin-top:12px;font-size:15px">
<table class="confluenceTable" style="width:100%;border-collapse:collapse;table-layout:fixed">
  <colgroup>
    <col>
    <col style="width:180px">
    <col style="width:150px">
    <col style="width:240px">
  </colgroup>
  <tbody>
    <tr><th colspan="4" class="confluenceTh" style="text-align:center">Action items</th></tr>
    <tr>
      <th class="confluenceTh">Ná»™i dung</th>
      <th class="confluenceTh">Deadline</th>
      <th class="confluenceTh">PIC</th>
      <th class="confluenceTh">Ghi chÃº</th>
    </tr>
    ${aiRows.map(a => `
      <tr>
        <td class="confluenceTd">${esc(a.content)}</td>
        <td class="confluenceTd">${esc(a.deadline)}</td>
        <td class="confluenceTd">${esc(a.pic)}</td>
        <td class="confluenceTd">${esc(a.note)}</td>
      </tr>
    `).join('')}
  </tbody>
</table>
</div>
`.trim() : '';

  // Tráº£ vá» cáº£ hai báº£ng
  if (discussionTable && actionTable) {
  return (`<ac:layout>
  <ac:layout-section ac:type="single">
    <ac:layout-cell>${discussionTable}</ac:layout-cell>
  </ac:layout-section>
  <ac:layout-section ac:type="single">
    <ac:layout-cell>${actionTable}</ac:layout-cell>
  </ac:layout-section>
</ac:layout>`).trim();
} else {
  return (discussionTable || actionTable || '').trim();
}

}

// ============================================================================
// 6.1) ZALO CONTACTS STORAGE (D1)
// ============================================================================
function d1(env){
  const db =
    env.D1 ||
    env.Zalo_Contact ||      // tÃªn binding cá»§a báº¡n trong console
    env.zalo_contacts ||
    env.ZALO_CONTACT ||
    env.ZALO_Contact;

  if (!db || (typeof db.prepare !== 'function' && typeof db.exec !== 'function')) {
    throw new StepError('d1', 'Missing D1 binding. Bind D1 lÃ  "D1" hoáº·c "Zalo_Contact".');
  }
  return db;
}

async function ensureContactsTable(env){
  const db = d1(env);
  const createTable = `
    CREATE TABLE IF NOT EXISTS zalo_contacts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      chat_id TEXT NOT NULL UNIQUE,
      display_name TEXT,
      created_at TEXT
    );
  `;
  const createIndex = `
    CREATE INDEX IF NOT EXISTS idx_zalo_contacts_name
    ON zalo_contacts (display_name);
  `;
  await db.prepare(createTable).run();
  await db.prepare(createIndex).run();
}

function normName(s){ return String(s || '').trim().slice(0, 80); }

async function saveContact(env, chatId, displayName){
  if (!chatId) return;
  await ensureContactsTable(env);
  const now = new Date().toISOString();
  const name = normName(displayName || '');
  await d1(env).prepare(`
    INSERT INTO zalo_contacts (chat_id, display_name, created_at)
    VALUES (?1, COALESCE(NULLIF(?2,''), (SELECT display_name FROM zalo_contacts WHERE chat_id=?1)), ?3)
    ON CONFLICT(chat_id) DO UPDATE SET
      display_name = COALESCE(excluded.display_name, zalo_contacts.display_name)
  `).bind(String(chatId), name, now).run();
}


async function getNameByChatId(env, chatId){
  await ensureContactsTable(env);
  const row = await d1(env).prepare(`
    SELECT display_name FROM zalo_contacts WHERE chat_id = ?1 LIMIT 1
  `).bind(String(chatId)).first();
  return row ? (row.display_name || null) : null;
}

async function listContacts(env){
  await ensureContactsTable(env);
  const rs = await d1(env).prepare(`
    SELECT chat_id, COALESCE(display_name, chat_id) AS display_name
    FROM zalo_contacts
    ORDER BY lower(display_name) ASC
  `).all();
  return rs.results || [];
}

async function findChatIdByName(env, displayName){
  await ensureContactsTable(env);
  const row = await d1(env).prepare(`
    SELECT chat_id FROM zalo_contacts
    WHERE lower(display_name)=lower(?1)
    LIMIT 1
  `).bind(normName(displayName)).first();
  return row ? row.chat_id : null;
}


// ============================================================================
// 7) UI HTML (Ä‘Ã£ cáº¯m sáºµn toÃ n bá»™)
// ============================================================================
function homeHTML() {
  return `<!DOCTYPE html>
<html lang="vi">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>CÃ´ng cá»¥ AI cho PMO - BIDV</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<style>
  :root{
    --bg:#f8fafc;       
    --card:#ffffff;
    --soft:#f1f5f9;
    --text:#0f172a;     
    --muted:#64748b;
    --line:#e2e8f0;
    --primary:#009639;
    --primary-600:#006b2a;
    --primary-50:#f0fdf4;
    --accent:#22c55e;
    --accent-50:#f0fdf4;
    --radius:16px;
    --shadow:0 4px 12px rgba(0,0,0,0.05);
    --shadow-lg:0 10px 25px rgba(0,0,0,0.08);
    --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  *{box-sizing:border-box}
  html,body{height:100%;overflow-x:hidden} /* NgÄƒn cuá»™n ngang */
  body{margin:0;background:var(--bg);color:var(--text);font:16px/1.5 Inter,system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial;-webkit-font-smoothing:antialiased}

  /* Header dÃ­nh vá»›i hiá»‡u á»©ng má» */
  .top{position:sticky;top:0;z-index:100;background:rgba(255,255,255,0.95);backdrop-filter:blur(12px);border-bottom:1px solid var(--line);box-shadow:0 1px 3px rgba(0,0,0,0.05)}
  .top .row{max-width:1140px;margin:0 auto;padding:12px 20px;display:flex;align-items:center;justify-content:space-between}
  .brand{display:flex;align-items:center;gap:10px}
  .logo{width:40px;height:40px;border-radius:10px;background:var(--primary-50);display:grid;place-items:center;overflow:hidden;box-shadow:0 2px 8px rgba(0,150,57,0.15)}
  .logo img{max-width:100%;max-height:100%}
  .brand .title{margin:0;font-size:18px;font-weight:800;letter-spacing:-0.02em;color:var(--primary)}
  .nav{display:flex;gap:4px}
  .nav a{padding:8px 12px;border-radius:8px;text-decoration:none;color:var(--text);font-weight:500;transition:var(--transition);position:relative;font-size:14px}
  .nav a::before{content:"";position:absolute;bottom:0;left:50%;width:0;height:2px;background:var(--primary);border-radius:2px;transform:translateX(-50%);transition:var(--transition)}
  .nav a:hover{background:var(--primary-50);color:var(--primary)}
  .nav a:hover::before{width:70%}

  .container{max-width:1140px;margin:0 auto;padding:30px 20px;box-sizing:border-box} /* ThÃªm box-sizing */

  /* HERO vá»›i hiá»‡u á»©ng gradient vÃ  animation */
  .hero{
    display:grid;grid-template-columns:1fr 1fr;gap:30px;align-items:center;
    background:linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border-radius:20px;padding:30px;box-shadow:var(--shadow-lg);position:relative;overflow:hidden;
  }
  .hero::before{content:"";position:absolute;top:-80px;right:-80px;width:240px;height:240px;border-radius:50%;background:var(--primary-50);opacity:0.5;z-index:0}
  .hero::after{content:"";position:absolute;bottom:-40px;left:-40px;width:160px;height:160px;border-radius:50%;background:var(--accent-50);opacity:0.4;z-index:0}
  .hero-content{position:relative;z-index:1}
  .hero h2{margin:0 0 12px;font-size:32px;font-weight:800;letter-spacing:-0.03em;line-height:1.2}
  .hero p{margin:0 0 20px;color:var(--muted);font-size:16px;line-height:1.5}
  .cta{display:flex;flex-wrap:wrap;gap:10px}
  .btn{appearance:none;border:0;border-radius:10px;padding:12px 18px;font-weight:600;cursor:pointer;display:inline-flex;gap:8px;align-items:center;transition:var(--transition);font-size:14px}
  .btn.primary{background:var(--primary);color:#fff;box-shadow:0 4px 12px rgba(0,150,57,0.2)}
  .btn.primary:hover{background:var(--primary-600);transform:translateY(-2px);box-shadow:0 6px 16px rgba(0,150,57,0.25)}
  .btn.ghost{background:#fff;border:1px solid var(--line);color:var(--primary);box-shadow:0 2px 8px rgba(0,0,0,0.04)}
  .btn.ghost:hover{background:var(--primary-50);transform:translateY(-2px);box-shadow:0 4px 12px rgba(0,0,0,0.08)}

  .hero-visual{position:relative;z-index:1}
  .hero-side{display:grid;grid-template-columns:1fr;gap:12px}
  .gcard{background:#fff;border:1px solid var(--line);border-radius:14px;padding:16px;display:flex;gap:12px;align-items:flex-start;transition:var(--transition);box-shadow:0 2px 8px rgba(0,0,0,0.04)}
  .gcard:hover{transform:translateY(-3px);box-shadow:0 8px 16px rgba(0,0,0,0.08)}
  .gcard i{color:var(--primary);font-size:20px;width:40px;height:40px;background:var(--primary-50);border-radius:10px;display:flex;align-items:center;justify-content:center}
  .gcard-content{flex:1}
  .gcard .gtitle{margin:0 0 4px;font-size:16px;font-weight:700}
  .gcard small{display:block;color:var(--muted);font-size:13px;line-height:1.4}

  /* LÆ°á»›i module vá»›i hiá»‡u á»©ng nÃ¢ng cao */
  .section-header{margin:50px 0 20px} /* Giáº£m margin-top Ä‘á»ƒ vá»«a mÃ n hÃ¬nh */
  .section-title{margin:0;font-size:24px;font-weight:700;letter-spacing:-0.02em}
  
  .grid{display:grid;grid-template-columns:repeat(12,1fr);gap:24px;margin-top:20px}
  a.module{
    grid-column:span 4;
    text-decoration:none;color:inherit;background:var(--card);border:1px solid var(--line);
    border-radius:16px;padding:28px;position:relative;display:flex;flex-direction:column;
    min-height:320px;transition:var(--transition);overflow:hidden; /* Giáº£m min-height */
    box-shadow:0 4px 12px rgba(0,0,0,0.04);
  }
  a.module::before{content:"";position:absolute;top:0;left:0;width:100%;height:3px;background:var(--primary);transform:translateX(-100%);transition:var(--transition)}
  a.module:hover{transform:translateY(-4px);box-shadow:0 10px 20px rgba(0,0,0,0.08)}
  a.module:hover::before{transform:translateX(0)}
  
  .module-header{display:flex;align-items:center;gap:16px;margin-bottom:20px}
  .micon{width:60px;height:60px;border-radius:14px;background:var(--primary-50);border:1px solid var(--accent-50);display:grid;place-items:center;transition:var(--transition)}
  a.module:hover .micon{background:var(--primary);color:#fff}
  .micon i{color:var(--primary);font-size:28px;transition:var(--transition)}
  a.module:hover .micon i{color:#fff}
  .mtitle{margin:0;font-size:22px;font-weight:700;letter-spacing:-0.01em}
  .mdesc{margin:0 0 16px;color:var(--text);font-size:16px;line-height:1.5}
  .mdetails{margin:0 0 20px;color:var(--muted);font-size:15px;line-height:1.6}
  .mdetails li{margin-bottom:8px;list-style-type:none;position:relative;padding-left:20px}
  .mdetails li::before{content:"â€¢";position:absolute;left:0;color:var(--primary);font-weight:700}
  .tags{margin-top:auto;display:flex;gap:8px;flex-wrap:wrap}
  .tag{background:var(--soft);border:1px solid var(--line);padding:6px 14px;border-radius:20px;font-size:14px;font-weight:500;color:var(--text);transition:var(--transition)}
  .tag:hover{background:var(--primary-50);border-color:var(--accent)}
  .go{position:absolute;right:16px;top:16px;color:var(--muted);font-size:18px;opacity:0;transition:var(--transition)}
  a.module:hover .go{opacity:1}

  /* Footer cáº£i tiáº¿n */
  .footer{padding:24px 0;text-align:center;color:var(--muted);font-size:13px;margin-top:40px;border-top:1px solid var(--line)} /* Giáº£m margin-top */
  .footer-links{display:flex;justify-content:center;gap:16px;margin-bottom:10px}
  .footer-links a{color:var(--muted);text-decoration:none;font-weight:500;transition:var(--transition)}
  .footer-links a:hover{color:var(--primary)}

  /* Animation cho cÃ¡c pháº§n tá»­ */
  @keyframes fadeInUp {
    from {opacity: 0; transform: translateY(20px);}
    to {opacity: 1; transform: translateY(0);}
  }
  .animate-fade-in-up {
    animation: fadeInUp 0.6s ease-out forwards;
  }

  /* Responsive improvements - Tá»‘i Æ°u cho má»i kÃ­ch thÆ°á»›c mÃ n hÃ¬nh */
  @media (max-width:1200px){
    .container{max-width:100%;padding:20px}
    .hero{padding:24px;gap:24px}
    .hero h2{font-size:28px}
    .section-header{margin-top:40px}
    .grid{gap:20px}
    a.module{padding:24px;min-height:300px}
  }
  
  @media (max-width:1100px){
    .hero{grid-template-columns:1fr;gap:20px}
    a.module{grid-column:span 6}
  }
  
  @media (max-width:900px){
    .container{padding:20px 16px}
    .hero{padding:20px;border-radius:16px}
    .hero h2{font-size:26px}
    .hero p{font-size:15px}
    .section-title{font-size:22px}
    .section-header{margin-top:30px}
    .grid{margin-top:15px;gap:16px}
    a.module{padding:20px;min-height:280px}
    .mtitle{font-size:20px}
    .mdesc{font-size:15px}
    .mdetails{font-size:14px}
    .tag{font-size:13px}
  }
  
  @media (max-width:720px){
    .container{padding:16px 12px}
    .hero{padding:16px}
    .hero h2{font-size:24px}
    .hero p{font-size:14px}
    a.module{grid-column:span 12;min-height:auto;padding:18px}
    .nav{flex-wrap:justify-content}
    .nav a{padding:6px 10px;font-size:13px}
    .section-title{font-size:20px}
    .section-header{margin-top:25px}
    .grid{margin-top:12px;gap:12px}
    .module-header{gap:12px;margin-bottom:16px}
    .micon{width:50px;height:50px}
    .micon i{font-size:24px}
    .mtitle{font-size:18px}
    .mdesc{font-size:14px}
    .mdetails{font-size:13px;line-height:1.5}
    .mdetails li{margin-bottom:6px;padding-left:16px}
    .tag{font-size:12px;padding:5px 12px}
    .footer{margin-top:30px;padding:20px 0}
  }
  
  @media (max-width:480px){
    .container{padding:12px 8px}
    .hero{padding:12px;border-radius:12px}
    .hero h2{font-size:22px}
    .hero p{font-size:13px}
    .btn{padding:10px 14px;font-size:13px}
    .section-title{font-size:18px}
    .section-header{margin-top:20px}
    .grid{margin-top:10px;gap:10px}
    a.module{padding:16px}
    .module-header{gap:10px;margin-bottom:14px}
    .micon{width:44px;height:44px}
    .micon i{font-size:20px}
    .mtitle{font-size:16px}
    .mdesc{font-size:13px}
    .mdetails{font-size:12px}
    .mdetails li{margin-bottom:5px;padding-left:14px}
    .tag{font-size:11px;padding:4px 10px}
    .footer{margin-top:20px;padding:16px 0;font-size:12px}
    .footer-links{gap:12px}
  }
</style>
</head>
<body>
  <header class="top">
    <div class="row">
      <div class="brand">
        <div class="logo">
          <img src="https://z-cdn-media.chatglm.cn/files/1a1ab789-5429-451f-bb53-65e73a39e4bd_pasted_image_1758225809744.png"
               alt="BIDV" onerror="this.style.display='none'">
        </div>
        <h1 class="title">CÃ´ng cá»¥ AI cho PMO</h1>
      </div>
      <nav class="nav">
        <a href="/"><i class="fa-solid fa-home"></i>&nbsp;Trang chá»§</a>
        <a href="/meetingnote"><i class="fa-solid fa-microphone-lines"></i>&nbsp;Meeting Note</a>
        <a href="/risk"><i class="fa-solid fa-triangle-exclamation"></i>&nbsp;Risk Management</a>
        <a href="/chatbot"><i class="fa-solid fa-robot"></i>&nbsp;Chat Bot</a>
      </nav>
    </div>
  </header>

  <main class="container">
    

    <!-- HERO vá»›i animation -->
    <section class="hero animate-fade-in-up">
      <div class="hero-content">
        <h2>Tá»‘i Æ°u quáº£n lÃ½ dá»± Ã¡n vá»›i AI</h2>
        <p>Tá»± Ä‘á»™ng hÃ³a biÃªn báº£n há»p, theo dÃµi rá»§i ro, sinh bÃ¡o cÃ¡o vÃ  há»i Ä‘Ã¡p Jira/Confluence ngay tá»©c thÃ¬.</p>
        <div class="cta">
          <a href="/meetingnote" class="btn primary"><i class="fa-solid fa-bolt"></i>Báº¯t Ä‘áº§u Meeting Note</a>
          <a href="/chatbot" class="btn ghost"><i class="fa-solid fa-robot"></i>Má»Ÿ Chat Bot</a>
        </div>
      </div>

      <div class="hero-visual">
        <div class="hero-side">
          <div class="gcard">
            <i class="fa-solid fa-wand-magic-sparkles"></i>
            <div class="gcard-content">
              <div class="gtitle">Tá»± Ä‘á»™ng hÃ³a bÃ¡o cÃ¡o</div>
              <small>TrÃ­ch xuáº¥t master plan, tiáº¿n Ä‘á»™, vÆ°á»›ng máº¯c & kiáº¿n nghá»‹ tá»« transcript.</small>
            </div>
          </div>
          <div class="gcard">
            <i class="fa-solid fa-puzzle-piece"></i>
            <div class="gcard-content">
              <div class="gtitle">TÃ­ch há»£p Jira & Confluence</div>
              <small>Táº¡o ticket, push page chuáº©n PMO chá»‰ vá»›i má»™t cÃº nháº¥p.</small>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- SECTION HEADER - ÄÃƒ XÃ“A "XEM Táº¤T Cáº¢" -->
    <div class="section-header">
      <h3 class="section-title">CÃ´ng cá»¥ AI cho PMO</h3>
    </div>

    <!-- MODULE GRID vá»›i hiá»‡u á»©ng nÃ¢ng cao -->
    <section class="grid">
      <a class="module" href="/meetingnote">
        <span class="go"><i class="fa-solid fa-arrow-up-right-from-square"></i></span>
        <div class="module-header">
          <div class="micon"><i class="fa-solid fa-microphone-lines"></i></div>
          <div class="mtitle">AI Meeting Insights</div>
        </div>
        <p class="mdesc">Chuyá»ƒn ghi Ã¢m â†’ minutes, action items; Ä‘áº©y Confluence/Jira.</p>
        <ul class="mdetails">
          <li>Tá»± Ä‘á»™ng nháº­n diá»‡n ngÆ°á»i nÃ³i vÃ  phÃ¢n loáº¡i ná»™i dung</li>
          <li>TrÃ­ch xuáº¥t quyáº¿t Ä‘á»‹nh vÃ  cÃ´ng viá»‡c cáº§n lÃ m</li>
          <li>Táº¡o bÃ¡o cÃ¡o tá»•ng há»£p theo máº«u PMO</li>
          <li>Äá»“ng bá»™ hÃ³a vá»›i Jira vÃ  Confluence</li>
        </ul>
        <div class="tags"><span class="tag">Deepgram</span><span class="tag">Grok 3 Mini</span></div>
      </a>

      <a class="module" href="/risk">
        <span class="go"><i class="fa-solid fa-arrow-up-right-from-square"></i></span>
        <div class="module-header">
          <div class="micon"><i class="fa-solid fa-triangle-exclamation"></i></div>
          <div class="mtitle">AI Risk Management</div>
        </div>
        <p class="mdesc">Cáº£nh bÃ¡o trá»… háº¡n, backlog tÄƒng, dá»± bÃ¡o rá»§i ro & gá»£i Ã½ xá»­ lÃ½.</p>
        <ul class="mdetails">
          <li>PhÃ¢n tÃ­ch dá»¯ liá»‡u Jira Ä‘á»ƒ phÃ¡t hiá»‡n rá»§i ro</li>
          <li>Cáº£nh bÃ¡o tá»± Ä‘á»™ng khi cÃ³ dáº¥u hiá»‡u trá»… háº¡n</li>
          <li>Äá» xuáº¥t giáº£i phÃ¡p giáº£m thiá»ƒu rá»§i ro</li>
          <li>BÃ¡o cÃ¡o rá»§i ro theo Ä‘á»‹nh ká»³ vÃ  theo yÃªu cáº§u</li>
        </ul>
        <div class="tags"><span class="tag">Cáº£nh bÃ¡o</span><span class="tag">Sprint</span></div>
      </a>

      <a class="module" href="/chatbot">
        <span class="go"><i class="fa-solid fa-arrow-up-right-from-square"></i></span>
        <div class="module-header">
          <div class="micon"><i class="fa-solid fa-robot"></i></div>
          <div class="mtitle">AI Chat Bot</div>
        </div>
        <p class="mdesc">Há»i Jira/Confluence, lá»c JQL tá»± Ä‘á»™ng, tráº£ lá»i 24/7.</p>
        <ul class="mdetails">
          <li>Truy váº¥n thÃ´ng tin dá»± Ã¡n báº±ng ngÃ´n ngá»¯ tá»± nhiÃªn</li>
          <li>Táº¡o JQL phá»©c táº¡p tá»« yÃªu cáº§u Ä‘Æ¡n giáº£n</li>
          <li>Tá»•ng há»£p bÃ¡o cÃ¡o nhanh theo yÃªu cáº§u</li>
          <li>TÃ­ch há»£p Zalo Ä‘á»ƒ há»— trá»£ má»i lÃºc má»i nÆ¡i</li>
        </ul>
        <div class="tags"><span class="tag">JQL</span><span class="tag">Zalo Bot</span></div>
      </a>
    </section>
  </main>

  <footer class="footer">
    <div class="footer-links">
      <a href="#">HÆ°á»›ng dáº«n sá»­ dá»¥ng</a>
      <a href="#">LiÃªn há»‡</a>
      <a href="#">ChÃ­nh sÃ¡ch báº£o máº­t</a>
    </div>
    <p>Â© 2025 BIDV â€” CÃ´ng cá»¥ AI cho PMO</p>
  </footer>
</body>
</html>`;
}
function meetingNoteHTML() {
  return `<!doctype html>
<html lang="vi">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>AI Meeting Insights â€” PMO</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<style>
  /* ====== Palette & tokens Ä‘á»“ng bá»™ trang chá»§ ====== */
  :root{
    --bg:#f6f8fb;
    --card:#ffffff;
    --soft:#f1f5f9;
    --text:#111827;
    --muted:#6b7280;
    --line:#e5e7eb;
    --primary:#009639;
    --primary-600:#006b2a;
    --accent:#22c55e;
    --radius:16px;
    --shadow:0 10px 28px rgba(16,24,40,.10);
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{margin:0;background:var(--bg);color:var(--text);font:16px/1.6 "Inter",system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}

  /* ====== Header dÃ­nh giá»‘ng trang chá»§ ====== */
  .top{position:sticky;top:0;z-index:10;background:rgba(255,255,255,.88);backdrop-filter:saturate(1.05) blur(10px);border-bottom:1px solid var(--line)}
  .top .row{max-width:1240px;margin:0 auto;padding:12px 20px;display:flex;align-items:center;justify-content:space-between;gap:12px}
  .brand{display:flex;align-items:center;gap:10px}
  .logo{width:42px;height:42px;border-radius:10px;background:#e7f6ee;display:grid;place-items:center;overflow:hidden}
  .logo img{max-width:100%;max-height:100%}
  .title{margin:0;font-size:18px;font-weight:800;letter-spacing:.2px}
  .nav{display:flex;gap:8px;flex-wrap:wrap}
  .nav a{padding:8px 12px;border-radius:10px;text-decoration:none;color:#0f172a;border:1px solid transparent}
  .nav a:hover{background:#f0fdf4;border-color:#dcfce7}

  .container{max-width:1240px;margin:0 auto;padding:22px 20px}

  /* ====== Hero Ä‘Æ¡n giáº£n ====== */
  .hero{
    text-align:center;
    padding:24px 24px; /* Giáº£m padding tá»« 32px xuá»‘ng 24px */
    margin-bottom:16px; /* Giáº£m margin tá»« 24px xuá»‘ng 16px */
  }
  .hero h2{margin:0 0 12px;font-size:36px;font-weight:800;letter-spacing:-0.02em;color:#0f172a;}
  .hero p{margin:0 auto 16px;color:#475569;font-size:16px;max-width:600px;} /* Giáº£m margin tá»« 20px xuá»‘ng 16px */
  .cta{display:flex;justify-content:center;flex-wrap:wrap;gap:12px;}
  .btn{appearance:none;border:0;border-radius:12px;padding:12px 20px;font-weight:700;cursor:pointer;display:inline-flex;gap:8px;align-items:center;transition:all .2s ease;}
  .btn.primary{background:linear-gradient(90deg,var(--primary),var(--primary-600));color:#fff;box-shadow:0 8px 20px rgba(0,150,57,0.25);}
  .btn.primary:hover{transform:translateY(-2px);box-shadow:0 12px 28px rgba(0,150,57,0.35);}
  .btn.ghost{background:#ffffff;border:1px solid rgba(15,23,42,0.08);color:var(--primary);box-shadow:0 6px 14px rgba(15,23,42,0.06);} 
  .btn.ghost:hover{background:#f0fdf4;border-color:#dcfce7;} 
  .muted{color:var(--muted)}

  /* ====== LÆ°á»›i ná»™i dung chÃ­nh ====== */
  .grid{margin-top:12px;display:grid;grid-template-columns:repeat(12,1fr);gap:16px} /* Giáº£m margin tá»« 20px xuá»‘ng 12px */

  /* Stepper navigation - Ná»”I Báº¬T */
  .stepper{display:flex;gap:16px;margin:0 0 24px;padding:20px;background:linear-gradient(135deg,#ffffff 0%,#f0fdf4 100%);border:2px solid var(--primary);border-radius:24px;box-shadow:0 12px 32px rgba(0,150,57,0.15);overflow-x:auto;scrollbar-width:thin;}
  .stepper::-webkit-scrollbar{height:8px;}
  .stepper::-webkit-scrollbar-thumb{background:var(--primary);border-radius:999px;}
  .stepper-button{flex:1;display:flex;align-items:center;gap:14px;padding:16px 20px;background:#fff;border:2px solid #e5e7eb;border-radius:16px;cursor:pointer;color:#1e293b;font-weight:600;transition:all .3s ease;position:relative;min-width:220px;box-shadow:0 4px 12px rgba(0,0,0,0.05);}
  .stepper-button:not(:last-child)::after{content:'â†’';position:absolute;right:-20px;top:50%;font-size:20px;color:var(--primary);transform:translateY(-50%);z-index:1;font-weight:800;}
  .stepper-button:hover{transform:translateY(-2px);box-shadow:0 8px 20px rgba(0,0,0,0.1);border-color:var(--primary);}
  .stepper-button.active{background:linear-gradient(135deg,var(--primary),var(--primary-600));color:#fff;border-color:var(--primary-600);box-shadow:0 8px 24px rgba(0,150,57,0.3);transform:scale(1.05);}
  .stepper-button.completed{background:#e6f4ea;border-color:#22c55e;opacity:1;}
  .step-index{display:inline-grid;place-items:center;width:40px;height:40px;border-radius:50%;background:#f1f5f9;font-size:18px;font-weight:800;color:#1e293b;transition:all .3s ease;}
  .stepper-button.active .step-index{background:#fff;color:var(--primary-600);}
  .stepper-button.completed .step-index{background:#22c55e;color:#fff;}
  .step-text{display:flex;flex-direction:column;align-items:flex-start;gap:4px;min-width:0;}
  .step-title{font-size:11px;text-transform:uppercase;letter-spacing:0.08em;color:#94a3b8;font-weight:700;}
  .stepper-button.active .step-title{color:#fff;}
  .stepper-button.completed .step-title{color:#166534;}
  .step-subtitle{font-size:16px;font-weight:700;color:#1e293b;white-space:nowrap;}
  .stepper-button.active .step-subtitle{color:#fff;}
  .stepper-button.completed .step-subtitle{color:#166534;}
  .step-content{display:none;}
  .step-content.active{display:grid;}

  @media (max-width:900px){.stepper{flex-direction:column;gap:8px;padding:10px}.stepper-button{width:100%;min-width:0}.stepper-button:not(:last-child)::after{display:none}.stepper{overflow-x:visible}}

  .panel{background:var(--card);border:1px solid var(--line);border-radius:18px;padding:18px;box-shadow:var(--shadow)}
  .panel h3{margin:0 0 10px;font-size:18px}

  /* Upload card (dropzone) */
  .drop{border:2px dashed #C1C7D0;border-radius:12px;padding:22px;text-align:center;background:#FAFBFC;transition:.2s}
  .drop.dragover{border-color:var(--primary);background:#F0F7FF}
  .progress{height:8px;background:#EBECF0;border-radius:999px;overflow:hidden;margin-top:12px}
  .bar{height:100%;width:0;background:var(--primary)}

  .row{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
  input[type="file"]{display:block;width:100%;max-width:420px;border:1px dashed var(--line);border-radius:12px;padding:10px;background:#fff}

  textarea{width:100%;min-height:160px;border-radius:12px;border:1px solid #DFE1E6;padding:12px;font:14px/1.4 ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas}
  pre.status{background:#f8fafc;border:1px solid var(--line);border-radius:12px;padding:12px;overflow:auto;max-height:320px}

  .spinner{width:18px;height:18px;border:3px solid #C1C7D0;border-top-color:var(--primary);border-radius:50%;display:none;animation:spin 1s linear infinite}
  @keyframes spin{to{transform:rotate(360deg)}}

  /* Tabs (giá»¯ IDs JS, style má»›i) */
  .tab-container{margin-top:16px}
  .tab-buttons{display:flex;gap:8px;border-bottom:1px solid var(--line)}
  .tab-button{padding:10px 14px;cursor:pointer;background:transparent;border:none;border-bottom:2px solid transparent;font-weight:700;color:#334155}
  .tab-button.active{border-bottom-color:var(--primary);color:#0f172a}
  .tab-content{display:none;padding:16px 0}
  .tab-content.active{display:block}

  /* Title modes (auto/manual) */
  .title-modes{display:flex;gap:12px;align-items:center;flex-wrap:wrap}
  .title-input{border:1px solid #DFE1E6;border-radius:12px;padding:10px;font-size:14px;min-width:280px;background:#fff}

  /* Jira ticket styles (giá»¯ logic, Ä‘á»•i skin) */
  .ticket-form{background:#f8f9fa;border-radius:12px;padding:15px;border:1px solid var(--line);margin-top:12px}
  .ticket-item{border:1px solid #DFE1E6;border-radius:12px;padding:15px;margin-bottom:12px;background:white}
  .ticket-item-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:10px}
  .ticket-item-header h5{margin:0;font-size:16px}
  .ticket-row{display:flex;gap:10px;margin-bottom:10px;align-items:center}
  .ticket-row label{min-width:120px;font-weight:600}
  .ticket-row select, .ticket-row input, .ticket-row textarea{flex:1;border:1px solid #DFE1E6;border-radius:10px;padding:10px}
  .ticket-row textarea{min-height:80px}
  .ticket-result{display:none;margin-top:12px;padding:12px;border-radius:12px;background:#E3F2FD}
  .ticket-result.success{background:#E6F4EA}
  .ticket-result.error{background:#FFEBE6}

  /* Email OCR - combined panel */
  .email-ocr{display:flex;flex-direction:column;gap:16px}
  .email-upload-section{display:flex;flex-direction:column;gap:10px}
  .email-upload{border:2px dashed #C1C7D0;border-radius:12px;padding:16px;text-align:center;background:#FAFBFC;position:relative;transition:.2s}
  .email-upload.dragover{border-color:var(--primary);background:#F0F7FF}
  .email-upload.has-image{border-style:solid;border-color:#22c55e;background:#f0fdf4}
  .email-paste-area{min-height:120px;display:flex;flex-direction:column;align-items:center;justify-content:center;cursor:pointer;transition:all .3s}
  .email-paste-area i{font-size:24px;color:#94a3b8;margin-bottom:8px}
  .email-paste-area p{margin:0;color:#64748b;font-size:14px}
  .email-paste-area.has-image{min-height:0}
  .email-preview{margin-top:10px;text-align:center;position:relative}
  .email-preview img{max-width:100%;max-height:200px;border-radius:8px;border:1px solid var(--line)}
  .email-preview-actions{position:absolute;top:8px;right:8px;display:flex;gap:6px}
  .email-preview-actions button{width:32px;height:32px;border-radius:50%;background:rgba(255,255,255,0.9);border:1px solid var(--line);display:flex;align-items:center;justify-content:center;cursor:pointer;font-size:12px}
  .email-preview-actions button:hover{background:#fff}
  .email-paste-hint{position:absolute;top:6px;right:6px;background:#f1f5f9;border:1px solid var(--line);border-radius:6px;padding:4px 8px;font-size:11px;color:#64748b}

  .email-actions{display:flex;gap:10px;flex-wrap:wrap}
  .email-actions button{flex:1;min-width:120px}

  .email-results{display:grid;grid-template-columns:1fr 1fr;gap:10px}
  .email-result-group{display:flex;flex-direction:column;gap:6px}
  .email-result-group label{font-weight:600;font-size:14px;color:#0f172a}
  .email-result-group textarea{min-height:100px}

  /* Confluence settings panel - redesigned */
  .confluence-settings{display:grid;grid-template-columns:repeat(2,1fr);gap:16px;margin-bottom:16px}
  .setting-group{display:flex;flex-direction:column;gap:6px}
  .setting-label{font-weight:600;color:#0f172a;font-size:14px}
  .setting-control{width:100%;border:1px solid #DFE1E6;border-radius:10px;padding:10px;font-family:inherit;font-size:14px;background:#fff}

  /* Confluence output panel */
  .confluence-output{display:flex;flex-direction:column;gap:16px}
  .output-actions{display:flex;justify-content:space-between;align-items:center}
  .output-actions-left{display:flex;gap:10px}
  .output-actions-right{display:flex;gap:10px}

  /* ====== NEW STYLES FOR DISCUSSION AND ACTION TABLES ====== */
  .section-title {
    font-weight: 700;
    margin: 16px 0 8px; /* Giáº£m margin tá»« 20px 0 10px xuá»‘ng 16px 0 8px */
    color: #0f172a;
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 16px;
  }

  .table-container {
    margin-bottom: 16px; /* Giáº£m margin tá»« 20px xuá»‘ng 16px */
    border-radius: 10px;
    overflow: hidden;
    border: 1px solid var(--line);
  }

  .data-table {
    width: 100%;
    border-collapse: collapse;
    background: var(--card);
  }

  .data-table th {
    background: #E6F4EA;
    color: #0b5a2b;
    text-align: left;
    padding: 12px;
    font-weight: 700;
    font-size: 14px;
  }

  .data-table td {
    padding: 10px 12px;
    border-bottom: 1px solid var(--line);
  }

  #step-panel-3 .data-table th,
  #step-panel-3 .data-table td {
    font-size: 15px;
    padding: 16px 18px;
  }

  #step-panel-3 .table-container {
    border-width: 2px;
    overflow-x: auto;
  }

  .data-table tr:last-child td {
    border-bottom: none;
  }

  .table-input {
    width: 100%;
    border: 1px solid #DFE1E6;
    border-radius: 6px;
    padding: 8px;
    font-size: 14px;
    transition: border-color 0.2s;
  }

  .table-input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(0, 150, 57, 0.1);
  }

  .btn-icon {
    background: transparent;
    border: none;
    color: #64748b;
    cursor: pointer;
    padding: 6px;
    border-radius: 6px;
    transition: all 0.2s;
  }

  .btn-icon:hover {
    background: #f1f5f9;
    color: #0f172a;
  }

  .delete-row:hover {
    color: #ef4444;
  }

  .table-actions {
    padding: 10px;
    background: var(--soft);
    display: flex;
    justify-content: flex-end;
  }

  .extract-btn-primary {
    background: linear-gradient(90deg, var(--primary), var(--primary-600));
    color: white;
    border: none;
    border-radius: 12px;
    padding: 12px 24px;
    font-weight: 700;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    transition: all 0.2s;
    box-shadow: 0 4px 12px rgba(0, 150, 57, 0.2);
    margin: 0 auto;
  }

  .extract-btn-primary:hover {
    background: var(--primary-600);
    box-shadow: 0 6px 16px rgba(0, 150, 57, 0.3);
    transform: translateY(-2px);
  }

  .extract-btn-primary:active {
    transform: translateY(0);
    box-shadow: 0 2px 8px rgba(0, 150, 57, 0.2);
  }

  /* Popup Editor Styles */
  .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    z-index: 1000;
    align-items: center;
    justify-content: center;
  }

  .popup-editor {
    background: var(--card);
    border-radius: 16px;
    padding: 24px;
    max-width: 600px;
    width: 90%;
    max-height: 80vh;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    border: 1px solid var(--line);
  }

  .popup-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
    padding-bottom: 12px;
    border-bottom: 1px solid var(--line);
  }

  .popup-title {
    font-size: 18px;
    font-weight: 700;
    color: var(--text);
    margin: 0;
  }

  .popup-close {
    background: none;
    border: none;
    font-size: 24px;
    color: var(--muted);
    cursor: pointer;
    padding: 4px;
    border-radius: 6px;
    transition: all 0.2s;
  }

  .popup-close:hover {
    background: var(--soft);
    color: var(--text);
  }

  .popup-textarea {
    width: 100%;
    min-height: 200px;
    border: 1px solid var(--line);
    border-radius: 12px;
    padding: 16px;
    font-size: 14px;
    line-height: 1.5;
    resize: vertical;
    font-family: inherit;
    background: var(--card);
    color: var(--text);
  }

  .popup-textarea:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(0, 150, 57, 0.1);
  }

  .popup-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    margin-top: 16px;
    padding-top: 16px;
    border-top: 1px solid var(--line);
  }

  .popup-btn {
    padding: 10px 20px;
    border-radius: 10px;
    font-weight: 600;
    cursor: pointer;
    border: none;
    transition: all 0.2s;
  }

  .popup-btn-primary {
    background: var(--primary);
    color: white;
  }

  .popup-btn-primary:hover {
    background: var(--primary-600);
  }

  .popup-btn-secondary {
    background: var(--soft);
    color: var(--text);
    border: 1px solid var(--line);
  }

  .popup-btn-secondary:hover {
    background: #eef2f7;
  }

  .popup-label {
    display: block;
    font-weight: 600;
    color: var(--text);
    margin-bottom: 6px;
    font-size: 14px;
  }

  .popup-input {
    width: 100%;
    border: 1px solid var(--line);
    border-radius: 10px;
    padding: 10px 12px;
    font-size: 14px;
    font-family: inherit;
    background: var(--card);
    color: var(--text);
  }

  .popup-input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(0, 150, 57, 0.1);
  }

  .create-jira-btn {
    color: #0052CC;
    font-size: 16px;
  }

  .create-jira-btn:hover {
    background: #E3F2FD;
    color: #0052CC;
  }

  .edit-icon {
    position: absolute;
    top: 4px;
    right: 4px;
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 6px;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 12px;
    opacity: 0;
    transition: all 0.2s;
    z-index: 10;
  }

  .table-input-container {
    position: relative;
  }

  .table-input-container:hover .edit-icon {
    opacity: 1;
  }

  .table-input-container .table-input {
    padding-right: 32px;
  }

  @media (max-width:1100px){
    .hero{grid-template-columns:1fr}
    .grid{grid-template-columns:repeat(12,1fr)}
    .confluence-settings{grid-template-columns:1fr}
    .email-results{grid-template-columns:1fr}
  }
</style>
</head>
<body>
  <!-- Header Ä‘á»“ng bá»™ -->
  <header class="top">
    <div class="row">
      <div class="brand">
        <div class="logo">
          <img src="https://z-cdn-media.chatglm.cn/files/1a1ab789-5429-451f-bb53-65e73a39e4bd_pasted_image_1758225809744.png"
               alt="BIDV" onerror="this.style.display='none'">
        </div>
        <h1 class="title">CÃ´ng cá»¥ AI cho PMO</h1>
      </div>
      <nav class="nav">
        <a href="/"><i class="fa-solid fa-home"></i>&nbsp;Trang chá»§</a>
        <a href="/meetingnote"><i class="fa-solid fa-microphone-lines"></i>&nbsp;Meeting Note</a>
        <a href="/risk"><i class="fa-solid fa-triangle-exclamation"></i>&nbsp;Risk Management</a>
        <a href="/chatbot"><i class="fa-solid fa-robot"></i>&nbsp;Chat Bot</a>
      </nav>
    </div>
  </header>

  <main class="container">
    <!-- HERO -->
    <section class="hero">
      <h2>AI Meeting Insights</h2>
      <p>Táº£i file ghi Ã¢m, trÃ­ch xuáº¥t minutes & tiáº¿n Ä‘á»™, vÃ  Ä‘á»“ng bá»™ tháº³ng Confluence/Jira.</p>
    </section>

    <div class="stepper" role="tablist" aria-label="Quy trÃ¬nh Meeting Insights">
      <button type="button" class="stepper-button active" id="step-1" data-step="1" aria-controls="step-panel-1" aria-current="step">
        <span class="step-index">1</span>
        <span class="step-text">
          <span class="step-title">BÆ°á»›c 1</span>
          <span class="step-subtitle">Thiáº¿t láº­p Confluence</span>
        </span>
      </button>
      <button type="button" class="stepper-button" id="step-2" data-step="2" aria-controls="step-panel-2" aria-current="false">
        <span class="step-index">2</span>
        <span class="step-text">
          <span class="step-title">BÆ°á»›c 2</span>
          <span class="step-subtitle">Upload &amp; OCR</span>
        </span>
      </button>
      <button type="button" class="stepper-button" id="step-3" data-step="3" aria-controls="step-panel-3" aria-current="false">
        <span class="step-index">3</span>
        <span class="step-text">
          <span class="step-title">BÆ°á»›c 3</span>
          <span class="step-subtitle">Chá»‰nh sá»­a & Táº¡o tickets</span>
        </span>
      </button>
    </div>

    <!-- Step 1: Thiáº¿t láº­p Confluence -->
    <section id="step-panel-1" class="grid step-content active" data-step-content="1" style="margin-top:12px" aria-labelledby="step-1">
      <div class="panel" style="grid-column: 1 / -1">
        <h3><i class="fa-solid fa-gears"></i> BÆ°á»›c 1: Thiáº¿t láº­p thÃ´ng sá»‘ Confluence</h3>
        <p class="muted" style="margin:8px 0 16px;">Chá»n template, space, parent page vÃ  tiÃªu Ä‘á» trÆ°á»›c khi báº¥m "Upload & cháº¡y pipeline".</p>
        <div class="confluence-settings">
          <div class="setting-group">
            <label class="setting-label">Space:</label>
            <select id="spaceSelect" class="setting-control">
              <option value="AIG">AIG - Dá»± Ã¡n AI</option>
              <option value="OTJ">OTJ - ÄÃ o táº¡o Jira</option>
              <option value="DEV">DEV - Dá»± Ã¡n DEVSECOPS</option>
            </select>
          </div>
          <div class="setting-group">
            <label class="setting-label">Parent Page ID:</label>
            <input id="parentIdInput" class="setting-control" type="text" placeholder="ID cá»§a page cha (tÃ¹y chá»n)">
          </div>
          <div class="setting-group">
            <label class="setting-label">Template:</label>
            <select id="templateSelect" class="setting-control">
              <option value="mom">[MOM] BiÃªn báº£n há»p</option>
              <option value="progress">[Report] BÃ¡o cÃ¡o tiáº¿n Ä‘á»™ dá»± Ã¡n trá»ng Ä‘iá»ƒm</option>
              <option value="risk">[Report] Risk Management</option>
            </select>
          </div>
          <div class="setting-group">
            <label class="setting-label">TiÃªu Ä‘á»:</label>
            <div class="title-modes">
              <label class="muted"><input type="radio" name="titleMode" id="modeAuto" checked> Tá»± Ä‘á»™ng</label>
              <label class="muted"><input type="radio" name="titleMode" id="modeManual"> Tá»± Ä‘áº·t</label>
            </div>
            <input id="pageTitle" class="title-input" type="text" placeholder="TiÃªu Ä‘á» Confluence page" style="display:none">
          </div>
        </div>
        <div class="muted" style="margin-top:12px;font-size:13px;">Template quyáº¿t Ä‘á»‹nh prompt vÃ  cáº¥u trÃºc ná»™i dung mÃ  pipeline sáº½ sinh ra.</div>
        <div style="text-align:center;margin-top:24px;">
          <button class="btn primary" onclick="setActiveStep(2)">
            <i class="fa-solid fa-arrow-right"></i> BÆ°á»›c tiáº¿p theo
          </button>
        </div>
      </div>
    </section>

    <!-- Step 2: Upload audio & Email OCR -->
    <section id="step-panel-2" class="grid step-content" data-step-content="2" style="margin-top:12px" aria-labelledby="step-2">
      <!-- Upload card -->
      <div class="panel" style="grid-column: span 6">
        <h3><i class="fa-solid fa-file-audio"></i> BÆ°á»›c 2: Táº£i & xá»­ lÃ½ ghi Ã¢m</h3>
        <div id="drop" class="drop">
          <input id="file" type="file" accept="audio/*"/>
          <p><strong>KÃ©o tháº£</strong> tá»‡p vÃ o Ä‘Ã¢y hoáº·c chá»n MP3/WAV.</p>
          <p class="muted" id="uploadFileLabel">ChÆ°a chá»n tá»‡p</p>
          <div class="progress"><div id="uploadProgressBar" class="bar"></div></div>
          <div class="row" style="margin-top:12px">
            <button id="btnUpload" class="btn primary"><i class="fa-solid fa-bolt"></i> Upload & cháº¡y pipeline</button>
            <button id="btnCancel" class="btn line"><i class="fa-solid fa-xmark"></i> Há»§y</button>
            <span id="uploadState" class="muted">Tráº¡ng thÃ¡i</span>
            <span id="uploadSpinner" class="spinner" aria-hidden="true"></span>
          </div>
        </div>
      </div>

      <!-- Email OCR - Combined panel -->
      <div class="panel" style="grid-column: span 6">
        <h3><i class="fa-solid fa-envelope"></i> ChÃ¨n áº£nh email (OCR) - TÃ¹y chá»n</h3>
        <p class="muted" style="margin:8px 0 16px;">
          <b>BÆ°á»›c 1:</b> Upload áº£nh vÃ  báº¥m "TrÃ­ch xuáº¥t email" â†’ 
          <b>BÆ°á»›c 2:</b> Báº¥m "Láº¥y Jira IDs" Ä‘á»ƒ láº¥y Account ID
        </p>
        <div class="email-ocr">
          <!-- Upload section -->
          <div class="email-upload-section">
            <div id="emailDrop" class="email-upload">
              <div class="email-paste-hint"><i class="fa-solid fa-paste"></i> Ctrl+V Ä‘á»ƒ dÃ¡n</div>
              <div id="emailPasteArea" class="email-paste-area" style="cursor:pointer" tabindex="0" role="button" aria-label="Chá»n áº£nh tá»« mÃ¡y">
                <i class="fa-solid fa-image"></i>
                <p>KÃ©o tháº£ hoáº·c dÃ¡n áº£nh tá»« clipboard</p>
              </div>
              <input id="emailImage" type="file" accept="image/*" style="position:absolute;left:-9999px;width:0;height:0;opacity:0"/>
              <div class="email-preview" id="emailPreview" style="display:none">
                <img id="emailImgPreview" src="" alt="Email preview">
                <div class="email-preview-actions">
                  <button id="btnRemoveImage" title="XÃ³a"><i class="fa-solid fa-trash"></i></button>
                  <button id="btnProcessImage" style="display:none" title="Upload" class="primary"><i class="fa-solid fa-upload"></i></button>
                </div>
              </div>
              <div id="emailStatus" class="email-status"></div>
            </div>
          </div>

          <!-- Action buttons with step indicators -->
          <div class="email-actions">
            <button id="btnExtractEmails" class="btn primary">
              <i class="fa-solid fa-envelope-open-text"></i> <b>BÆ°á»›c 1:</b> TrÃ­ch xuáº¥t email
            </button>
            <button id="btnGetJiraIds" class="btn line">
              <i class="fa-solid fa-id-badge"></i> <b>BÆ°á»›c 2:</b> Láº¥y Jira IDs
            </button>
          </div>

          <!-- Results section -->
          <div class="email-results">
            <div class="email-result-group">
              <label>Danh sÃ¡ch email:</label>
              <textarea id="ocrEmails" class="field-textarea" placeholder="Danh sÃ¡ch email Ä‘Æ°á»£c trÃ­ch xuáº¥t, cÃ¡ch nhau báº±ng dáº¥u ;"></textarea>
            </div>
            <div class="email-result-group">
              <label>Jira Account IDs:</label>
              <textarea id="ocrJiraIds" class="field-textarea" placeholder="Jira Account IDs sáº½ hiá»ƒn thá»‹ á»Ÿ Ä‘Ã¢y" readonly></textarea>
            </div>
          </div>
        </div>
      </div>
      <div style="grid-column: 1 / -1; text-align:center;margin-top:24px;">
        <button class="btn primary" id="btnNextStep2" onclick="setActiveStep(3)">
          <i class="fa-solid fa-arrow-right"></i> BÆ°á»›c tiáº¿p theo
        </button>
      </div>
    </section>

    <!-- Step 3: Káº¿t quáº£ & Ä‘iá»u chá»‰nh -->
    <section id="step-panel-3" class="grid step-content" data-step-content="3" style="margin-top:12px" aria-labelledby="step-3">
      <!-- Thanh tiáº¿n trÃ¬nh -->
      <div class="panel" style="grid-column: span 12">
        <h3><i class="fa-solid fa-chart-line"></i> Tiáº¿n trÃ¬nh xá»­ lÃ½</h3>
        <div style="margin-top:16px;">
          <div class="progress" style="height:12px;margin-bottom:8px;">
            <div id="pipelineProgressBar" class="bar"></div>
          </div>
          <div style="display:flex;justify-content:space-between;align-items:center;">
            <span id="pipelineState" class="muted" style="font-size:14px;">ChÆ°a báº¯t Ä‘áº§u</span>
            <span id="pipelineSpinner" class="spinner" aria-hidden="true"></span>
          </div>
        </div>
        <div id="pageLinkContainer" class="panel" style="display:none; padding:12px;margin-top:12px;">
          <div class="row" style="justify-content:space-between;width:100%">
            <span><i class="fa-solid fa-circle-check" style="color:var(--primary)"></i> Page Confluence Ä‘Ã£ Ä‘Æ°á»£c táº¡o thÃ nh cÃ´ng!</span>
            <a id="pageLink" href="#" target="_blank" class="btn ghost">
              <i class="fas fa-external-link-alt"></i> Má»Ÿ page
            </a>
          </div>
        </div>
        <textarea id="pipelineOut" placeholder="Log..." readonly style="display:none;margin-top:12px;"></textarea>
        <pre id="pipelineLog" class="status" style="display:none"></pre>
      </div>

      <!-- Tráº¡ng thÃ¡i (Data mapping) - Báº¢NG TRUNG TÃ‚M -->
      <div class="panel" style="grid-column: 1 / -1">
        <h3><i class="fa-solid fa-file-lines"></i> Chá»‰nh sá»­a ná»™i dung & Táº¡o Jira tickets</h3>

        <!-- Báº£ng Discussion/Action (máº·c Ä‘á»‹nh) -->
        <div id="defaultTables">
          <!-- Discussion Topics Table -->
          <div class="section-title">
            <i class="fa-solid fa-comments"></i> Discussion topics (Chá»§ Ä‘á» tháº£o luáº­n)
          </div>
          <div class="table-container" style="margin-top:12px">
            <table class="data-table" id="discussionTable">
              <thead>
                <tr>
                  <th style="width: 50px">STT</th>
                  <th style="width: 45%">Ná»™i dung</th>
                  <th style="width: 150px">PIC</th>
                  <th style="width: 30%">Ghi chÃº</th>
                  <th style="width: 120px">HÃ nh Ä‘á»™ng</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>1</td>
                  <td>
                    <div class="table-input-container">
                      <input type="text" class="table-input" placeholder="Ná»™i dung tháº£o luáº­n">
                      <button class="edit-icon" title="Chá»‰nh sá»­a ná»™i dung"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td><input type="text" class="table-input" placeholder="NgÆ°á»i phá»¥ trÃ¡ch"></td>
                  <td>
                    <div class="table-input-container">
                      <input type="text" class="table-input" placeholder="Ghi chÃº">
                      <button class="edit-icon" title="Chá»‰nh sá»­a ghi chÃº"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td>
                    <button class="btn-icon create-jira-btn" title="Táº¡o Jira ticket" data-table="discussion">
                      <i class="fa-brands fa-jira"></i>
                    </button>
                    <button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button>
                  </td>
                </tr>
              </tbody>
            </table>
            <div class="table-actions">
              <button id="addDiscussionRow" class="btn small line">
                <i class="fa-solid fa-plus"></i> ThÃªm dÃ²ng
              </button>
            </div>
          </div>

          <!-- Action Items Table -->
          <div class="section-title">
            <i class="fa-solid fa-list-check"></i> Action items (HÃ nh Ä‘á»™ng cáº§n thá»±c hiá»‡n)
          </div>
          <div class="table-container" style="margin-top:12px">
            <table class="data-table" id="actionTable">
              <thead>
                <tr>
                  <th style="width: 50px">STT</th>
                  <th style="width: 40%">Ná»™i dung</th>
                  <th style="width: 120px">Deadline</th>
                  <th style="width: 150px">PIC</th>
                  <th style="width: 25%">Ghi chÃº</th>
                  <th style="width: 120px">HÃ nh Ä‘á»™ng</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>1</td>
                  <td>
                    <div class="table-input-container">
                      <input type="text" class="table-input" placeholder="HÃ nh Ä‘á»™ng cáº§n thá»±c hiá»‡n">
                      <button class="edit-icon" title="Chá»‰nh sá»­a ná»™i dung"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td><input type="date" class="table-input"></td>
                  <td><input type="text" class="table-input" placeholder="NgÆ°á»i phá»¥ trÃ¡ch"></td>
                  <td>
                    <div class="table-input-container">
                      <input type="text" class="table-input" placeholder="Ghi chÃº">
                      <button class="edit-icon" title="Chá»‰nh sá»­a ghi chÃº"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td>
                    <button class="btn-icon create-jira-btn" title="Táº¡o Jira ticket" data-table="action">
                      <i class="fa-brands fa-jira"></i>
                    </button>
                    <button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button>
                  </td>
                </tr>
              </tbody>
            </table>
            <div class="table-actions">
              <button id="addActionRow" class="btn small line">
                <i class="fa-solid fa-plus"></i> ThÃªm dÃ²ng
              </button>
            </div>
          </div>
        </div>
        
        <!-- Báº£ng Risk Management (áº©n máº·c Ä‘á»‹nh) -->
        <div id="riskManagementTable" style="display:none;">
          <div class="section-title">
            <i class="fa-solid fa-triangle-exclamation"></i> Risk Management
          </div>
          <div class="table-container" style="margin-top:12px">
            <table class="data-table">
              <thead>
                <tr>
                  <th style="width: 50px">STT</th>
                  <th>MÃ´ táº£</th>
                  <th style="width: 150px">Má»©c Ä‘á»™ rá»§i ro</th>
                  <th style="width: 150px">Chiáº¿n lÆ°á»£c á»©ng phÃ³</th>
                  <th>HÃ nh Ä‘á»™ng á»©ng phÃ³ phá»• cáº­p tháº¿</th>
                  <th style="width: 120px">Thá»i háº¡n</th>
                  <th style="width: 50px">HÃ nh Ä‘á»™ng</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>1</td>
                  <td>
                    <div class="table-input-container">
                      <input type="text" class="table-input" placeholder="MÃ´ táº£ rá»§i ro">
                      <button class="edit-icon" title="Chá»‰nh sá»­a mÃ´ táº£"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td>
                    <select class="table-input risk-level-select">
                      <option value="">Chá»n má»©c Ä‘á»™</option>
                      <option value="Cháº¥p nháº­n Ä‘Æ°á»£c">Cháº¥p nháº­n Ä‘Æ°á»£c</option>
                      <option value="Cáº§n xem xÃ©t">Cáº§n xem xÃ©t</option>
                      <option value="Cáº§n quáº£n lÃ½">Cáº§n quáº£n lÃ½</option>
                      <option value="KhÃ´ng cháº¥p nháº­n">KhÃ´ng cháº¥p nháº­n</option>
                    </select>
                  </td>
                  <td>
                    <select class="table-input strategy-select">
                      <option value="">Chá»n chiáº¿n lÆ°á»£c</option>
                      <option value="TrÃ¡nh">TrÃ¡nh</option>
                      <option value="Giáº£m thiá»ƒu">Giáº£m thiá»ƒu</option>
                      <option value="Chuyá»ƒn giao">Chuyá»ƒn giao</option>
                      <option value="Cháº¥p nháº­n">Cháº¥p nháº­n</option>
                    </select>
                  </td>
                  <td>
                    <div class="table-input-container">
                      <input type="text" class="table-input" placeholder="HÃ nh Ä‘á»™ng á»©ng phÃ³">
                      <button class="edit-icon" title="Chá»‰nh sá»­a hÃ nh Ä‘á»™ng"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td><input type="date" class="table-input"></td>
                  <td><button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button></td>
                </tr>
              </tbody>
            </table>
            <div class="table-actions">
              <button id="addRiskRow" class="btn small line">
                <i class="fa-solid fa-plus"></i> ThÃªm dÃ²ng
              </button>
            </div>
          </div>
        </div>

        <!-- Báº£ng Progress Report (áº©n máº·c Ä‘á»‹nh) -->
        <div id="progressReportTable" style="display:none;">
          <div class="section-title">
            <i class="fa-solid fa-chart-line"></i> BÃ¡o cÃ¡o tiáº¿n Ä‘á»™ dá»± Ã¡n trá»ng Ä‘iá»ƒm
          </div>
          <div class="table-container" style="margin-top:12px">
            <table class="data-table">
              <thead>
                <tr>
                  <th style="width: 50px">STT</th>
                  <th>Ná»™i dung</th>
                  <th style="width: 150px">Master plan/Time line cá»§a dá»± Ã¡n</th>
                  <th style="width: 150px">BÃ¡o cÃ¡o tiáº¿n Ä‘á»™ (Ghi ngáº¯n gá»n)</th>
                  <th style="width: 150px">ÄÃ¡nh giÃ¡ tiáº¿n Ä‘á»™ (ÄÃºng/cháº­m so vá»›i káº¿ hoáº¡ch)</th>
                  <th style="width: 150px">Káº¿ hoáº¡ch tiáº¿p theo (Ghi ngáº¯n gá»n)</th>
                  <th style="width: 150px">KhÃ³ khÄƒn vÆ°á»›ng máº¯c</th>
                  <th style="width: 150px">Äá» xuáº¥t/Kiáº¿n nghá»‹</th>
                  <th>Ghi chÃº</th>
                  <th style="width: 50px">HÃ nh Ä‘á»™ng</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>1</td>
                  <td>
                    <div class="table-input-container">
                      <input type="text" class="table-input" placeholder="Ná»™i dung dá»± Ã¡n">
                      <button class="edit-icon" title="Chá»‰nh sá»­a ná»™i dung"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td>
                    <div class="table-input-container">
                      <input type="text" class="table-input" placeholder="Master plan/Time line">
                      <button class="edit-icon" title="Chá»‰nh sá»­a master plan"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td>
                    <div class="table-input-container">
                      <input type="text" class="table-input" placeholder="BÃ¡o cÃ¡o tiáº¿n Ä‘á»™">
                      <button class="edit-icon" title="Chá»‰nh sá»­a bÃ¡o cÃ¡o"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td>
                    <select class="table-input progress-evaluation-select">
                      <option value="">Chá»n Ä‘Ã¡nh giÃ¡</option>
                      <option value="ÄÃºng tiáº¿n Ä‘á»™">ÄÃºng tiáº¿n Ä‘á»™</option>
                      <option value="Cháº­m tiáº¿n Ä‘á»™">Cháº­m tiáº¿n Ä‘á»™</option>
                      <option value="VÆ°á»£t tiáº¿n Ä‘á»™">VÆ°á»£t tiáº¿n Ä‘á»™</option>
                    </select>
                  </td>
                  <td>
                    <div class="table-input-container">
                      <input type="text" class="table-input" placeholder="Káº¿ hoáº¡ch tiáº¿p theo">
                      <button class="edit-icon" title="Chá»‰nh sá»­a káº¿ hoáº¡ch"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td>
                    <div class="table-input-container">
                      <input type="text" class="table-input" placeholder="KhÃ³ khÄƒn vÆ°á»›ng máº¯c">
                      <button class="edit-icon" title="Chá»‰nh sá»­a khÃ³ khÄƒn"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td>
                    <div class="table-input-container">
                      <input type="text" class="table-input" placeholder="Äá» xuáº¥t/Kiáº¿n nghá»‹">
                      <button class="edit-icon" title="Chá»‰nh sá»­a Ä‘á» xuáº¥t"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td>
                    <div class="table-input-container">
                      <input type="text" class="table-input" placeholder="Ghi chÃº">
                      <button class="edit-icon" title="Chá»‰nh sá»­a ghi chÃº"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td><button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button></td>
                </tr>
              </tbody>
            </table>
            <div class="table-actions">
              <button id="addProgressRow" class="btn small line">
                <i class="fa-solid fa-plus"></i> ThÃªm dÃ²ng
              </button>
            </div>
          </div>
        </div>

        <!-- Extract button at the bottom -->
        <div style="margin-top: 16px; display:flex; gap:12px; justify-content:center; flex-wrap:wrap;">
          <button id="extractDataBtn" class="btn primary">
            <i class="fa-solid fa-table"></i> TrÃ­ch xuáº¥t dá»¯ liá»‡u
          </button>
          <button id="btnCreate" class="btn primary" disabled>
            <i class="fa-solid fa-file-circle-plus"></i> Táº¡o page Confluence
          </button>
        </div>
      </div>
    </section>
        
  </main>

<script>
document.addEventListener("DOMContentLoaded", async function(){
  var $=id=>document.getElementById(id);
  var drop=$('drop'), input=$('file'), uploadProgressBar=$('uploadProgressBar'), pipelineProgressBar=$('pipelineProgressBar'), pipelineOut=$('pipelineOut'), pipelineLog=$('pipelineLog'), pipelineState=$('pipelineState');
  var btnUpload=$('btnUpload'), btnCancel=$('btnCancel'), btnCopy=$('btnCopy'), uploadFileLabel=$('uploadFileLabel'), btnCreate=$('btnCreate');
  var uploadStateEl=$('uploadState'), uploadSpinner=$('uploadSpinner'), pipelineSpinner=$('pipelineSpinner');
  var modeAuto=$('modeAuto'), modeManual=$('modeManual'), pageTitleEl=$('pageTitle');

  // New elements for space, parent ID, and template
  var spaceSelect=$('spaceSelect');
  var parentIdInput=$('parentIdInput');
  var templateSelect=$('templateSelect');
  
  // Global variable to store selected space key
  var selectedSpaceKey = spaceSelect ? (spaceSelect.value || 'AIG') : 'AIG';
  var fallbackSpaceOptions = spaceSelect ? Array.from(spaceSelect.options).map(function(opt){
    return { value: opt.value, text: opt.textContent };
  }) : [];

  async function populateSpaceSelectFromProjects() {
    if (!spaceSelect) { return; }
    try {
      const response = await fetch('/jira-projects');
      const data = await response.json();
      const rawProjects = data && data.projects ? data.projects : (Array.isArray(data) ? data : []);
      var projectList = Array.isArray(rawProjects) ? rawProjects : [];
      if (typeof normalizeProjects === 'function') {
        try {
          var normalizedList = normalizeProjects(rawProjects);
          if (Array.isArray(normalizedList) && normalizedList.length) {
            projectList = normalizedList;
          }
        } catch (normalizeError) {
          console.warn('normalizeProjects failed for Meeting space selector:', normalizeError);
        }
      }
      if (Array.isArray(projectList) && projectList.length) {
        window.__MEETING_PROJECTS = projectList.slice();
        if (!Array.isArray(window.__RM_PROJECTS) || !window.__RM_PROJECTS.length) {
          window.__RM_PROJECTS = projectList.slice();
        }
        spaceSelect.innerHTML = '';
        projectList.forEach(function(project){
          if (!project || !project.key) { return; }
          var optionEl = document.createElement('option');
          optionEl.value = project.key;
          optionEl.textContent = project.key + ' - ' + (project.name || project.key);
          spaceSelect.appendChild(optionEl);
        });
        var allOption = document.createElement('option');
        allOption.value = 'ALL';
        allOption.textContent = 'Tất cả dự án';
        spaceSelect.appendChild(allOption);
        var defaultKey = selectedSpaceKey && (selectedSpaceKey === 'ALL' || projectList.some(function(p){ return p.key === selectedSpaceKey; }))
          ? selectedSpaceKey
          : (projectList[0] && projectList[0].key);
        if (defaultKey) {
          spaceSelect.value = defaultKey;
          selectedSpaceKey = defaultKey;
        } else {
          selectedSpaceKey = spaceSelect.value || 'AIG';
        }
        if (window.addDebugLog) {
          window.addDebugLog('Loaded ' + projectList.length + ' projects into spaceSelect');
        } else {
          console.log('Meeting Insights projects loaded:', projectList.length);
        }
        return;
      }

    } catch (error) {
      console.error('Failed to load projects for space select:', error);
      if (window.addDebugLog) {
        var message = error && error.message ? error.message : String(error);
        window.addDebugLog('Failed to load project list for spaceSelect: ' + message);
      }
    }

    spaceSelect.innerHTML = '';
    fallbackSpaceOptions.forEach(function(opt){
      var optionEl = document.createElement('option');
      optionEl.value = opt.value;
      optionEl.textContent = opt.text;
      spaceSelect.appendChild(optionEl);
    });
    if (fallbackSpaceOptions.length) {
      var fallbackMatch = fallbackSpaceOptions[0];
      for (var i = 0; i < fallbackSpaceOptions.length; i++) {
        if (fallbackSpaceOptions[i].value === selectedSpaceKey) {
          fallbackMatch = fallbackSpaceOptions[i];
          break;
        }
      }
      spaceSelect.value = fallbackMatch.value;
      selectedSpaceKey = spaceSelect.value || selectedSpaceKey || 'AIG';
    }
    if (window.addDebugLog) {
      window.addDebugLog('Using fallback space list');
    }
  }

  // Event listener to update selectedSpaceKey when space changes
  if (spaceSelect) {
    spaceSelect.addEventListener('change', function() {
      selectedSpaceKey = this.value || 'AIG';
      console.log('Space key updated to:', selectedSpaceKey);
    });
    await populateSpaceSelectFromProjects();
  }\r\n\r\n  // Email upload elements
  var emailDrop=$('emailDrop'), emailInput=$('emailImage'), emailSel=$('emailSel');
  var emailPasteArea=$('emailPasteArea'), emailPreview=$('emailPreview');

  try{ emailPasteArea.onclick = function(){ emailInput.click(); }; }catch(_e){}
  var emailImgPreview=$('emailImgPreview'), emailStatus=$('emailStatus');
  var btnRemoveImage=$('btnRemoveImage'), btnProcessImage=$('btnProcessImage');

  // OCR results elements
  var btnExtractEmails=$('btnExtractEmails'), btnGetJiraIds=$('btnGetJiraIds');
  var ocrEmails=$('ocrEmails'), ocrJiraIds=$('ocrJiraIds');

  // Table elements
  var discussionTable = $('discussionTable');
  var actionTable = $('actionTable');
  var addDiscussionRow = $('addDiscussionRow');
  var addActionRow = $('addActionRow');
  var extractDataBtn = $('extractDataBtn');
  
  // Risk Management elements
  var riskManagementTable = $('riskManagementTable');
  var addRiskRow = $('addRiskRow');
  
  // Progress Report elements
  var progressReportTable = $('progressReportTable');
  var addProgressRow = $('addProgressRow');

  var currentFile=null, uploadXhr=null, transcribeAbort=null, lastLLMJson=null, lastTranscriptUrl=null, lastGrokResponse=null, lastPreviewHtml=null, lastPageUrl=null;
  var tickets = [];
  var emailImageKey = null; // LÆ°u object key trÃªn R2
  var emailImageBlob = null; // Blob gá»‘c cá»§a áº£nh (tá»« paste/drag/file)
  var isUploadingEmailImage = false;
  var isEmailOcrBusy = false; // guard: trÃ¡nh duplicate khi upload/OCR
  var isGettingJiraIds = false; // guard: trÃ¡nh láº·p khi láº¥y account IDs
  
  // ThÃªm biáº¿n cho template
  var currentTemplate = 'mom';

  // Stepper navigation
  const stepButtons = Array.from(document.querySelectorAll('.stepper-button'));
  const stepContents = Array.from(document.querySelectorAll('[data-step-content]'));
  let currentStep = 1;

  function setActiveStep(step) {
    if (stepButtons.length === 0) {
      currentStep = step;
      return;
    }
    if (!Number.isInteger(step) || step < 1 || step > stepButtons.length) {
      return;
    }
    currentStep = step;
    stepButtons.forEach(button => {
      const buttonStep = parseInt(button.dataset.step, 10);
      const isActive = buttonStep === step;
      button.classList.toggle('active', isActive);
      button.classList.toggle('completed', buttonStep < step);
      button.setAttribute('aria-current', isActive ? 'step' : 'false');
    });
    stepContents.forEach(section => {
      const sectionStep = parseInt(section.dataset.stepContent, 10);
      section.classList.toggle('active', sectionStep === step);
    });
  }
  window.setActiveStep = setActiveStep;

  if (stepButtons.length > 0) {
    stepButtons.forEach(button => {
      button.addEventListener('click', () => {
        const targetStep = parseInt(button.dataset.step, 10);
        if (!Number.isNaN(targetStep)) {
          setActiveStep(targetStep);
        }
      });
    });
    setActiveStep(1);
  }

  // Header tabs
  var tabButtons = document.querySelectorAll('.tab-button');
  var tabContents = document.querySelectorAll('.tab-content');
  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      var tabId = button.getAttribute('data-tab');
      tabButtons.forEach(btn => btn.classList.remove('active'));
      tabContents.forEach(content => content.classList.remove('active'));
      button.classList.add('active');
      document.getElementById(tabId + '-tab').classList.add('active');
    });
  });

  // Toggle hiá»ƒn thá»‹ Ã´ tiÃªu Ä‘á»
  function syncTitleInput(){
    if(modeManual.checked){
      pageTitleEl.style.display='';
      if(!pageTitleEl.value) pageTitleEl.value='[MOM] BiÃªn báº£n há»p';
    }else{
      pageTitleEl.style.display='none';
    }
  }
  modeAuto.addEventListener('change', syncTitleInput);
  modeManual.addEventListener('change', syncTitleInput);
  syncTitleInput();

  function setState(s){
    if(pipelineState) pipelineState.textContent = s;
    if(uploadStateEl) uploadStateEl.textContent = s;
  }
  function setProgress(p){
    var numeric = Number(p);
    if(!Number.isFinite(numeric)) numeric = 0;
    var clamped = Math.max(0, Math.min(1, numeric));
    var widthText = clamped * 100;
    if(uploadProgressBar) uploadProgressBar.style.width = widthText.toFixed(1) + '%';
    if(pipelineProgressBar) pipelineProgressBar.style.width = widthText.toFixed(1) + '%';
  }
  function logJson(o){
    if(pipelineLog) pipelineLog.textContent = JSON.stringify(o, null, 2);
  }
  function setSpinnerVisible(show){
    var display = show ? 'inline-block' : 'none';
    if(pipelineSpinner) pipelineSpinner.style.display = display;
    if(uploadSpinner) uploadSpinner.style.display = display;
  }

  // Cáº­p nháº­t hÃ m updateDataDisplay Ä‘á»ƒ xá»­ lÃ½ Risk Management vÃ  Progress
  function updateDataDisplay(data, template) {
    console.log('updateDataDisplay called with template:', template, 'data:', data);
    
    // Hiá»ƒn thá»‹/áº©n báº£ng theo template
    if (template === 'risk') {
      // Hiá»ƒn thá»‹ báº£ng Risk Management
      const defaultTables = document.getElementById('defaultTables');
      const riskTable = document.getElementById('riskManagementTable');
      const progressTable = document.getElementById('progressReportTable');
      
      if (defaultTables) defaultTables.style.display = 'none';
      if (progressTable) progressTable.style.display = 'none';
      if (riskTable) {
        riskTable.style.display = 'block';
        console.log('Risk Management table displayed');
      }
      
      if (data && data.risk_items) {
        updateRiskTable(data.risk_items);
      } else {
        // Hiá»ƒn thá»‹ báº£ng trá»‘ng náº¿u khÃ´ng cÃ³ dá»¯ liá»‡u
        updateRiskTable([]);
      }
    } else if (template === 'progress') {
      // Hiá»ƒn thá»‹ báº£ng Progress Report
      const defaultTables = document.getElementById('defaultTables');
      const riskTable = document.getElementById('riskManagementTable');
      const progressTable = document.getElementById('progressReportTable');
      
      if (defaultTables) defaultTables.style.display = 'none';
      if (riskTable) riskTable.style.display = 'none';
      if (progressTable) {
        progressTable.style.display = 'block';
        console.log('Progress Report table displayed');
      }
      
      if (data && data.progress_items) {
        updateProgressTable(data.progress_items);
      } else {
        // Hiá»ƒn thá»‹ báº£ng trá»‘ng náº¿u khÃ´ng cÃ³ dá»¯ liá»‡u
        updateProgressTable([]);
      }
    } else {
      // Hiá»ƒn thá»‹ báº£ng Discussion vÃ  Action cho template 'mom'
      const defaultTables = document.getElementById('defaultTables');
      const riskTable = document.getElementById('riskManagementTable');
      const progressTable = document.getElementById('progressReportTable');
      
      if (defaultTables) defaultTables.style.display = 'block';
      if (riskTable) riskTable.style.display = 'none';
      if (progressTable) progressTable.style.display = 'none';
      
      if (data) {
        if (data.discussion_topics && Array.isArray(data.discussion_topics)) {
          updateDiscussionTable(data.discussion_topics);
        } else {
          updateDiscussionTable([]);
        }
        
        if (data.action_items && Array.isArray(data.action_items)) {
          updateActionTable(data.action_items);
        } else {
          updateActionTable([]);
        }
      } else {
        // Hiá»ƒn thá»‹ báº£ng trá»‘ng náº¿u khÃ´ng cÃ³ dá»¯ liá»‡u
        updateDiscussionTable([]);
        updateActionTable([]);
      }
    }
    
    updateJiraOptions(data);
    if (data && currentStep < 3 && stepButtons.length > 0) {
      setActiveStep(3);
    }
  }
  
  // HÃ m cáº­p nháº­t báº£ng Risk Management
  function updateRiskTable(riskItems) {
    const tbody = document.querySelector('#riskManagementTable tbody');
    tbody.innerHTML = '';

    riskItems.forEach((item, index) => {
      const row = tbody.insertRow();
      row.innerHTML = \`
        <td>\${index + 1}</td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" value="\${escapeHtml(item.description || '')}" placeholder="MÃ´ táº£ rá»§i ro">
            <button class="edit-icon" title="Chá»‰nh sá»­a mÃ´ táº£"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <select class="table-input risk-level-select">
            <option value="">Chá»n má»©c Ä‘á»™</option>
            <option value="Cháº¥p nháº­n Ä‘Æ°á»£c" \${item.risk_level === 'Cháº¥p nháº­n Ä‘Æ°á»£c' ? 'selected' : ''}>Cháº¥p nháº­n Ä‘Æ°á»£c</option>
            <option value="Cáº§n xem xÃ©t" \${item.risk_level === 'Cáº§n xem xÃ©t' ? 'selected' : ''}>Cáº§n xem xÃ©t</option>
            <option value="Cáº§n quáº£n lÃ½" \${item.risk_level === 'Cáº§n quáº£n lÃ½' ? 'selected' : ''}>Cáº§n quáº£n lÃ½</option>
            <option value="KhÃ´ng cháº¥p nháº­n" \${item.risk_level === 'KhÃ´ng cháº¥p nháº­n' ? 'selected' : ''}>KhÃ´ng cháº¥p nháº­n</option>
          </select>
        </td>
        <td>
          <select class="table-input strategy-select">
            <option value="">Chá»n chiáº¿n lÆ°á»£c</option>
            <option value="TrÃ¡nh" \${item.strategy === 'TrÃ¡nh' ? 'selected' : ''}>TrÃ¡nh</option>
            <option value="Giáº£m thiá»ƒu" \${item.strategy === 'Giáº£m thiá»ƒu' ? 'selected' : ''}>Giáº£m thiá»ƒu</option>
            <option value="Chuyá»ƒn giao" \${item.strategy === 'Chuyá»ƒn giao' ? 'selected' : ''}>Chuyá»ƒn giao</option>
            <option value="Cháº¥p nháº­n" \${item.strategy === 'Cháº¥p nháº­n' ? 'selected' : ''}>Cháº¥p nháº­n</option>
          </select>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" value="\${escapeHtml(item.action || '')}" placeholder="HÃ nh Ä‘á»™ng á»©ng phÃ³">
            <button class="edit-icon" title="Chá»‰nh sá»­a hÃ nh Ä‘á»™ng"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><input type="date" class="table-input" value="\${escapeHtml(item.timeline || '')}"></td>
        <td><button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button></td>
      \`;

      // ThÃªm sá»± kiá»‡n xÃ³a
      row.querySelector('.delete-row').addEventListener('click', function() {
        tbody.removeChild(row);
        updateRowNumbers('riskManagementTable');
      });
    });

    // ThÃªm dÃ²ng trá»‘ng náº¿u khÃ´ng cÃ³ dá»¯ liá»‡u
    if (riskItems.length === 0) {
      const row = tbody.insertRow();
      row.innerHTML = \`
        <td>1</td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="MÃ´ táº£ rá»§i ro">
            <button class="edit-icon" title="Chá»‰nh sá»­a mÃ´ táº£"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <select class="table-input risk-level-select">
            <option value="">Chá»n má»©c Ä‘á»™</option>
            <option value="Cháº¥p nháº­n Ä‘Æ°á»£c">Cháº¥p nháº­n Ä‘Æ°á»£c</option>
            <option value="Cáº§n xem xÃ©t">Cáº§n xem xÃ©t</option>
            <option value="Cáº§n quáº£n lÃ½">Cáº§n quáº£n lÃ½</option>
            <option value="KhÃ´ng cháº¥p nháº­n">KhÃ´ng cháº¥p nháº­n</option>
          </select>
        </td>
        <td>
          <select class="table-input strategy-select">
            <option value="">Chá»n chiáº¿n lÆ°á»£c</option>
            <option value="TrÃ¡nh">TrÃ¡nh</option>
            <option value="Giáº£m thiá»ƒu">Giáº£m thiá»ƒu</option>
            <option value="Chuyá»ƒn giao">Chuyá»ƒn giao</option>
            <option value="Cháº¥p nháº­n">Cháº¥p nháº­n</option>
          </select>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="HÃ nh Ä‘á»™ng á»©ng phÃ³">
            <button class="edit-icon" title="Chá»‰nh sá»­a hÃ nh Ä‘á»™ng"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><input type="date" class="table-input"></td>
        <td><button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button></td>
      \`;

      row.querySelector('.delete-row').addEventListener('click', function() {
        tbody.removeChild(row);
        updateRowNumbers('riskManagementTable');
      });
    }

    // ThÃªm sá»± kiá»‡n cho nÃºt thÃªm dÃ²ng
    if (addRiskRow) {
      addRiskRow.addEventListener('click', () => addRiskTableRow());
    }

    if (addProgressRow) {
      addProgressRow.addEventListener('click', () => addProgressTableRow());
    }

    // Gáº¯n sá»± kiá»‡n cho cÃ¡c nÃºt edit
    window.addEditIconListeners();
  }
  
  // HÃ m thÃªm dÃ²ng má»›i vÃ o báº£ng Risk Management
  function addRiskTableRow() {
    const tbody = document.querySelector('#riskManagementTable tbody');
    const rowCount = tbody.rows.length;
    const newRow = tbody.insertRow();

    newRow.innerHTML = \`
      <td>\${rowCount + 1}</td>
      <td>
        <div class="table-input-container">
          <input type="text" class="table-input" placeholder="MÃ´ táº£ rá»§i ro">
          <button class="edit-icon" title="Chá»‰nh sá»­a mÃ´ táº£"><i class="fa-solid fa-edit"></i></button>
        </div>
      </td>
      <td>
        <select class="table-input risk-level-select">
          <option value="">Chá»n má»©c Ä‘á»™</option>
          <option value="Cháº¥p nháº­n Ä‘Æ°á»£c">Cháº¥p nháº­n Ä‘Æ°á»£c</option>
          <option value="Cáº§n xem xÃ©t">Cáº§n xem xÃ©t</option>
          <option value="Cáº§n quáº£n lÃ½">Cáº§n quáº£n lÃ½</option>
          <option value="KhÃ´ng cháº¥p nháº­n">KhÃ´ng cháº¥p nháº­n</option>
        </select>
      </td>
      <td>
        <select class="table-input strategy-select">
          <option value="">Chá»n chiáº¿n lÆ°á»£c</option>
          <option value="TrÃ¡nh">TrÃ¡nh</option>
          <option value="Giáº£m thiá»ƒu">Giáº£m thiá»ƒu</option>
          <option value="Chuyá»ƒn giao">Chuyá»ƒn giao</option>
          <option value="Cháº¥p nháº­n">Cháº¥p nháº­n</option>
        </select>
      </td>
      <td>
        <div class="table-input-container">
          <input type="text" class="table-input" placeholder="HÃ nh Ä‘á»™ng á»©ng phÃ³">
          <button class="edit-icon" title="Chá»‰nh sá»­a hÃ nh Ä‘á»™ng"><i class="fa-solid fa-edit"></i></button>
        </div>
      </td>
      <td><input type="date" class="table-input"></td>
      <td><button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button></td>
    \`;

    newRow.querySelector('.delete-row').addEventListener('click', function() {
      tbody.removeChild(newRow);
      updateRowNumbers('riskManagementTable');
    });

    // Gáº¯n sá»± kiá»‡n cho cÃ¡c nÃºt edit
    window.addEditIconListeners();
  }

  // HÃ m cáº­p nháº­t báº£ng Progress Report
  function updateProgressTable(progressItems) {
    const tbody = document.querySelector('#progressReportTable tbody');
    tbody.innerHTML = '';

    progressItems.forEach((item, index) => {
      const row = tbody.insertRow();
      row.innerHTML = \`
        <td>\${index + 1}</td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" value="\${escapeHtml(item.content || '')}" placeholder="Ná»™i dung dá»± Ã¡n">
            <button class="edit-icon" title="Chá»‰nh sá»­a ná»™i dung"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" value="\${escapeHtml(item.master_plan || '')}" placeholder="Master plan/Time line">
            <button class="edit-icon" title="Chá»‰nh sá»­a master plan"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" value="\${escapeHtml(item.progress_report || '')}" placeholder="BÃ¡o cÃ¡o tiáº¿n Ä‘á»™">
            <button class="edit-icon" title="Chá»‰nh sá»­a bÃ¡o cÃ¡o"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <select class="table-input progress-evaluation-select">
            <option value="">Chá»n Ä‘Ã¡nh giÃ¡</option>
            <option value="ÄÃºng tiáº¿n Ä‘á»™" \${item.evaluation === 'ÄÃºng tiáº¿n Ä‘á»™' ? 'selected' : ''}>ÄÃºng tiáº¿n Ä‘á»™</option>
            <option value="Cháº­m tiáº¿n Ä‘á»™" \${item.evaluation === 'Cháº­m tiáº¿n Ä‘á»™' ? 'selected' : ''}>Cháº­m tiáº¿n Ä‘á»™</option>
            <option value="VÆ°á»£t tiáº¿n Ä‘á»™" \${item.evaluation === 'VÆ°á»£t tiáº¿n Ä‘á»™' ? 'selected' : ''}>VÆ°á»£t tiáº¿n Ä‘á»™</option>
          </select>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" value="\${escapeHtml(item.next_plan || '')}" placeholder="Káº¿ hoáº¡ch tiáº¿p theo">
            <button class="edit-icon" title="Chá»‰nh sá»­a káº¿ hoáº¡ch"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" value="\${escapeHtml(item.difficulties || '')}" placeholder="KhÃ³ khÄƒn vÆ°á»›ng máº¯c">
            <button class="edit-icon" title="Chá»‰nh sá»­a khÃ³ khÄƒn"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" value="\${escapeHtml(item.suggestions || '')}" placeholder="Äá» xuáº¥t/Kiáº¿n nghá»‹">
            <button class="edit-icon" title="Chá»‰nh sá»­a Ä‘á» xuáº¥t"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" value="\${escapeHtml(item.note || '')}" placeholder="Ghi chÃº">
            <button class="edit-icon" title="Chá»‰nh sá»­a ghi chÃº"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button></td>
      \`;

      // ThÃªm sá»± kiá»‡n xÃ³a
      row.querySelector('.delete-row').addEventListener('click', function() {
        tbody.removeChild(row);
        updateRowNumbers('progressReportTable');
      });
    });

    // ThÃªm dÃ²ng trá»‘ng náº¿u khÃ´ng cÃ³ dá»¯ liá»‡u
    if (progressItems.length === 0) {
      const row = tbody.insertRow();
      row.innerHTML = \`
        <td>1</td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="Ná»™i dung dá»± Ã¡n">
            <button class="edit-icon" title="Chá»‰nh sá»­a ná»™i dung"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="Master plan/Time line">
            <button class="edit-icon" title="Chá»‰nh sá»­a master plan"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="BÃ¡o cÃ¡o tiáº¿n Ä‘á»™">
            <button class="edit-icon" title="Chá»‰nh sá»­a bÃ¡o cÃ¡o"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <select class="table-input progress-evaluation-select">
            <option value="">Chá»n Ä‘Ã¡nh giÃ¡</option>
            <option value="ÄÃºng tiáº¿n Ä‘á»™">ÄÃºng tiáº¿n Ä‘á»™</option>
            <option value="Cháº­m tiáº¿n Ä‘á»™">Cháº­m tiáº¿n Ä‘á»™</option>
            <option value="VÆ°á»£t tiáº¿n Ä‘á»™">VÆ°á»£t tiáº¿n Ä‘á»™</option>
          </select>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="Káº¿ hoáº¡ch tiáº¿p theo">
            <button class="edit-icon" title="Chá»‰nh sá»­a káº¿ hoáº¡ch"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="KhÃ³ khÄƒn vÆ°á»›ng máº¯c">
            <button class="edit-icon" title="Chá»‰nh sá»­a khÃ³ khÄƒn"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="Äá» xuáº¥t/Kiáº¿n nghá»‹">
            <button class="edit-icon" title="Chá»‰nh sá»­a Ä‘á» xuáº¥t"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="Ghi chÃº">
            <button class="edit-icon" title="Chá»‰nh sá»­a ghi chÃº"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button></td>
      \`;

      row.querySelector('.delete-row').addEventListener('click', function() {
        tbody.removeChild(row);
        updateRowNumbers('progressReportTable');
      });
    }

    // ThÃªm sá»± kiá»‡n cho nÃºt thÃªm dÃ²ng
    const addProgressRow = document.getElementById('addProgressRow');
    if (addProgressRow) {
      addProgressRow.addEventListener('click', () => addProgressTableRow());
    }

    // Gáº¯n sá»± kiá»‡n cho cÃ¡c nÃºt edit
    window.addEditIconListeners();
  }

  // HÃ m thÃªm dÃ²ng má»›i vÃ o báº£ng Progress Report
  function addProgressTableRow() {
    const tbody = document.querySelector('#progressReportTable tbody');
    const rowCount = tbody.rows.length;
    const newRow = tbody.insertRow();

    newRow.innerHTML = \`
      <td>\${rowCount + 1}</td>
      <td>
        <div class="table-input-container">
          <input type="text" class="table-input" placeholder="Ná»™i dung dá»± Ã¡n">
          <button class="edit-icon" title="Chá»‰nh sá»­a ná»™i dung"><i class="fa-solid fa-edit"></i></button>
        </div>
      </td>
      <td>
        <div class="table-input-container">
          <input type="text" class="table-input" placeholder="Master plan/Time line">
          <button class="edit-icon" title="Chá»‰nh sá»­a master plan"><i class="fa-solid fa-edit"></i></button>
        </div>
      </td>
      <td>
        <div class="table-input-container">
          <input type="text" class="table-input" placeholder="BÃ¡o cÃ¡o tiáº¿n Ä‘á»™">
          <button class="edit-icon" title="Chá»‰nh sá»­a bÃ¡o cÃ¡o"><i class="fa-solid fa-edit"></i></button>
        </div>
      </td>
      <td>
        <select class="table-input progress-evaluation-select">
          <option value="">Chá»n Ä‘Ã¡nh giÃ¡</option>
          <option value="ÄÃºng tiáº¿n Ä‘á»™">ÄÃºng tiáº¿n Ä‘á»™</option>
          <option value="Cháº­m tiáº¿n Ä‘á»™">Cháº­m tiáº¿n Ä‘á»™</option>
          <option value="VÆ°á»£t tiáº¿n Ä‘á»™">VÆ°á»£t tiáº¿n Ä‘á»™</option>
        </select>
      </td>
      <td>
        <div class="table-input-container">
          <input type="text" class="table-input" placeholder="Káº¿ hoáº¡ch tiáº¿p theo">
          <button class="edit-icon" title="Chá»‰nh sá»­a káº¿ hoáº¡ch"><i class="fa-solid fa-edit"></i></button>
        </div>
      </td>
      <td>
        <div class="table-input-container">
          <input type="text" class="table-input" placeholder="KhÃ³ khÄƒn vÆ°á»›ng máº¯c">
          <button class="edit-icon" title="Chá»‰nh sá»­a khÃ³ khÄƒn"><i class="fa-solid fa-edit"></i></button>
        </div>
      </td>
      <td>
        <div class="table-input-container">
          <input type="text" class="table-input" placeholder="Äá» xuáº¥t/Kiáº¿n nghá»‹">
          <button class="edit-icon" title="Chá»‰nh sá»­a Ä‘á» xuáº¥t"><i class="fa-solid fa-edit"></i></button>
        </div>
      </td>
      <td>
        <div class="table-input-container">
          <input type="text" class="table-input" placeholder="Ghi chÃº">
          <button class="edit-icon" title="Chá»‰nh sá»­a ghi chÃº"><i class="fa-solid fa-edit"></i></button>
        </div>
      </td>
      <td><button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button></td>
    \`;

    // Add delete event listener
    newRow.querySelector('.delete-row').addEventListener('click', function() {
      tbody.removeChild(newRow);
      updateRowNumbers('progressReportTable');
    });

    // Gáº¯n sá»± kiá»‡n cho cÃ¡c nÃºt edit
    window.addEditIconListeners();
  }

  function updateDiscussionTable(topics) {
    const tbody = discussionTable.querySelector('tbody');
    tbody.innerHTML = '';

    topics.forEach((topic, index) => {
      const row = tbody.insertRow();
      row.innerHTML = \`
        <td>\${index + 1}</td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" value="\${escapeHtml(topic.content || '')}" placeholder="Ná»™i dung tháº£o luáº­n">
            <button class="edit-icon" title="Chá»‰nh sá»­a ná»™i dung"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><input type="text" class="table-input" value="\${escapeHtml(topic.pic || '')}" placeholder="NgÆ°á»i phá»¥ trÃ¡ch"></td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" value="\${escapeHtml(topic.note || '')}" placeholder="Ghi chÃº">
            <button class="edit-icon" title="Chá»‰nh sá»­a ghi chÃº"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <button class="btn-icon create-jira-btn" title="Táº¡o Jira ticket" data-table="discussion">
            <i class="fa-brands fa-jira"></i>
          </button>
          <button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button>
        </td>
      \`;

      // Add delete event listener
      row.querySelector('.delete-row').addEventListener('click', function() {
        tbody.removeChild(row);
        updateRowNumbers('discussionTable');
      });
    });

    // Re-add edit icon listeners and Jira buttons for the updated rows
    window.addEditIconListeners();
    if (window.addJiraButtonListeners) window.addJiraButtonListeners();

    // Add at least one empty row if no data
    if (topics.length === 0) {
      const row = tbody.insertRow();
      row.innerHTML = \`
        <td>1</td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="Ná»™i dung tháº£o luáº­n">
            <button class="edit-icon" title="Chá»‰nh sá»­a ná»™i dung"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><input type="text" class="table-input" placeholder="NgÆ°á»i phá»¥ trÃ¡ch"></td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="Ghi chÃº">
            <button class="edit-icon" title="Chá»‰nh sá»­a ghi chÃº"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <button class="btn-icon create-jira-btn" title="Táº¡o Jira ticket" data-table="discussion">
            <i class="fa-brands fa-jira"></i>
          </button>
          <button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button>
        </td>
      \`;

      row.querySelector('.delete-row').addEventListener('click', function() {
        tbody.removeChild(row);
        updateRowNumbers('discussionTable');
      });

      // Add edit icon listeners and Jira button for empty row
      window.addEditIconListeners();
      if (window.addJiraButtonListeners) window.addJiraButtonListeners();
    }
  }

  function updateActionTable(actions) {
    const tbody = actionTable.querySelector('tbody');
    tbody.innerHTML = '';

    actions.forEach((action, index) => {
      const row = tbody.insertRow();
      row.innerHTML = \`
        <td>\${index + 1}</td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" value="\${escapeHtml(action.content || '')}" placeholder="HÃ nh Ä‘á»™ng cáº§n thá»±c hiá»‡n">
            <button class="edit-icon" title="Chá»‰nh sá»­a ná»™i dung"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><input type="date" class="table-input" value="\${escapeHtml(action.deadline || '')}"></td>
        <td><input type="text" class="table-input" value="\${escapeHtml(action.pic || '')}" placeholder="NgÆ°á»i phá»¥ trÃ¡ch"></td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" value="\${escapeHtml(action.note || '')}" placeholder="Ghi chÃº">
            <button class="edit-icon" title="Chá»‰nh sá»­a ghi chÃº"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <button class="btn-icon create-jira-btn" title="Táº¡o Jira ticket" data-table="action">
            <i class="fa-brands fa-jira"></i>
          </button>
          <button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button>
        </td>
      \`;

      // Add delete event listener
      row.querySelector('.delete-row').addEventListener('click', function() {
        tbody.removeChild(row);
        updateRowNumbers('actionTable');
      });
    });

    // Re-add edit icon listeners and Jira buttons for the updated rows
    window.addEditIconListeners();
    if (window.addJiraButtonListeners) window.addJiraButtonListeners();

    // Add at least one empty row if no data
    if (actions.length === 0) {
      const row = tbody.insertRow();
      row.innerHTML = \`
        <td>1</td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="HÃ nh Ä‘á»™ng cáº§n thá»±c hiá»‡n">
            <button class="edit-icon" title="Chá»‰nh sá»­a ná»™i dung"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><input type="date" class="table-input"></td>
        <td><input type="text" class="table-input" placeholder="NgÆ°á»i phá»¥ trÃ¡ch"></td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="Ghi chÃº">
            <button class="edit-icon" title="Chá»‰nh sá»­a ghi chÃº"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td>
          <button class="btn-icon create-jira-btn" title="Táº¡o Jira ticket" data-table="action">
            <i class="fa-brands fa-jira"></i>
          </button>
          <button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button>
        </td>
      \`;

      row.querySelector('.delete-row').addEventListener('click', function() {
        tbody.removeChild(row);
        updateRowNumbers('actionTable');
      });

      // Add edit icon listeners and Jira button for empty row
      window.addEditIconListeners();
      if (window.addJiraButtonListeners) window.addJiraButtonListeners();
    }
  }

  function updateJiraOptions(data) {
    if (!data) return;
    const options = [];

    const deadlineMap = {};
    
    // Add options from discussion topics
    if (data.discussion_topics && Array.isArray(data.discussion_topics)) {
      data.discussion_topics.forEach(topic => {
        if (topic.content) {
          options.push({
            value: topic.content,
            text: "Discussion: " + (topic.content.length > 50 ? topic.content.substring(0, 50) + "..." : topic.content)
          });
        }
      });
    }

    // Add options from action items
    if (data.action_items && Array.isArray(data.action_items)) {
      data.action_items.forEach(action => {
        if (action.content) {
          options.push({
            value: action.content,
            text: "Action: " + (action.content.length > 50 ? action.content.substring(0, 50) + "..." : action.content)
          });
        
          // map content -> deadline
          if (action && action.content) { deadlineMap[action.content] = action.deadline || ''; }
        }
      });
    }
    
    // Add options from risk items
    if (data.risk_items && Array.isArray(data.risk_items)) {
      data.risk_items.forEach(item => {
        if (item.description) {
          options.push({
            value: item.description,
            text: "Risk: " + (item.description.length > 50 ? item.description.substring(0, 50) + "..." : item.description)
          });
          
          // map description -> timeline
          if (item && item.description) { deadlineMap[item.description] = item.timeline || ''; }
        }
      });
    }
    
    window.jiraOptions = options;
    window.jiraActionDeadlineMap = deadlineMap;
  }

  function addTicket() {
    const ticketId = 'ticket-' + Date.now();
    const ticket = { id: ticketId, summary: '', description: '', issueType: 'Task', priority: 'Medium', dueDate: '' };
    tickets.push(ticket);
    if (currentStep !== 4 && stepButtons.length > 0) {
      setActiveStep(4);
    }
    renderTicket(ticket);
    updateCreateButton();
  }

  function renderTicket(ticket) {
    const ticketList = $('ticketList');
    const ticketItem = document.createElement('div');
    ticketItem.className = 'ticket-item';
    ticketItem.id = ticket.id;

    let optionsHtml = '';
    if (window.jiraOptions && window.jiraOptions.length > 0) {
      optionsHtml = '<option value="">-- Chá»n tá»« dá»¯ liá»‡u --</option>';
      window.jiraOptions.forEach(option => {
        optionsHtml += \`<option value="\${escapeHtml(option.value)}">\${escapeHtml(option.text)}</option>\`;
      });
    }

    ticketItem.innerHTML = \`
      <div class="ticket-item-header">
        <h5>Ticket \${tickets.indexOf(ticket) + 1}</h5>
        <button type="button" class="btn line" onclick="removeTicket('\${ticket.id}')"><i class="fa-solid fa-trash"></i> XÃ³a</button>
      </div>
      <div class="ticket-row">
        <label>Summary:</label>
        <select id="\${ticket.id}-summary-select" onchange="updateSummaryFromSelect('\${ticket.id}')">
          \${optionsHtml}
        </select>
      </div>
      <div class="ticket-row">
        <label>Hoáº·c nháº­p:</label>
        <input type="text" id="\${ticket.id}-summary" placeholder="Nháº­p summary cho ticket" value="\${escapeHtml(ticket.summary)}" onchange="updateTicketField('\${ticket.id}', 'summary', this.value)">
      </div>
      <div class="ticket-row">
        <label>Description:</label>
        <textarea id="\${ticket.id}-description" placeholder="Nháº­p description cho ticket" onchange="updateTicketField('\${ticket.id}', 'description', this.value)">\${escapeHtml(ticket.description)}</textarea>
      </div>
      <div class="ticket-row">
        <label>Issue Type:</label>
        <select id="\${ticket.id}-issueType" onchange="updateTicketField('\${ticket.id}', 'issueType', this.value)">
          <option value="Task" \${ticket.issueType === 'Task' ? 'selected' : ''}>Task</option>
          <option value="Bug" \${ticket.issueType === 'Bug' ? 'selected' : ''}>Bug</option>
          <option value="Story" \${ticket.issueType === 'Story' ? 'selected' : ''}>Story</option>
          <option value="Risk" \${ticket.issueType === 'Risk' ? 'selected' : ''}>Risk</option>
        </select>
      </div>
      <div class="ticket-row">
        <label>Due date:</label>
        <input type="date" id="\${ticket.id}-dueDate" value="\${escapeHtml(ticket.dueDate || '')}" onchange="updateTicketField('\${ticket.id}', 'dueDate', this.value)">
      </div>
      <div class="ticket-row">
        <label>Priority:</label>
        <select id="\${ticket.id}-priority" onchange="updateTicketField('\${ticket.id}', 'priority', this.value)">
          <option value="Lowest" \${ticket.priority === 'Lowest' ? 'selected' : ''}>Lowest</option>
          <option value="Low" \${ticket.priority === 'Low' ? 'selected' : ''}>Low</option>
          <option value="Medium" \${ticket.priority === 'Medium' ? 'selected' : ''}>Medium</option>
          <option value="High" \${ticket.priority === 'High' ? 'selected' : ''}>High</option>
          <option value="Highest" \${ticket.priority === 'Highest' ? 'selected' : ''}>Highest</option>
        </select>
      </div>
    \`;

    ticketList.appendChild(ticketItem);
  }

  function removeTicket(ticketId) {
    tickets = tickets.filter(t => t.id !== ticketId);
    const ticketElement = $(ticketId);
    if (ticketElement) ticketElement.remove();
    updateCreateButton();
  }

  function updateTicketField(ticketId, field, value) {
    const ticket = tickets.find(t => t.id === ticketId);
    if (ticket) ticket[field] = value;
    updateCreateButton();
  }

  function updateSummaryFromSelect(ticketId) {
    const select = \$(ticketId + '-summary-select');
    const summaryInput = \$(ticketId + '-summary');
    if (select && summaryInput) {
      summaryInput.value = select.value;
      updateTicketField(ticketId, 'summary', select.value);

      // Auto-fill Due date tá»« Action items náº¿u cÃ³ map
      try {
        var dueInput = \$(ticketId + '-dueDate');
        var map = window.jiraActionDeadlineMap || {};
        var deadline = map[select.value] || '';
        if (dueInput && deadline) {
          dueInput.value = deadline;
          updateTicketField(ticketId, 'dueDate', deadline);
        }
      } catch (_e) {}
    }
  }

  function updateCreateButton() {
    const btnCreateJira = $('btnCreateJira');
    if (btnCreateJira) {
      btnCreateJira.disabled = tickets.length === 0 || tickets.some(t => !t.summary);
    }
  }

  function showTicketResults(results) {
    const resultContainer = $('ticketResult');
    if (!resultContainer) return;

    let html = '<h4>Káº¿t quáº£ táº¡o ticket:</h4>';
    results.forEach(result => {
      if (result.ok) {
        html += \`
          <div class="row" style="justify-content:space-between;align-items:center;background:#fff;border:1px solid var(--line);border-radius:10px;padding:10px;margin-bottom:8px">
            <div><strong>\${result.key}</strong>: <a href="\${result.url}" target="_blank">\${escapeHtml(result.url)}</a></div>
            <a href="\${result.url}" target="_blank" class="btn ghost"><i class="fa-solid fa-up-right-from-square"></i> Má»Ÿ</a>
          </div>\`;
      } else {
        html += \`
          <div class="row" style="align-items:center;background:#fff;border:1px solid var(--line);border-radius:10px;padding:10px;margin-bottom:8px">
            <div><strong>Lá»—i:</strong> \${escapeHtml(result.error)}</div>
          </div>\`;
      }
    });

    resultContainer.innerHTML = html;
    resultContainer.style.display = 'block';
    resultContainer.className = 'ticket-result ' + (results.every(r => r.ok) ? 'success' : 'error');
  }

  function escapeHtml(text) {
    const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
    return String(text).replace(/[&<>"']/g, m => map[m]);
  }

  // Table functions
  function addTableRow(tableId) {
    const table = document.getElementById(tableId);
    const tbody = table.querySelector('tbody');
    const rowCount = tbody.rows.length;
    const newRow = tbody.insertRow();

    if (tableId === 'discussionTable') {
      newRow.innerHTML = \`
        <td>\${rowCount + 1}</td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="Ná»™i dung tháº£o luáº­n">
            <button class="edit-icon" title="Chá»‰nh sá»­a ná»™i dung"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><input type="text" class="table-input" placeholder="NgÆ°á»i phá»¥ trÃ¡ch"></td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="Ghi chÃº">
            <button class="edit-icon" title="Chá»‰nh sá»­a ghi chÃº"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button></td>
      \`;
    } else if (tableId === 'actionTable') {
      newRow.innerHTML = \`
        <td>\${rowCount + 1}</td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="HÃ nh Ä‘á»™ng cáº§n thá»±c hiá»‡n">
            <button class="edit-icon" title="Chá»‰nh sá»­a ná»™i dung"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><input type="date" class="table-input"></td>
        <td><input type="text" class="table-input" placeholder="NgÆ°á»i phá»¥ trÃ¡ch"></td>
        <td>
          <div class="table-input-container">
            <input type="text" class="table-input" placeholder="Ghi chÃº">
            <button class="edit-icon" title="Chá»‰nh sá»­a ghi chÃº"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><button class="btn-icon delete-row" title="XÃ³a"><i class="fa-solid fa-trash"></i></button></td>
      \`;
    }

    // Add delete event listener
    newRow.querySelector('.delete-row').addEventListener('click', function() {
      tbody.removeChild(newRow);
      updateRowNumbers(tableId);
    });
  }

  function updateRowNumbers(tableId) {
    const table = document.getElementById(tableId);
    const rows = table.querySelectorAll('tbody tr');
    rows.forEach((row, index) => {
      row.cells[0].textContent = index + 1;
    });
  }

  // Helper function Ä‘á»ƒ láº¥y giÃ¡ trá»‹ tá»« input
  function getVal(cell) {
    const input = cell.querySelector('input, select, textarea');
    if (input) {
      return input.value || '';
    }
    return cell.textContent || '';
  }

  // Cáº­p nháº­t hÃ m extractFromTables Ä‘á»ƒ xá»­ lÃ½ Risk Management
  function extractFromTables() {
    const template = currentTemplate;
    
    // Khá»Ÿi táº¡o lastLLMJson náº¿u chÆ°a cÃ³
    if (!window.lastLLMJson) {
      window.lastLLMJson = { 
        discussion_topics: [], 
        action_items: [], 
        assessment: "ÄÃºng tiáº¿n Ä‘á»™",
        risk_items: [],
        progress_items: []
      };
    }
    
    if (template === 'risk') {
      const riskItems = [];
      document.querySelectorAll('#riskManagementTable tbody tr').forEach(row => {
        const description = getVal(row.cells[1]);
        const riskLevel = getVal(row.cells[2]);
        const strategy = getVal(row.cells[3]);
        const action = getVal(row.cells[4]);
        const timeline = getVal(row.cells[5]);
        if (description || riskLevel || strategy || action || timeline) {
          riskItems.push({ 
            description, 
            risk_level: riskLevel, 
            strategy, 
            action, 
            timeline 
          });
        }
      });

      window.lastLLMJson.risk_items = riskItems;
    } else if (template === 'progress') {
      const progressItems = [];
      document.querySelectorAll('#progressReportTable tbody tr').forEach(row => {
        const content = getVal(row.cells[1]);
        const masterPlan = getVal(row.cells[2]);
        const progress = getVal(row.cells[3]);
        const evaluation = getVal(row.cells[4]);
        const nextPlan = getVal(row.cells[5]);
        const challenges = getVal(row.cells[6]);
        const proposals = getVal(row.cells[7]);
        const notes = getVal(row.cells[8]);
        if (content || masterPlan || progress || evaluation || nextPlan || challenges || proposals || notes) {
          progressItems.push({ 
            content, 
            master_plan: masterPlan, 
            progress, 
            evaluation, 
            next_plan: nextPlan, 
            challenges, 
            proposals, 
            notes 
          });
        }
      });

      window.lastLLMJson.progress_items = progressItems;
      
      // Debug logging
      console.log('Progress items extracted:', progressItems);
      console.log('Template:', template);
      console.log('lastLLMJson after extraction:', window.lastLLMJson);
    } else {
      // Giá»¯ nguyÃªn logic hiá»‡n táº¡i cho discussion vÃ  action
      const discussionTopics = [];
      document.querySelectorAll('#discussionTable tbody tr').forEach(row => {
        const content = getVal(row.cells[1]);
        const pic     = getVal(row.cells[2]);
        const note    = getVal(row.cells[3]);
        if (content || pic || note) discussionTopics.push({ content, pic, note });
      });

      const actionItems = [];
      document.querySelectorAll('#actionTable tbody tr').forEach(row => {
        const content  = getVal(row.cells[1]);
        const deadline = getVal(row.cells[2]);
        const pic     = getVal(row.cells[3]);
        const note     = getVal(row.cells[4]);
        if (content || deadline || pic || note) actionItems.push({ content, deadline, pic, note });
      });

      window.lastLLMJson.discussion_topics = discussionTopics;
      window.lastLLMJson.action_items = actionItems;
    }

    const btn = document.getElementById('btnCreate');
    if (btn) {
      if (template === 'risk') {
        btn.disabled = !(window.lastLLMJson && window.lastLLMJson.risk_items && window.lastLLMJson.risk_items.length);
      } else if (template === 'progress') {
        btn.disabled = !(window.lastLLMJson && window.lastLLMJson.progress_items && window.lastLLMJson.progress_items.length);
      } else {
        btn.disabled = !(window.lastLLMJson.discussion_topics.length || window.lastLLMJson.action_items.length);
      }
    }
  }

  // Initialize table event listeners
  if (addDiscussionRow) {
    addDiscussionRow.addEventListener('click', () => addTableRow('discussionTable'));
  }

  if (addActionRow) {
    addActionRow.addEventListener('click', () => addTableRow('actionTable'));
  }

  if (extractDataBtn) {
    extractDataBtn.addEventListener('click', extractFromTables);
  }

  // Add delete event listeners to existing rows
  document.querySelectorAll('.delete-row').forEach(button => {
    button.addEventListener('click', function() {
      const row = this.closest('tr');
      const tbody = row.parentNode;
      const tableId = tbody.parentNode.id;
      tbody.removeChild(row);
      updateRowNumbers(tableId);
    });
  });

  // File select / drag drop for audio - Tá»° Äá»˜NG CHáº Y PIPELINE
  input.addEventListener('change', async function(){
    currentFile = input.files && input.files.length > 0 ? input.files[0] : null;
    if (uploadFileLabel) uploadFileLabel.textContent = currentFile ? (currentFile.name+' â€” '+(currentFile.size/1048576).toFixed(2)+' MB') : 'ChÆ°a chá»n tá»‡p';
    
    // Tá»± Ä‘á»™ng cháº¡y pipeline sau khi chá»n file
    if (currentFile) {
      // Delay nhá» Ä‘á»ƒ UI cáº­p nháº­t
      setTimeout(() => {
        if (btnUpload) btnUpload.click();
      }, 300);
    }
  });
  ['dragover','dragenter'].forEach(ev=>drop.addEventListener(ev, e=>{
    e.preventDefault(); drop.classList.add('dragover');
  }));
  ['dragleave','drop'].forEach(ev=>drop.addEventListener(ev, e=>{
    e.preventDefault(); drop.classList.remove('dragover');
  }));
  drop.addEventListener('drop', e=>{
    e.preventDefault();
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      input.files = e.dataTransfer.files;
      currentFile = e.dataTransfer.files[0];
      if (uploadFileLabel) uploadFileLabel.textContent = currentFile ? (currentFile.name+' â€” '+(currentFile.size/1048576).toFixed(2)+' MB') : 'ChÆ°a chá»n tá»‡p';
    }
  });

  // Email image handling - drag and drop
  ['dragover','dragenter'].forEach(ev=>emailDrop.addEventListener(ev, e=>{
    e.preventDefault(); emailDrop.classList.add('dragover');
  }));
  ['dragleave','drop'].forEach(ev=>emailDrop.addEventListener(ev, e=>{
    e.preventDefault(); emailDrop.classList.remove('dragover');
  }));
  emailDrop.addEventListener('drop', e=>{
    e.preventDefault();
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      handleImageFile(e.dataTransfer.files[0]);
    }
  });

  // Email image handling - paste
  document.addEventListener('paste', function(e) {
    const items = e.clipboardData.items;
    for (let i = 0; i < items.length; i++) {
      if (items[i].type.indexOf('image') !== -1) {
        const blob = items[i].getAsFile();
        handleImageFile(blob);
        e.preventDefault();
        return;
      }
    }
  });

  // Email image handling - click to open file dialog (enabled)
  // Also allow clicking anywhere inside drop zone
  emailDrop.addEventListener('click', function(e){
    // ignore clicks on preview area (when image already present)
    if (emailPreview && emailPreview.style.display === 'block') return;
    emailInput.click();
  });
  // Keyboard support for opening file dialog
  emailPasteArea.addEventListener('keydown', function(e){
    if(e.key === 'Enter' || e.key === ' '){ e.preventDefault(); emailInput.click(); }
  });
  emailInput.addEventListener('change', function() {
    if (emailInput.files && emailInput.files.length > 0) {
      handleImageFile(emailInput.files[0]);
    }
  });

  // Handle image file
  function handleImageFile(file) {
    if (!file.type.match('image.*')) {
      showEmailStatus('Vui lÃ²ng chá»n file áº£nh', 'error');
      return;
    }

    const reader = new FileReader();
    reader.onload = function(e) {
      emailImgPreview.src = e.target.result;
      emailPreview.style.display = 'block';
      emailPasteArea.classList.add('has-image');
      emailDrop.classList.add('has-image');
      showEmailStatus('', '');

      // Reset OCR results
      ocrEmails.value = '';
      ocrJiraIds.value = '';
      btnExtractEmails.disabled = false;
      btnGetJiraIds.disabled = false; // Cho phÃ©p láº¥y Jira IDs ngay cáº£ khi chÆ°a trÃ­ch xuáº¥t
      emailImageUrl = null;
      emailImageKey = null;
      emailImageBlob = file;

      try{ btnProcessImage.style.display='inline-block'; btnProcessImage.disabled=false; }catch(_e){}
    };
    reader.readAsDataURL(file);
  }

  // Remove image
  btnRemoveImage.addEventListener('click', function() {
    emailInput.value = '';
    emailPreview.style.display = 'none';
    emailPasteArea.classList.remove('has-image');
    emailDrop.classList.remove('has-image');
    showEmailStatus('', '');

    // Reset OCR results
    ocrEmails.value = '';
    ocrJiraIds.value = '';
    btnExtractEmails.disabled = true;
    btnGetJiraIds.disabled = true;
    emailImageUrl = null;
    emailImageKey = null;
    emailImageBlob = null;

    try{ btnProcessImage.style.display='none'; btnProcessImage.disabled=false; }catch(_e){}
  });

  btnProcessImage.addEventListener('click', async function () {
      if (isEmailOcrBusy) { showEmailStatus('Äang xá»­ lÃ½ áº£nh/OCR, vui lÃ²ng Ä‘á»£i...', 'processing'); return; }
      isEmailOcrBusy = true;
    if (isUploadingEmailImage) {
      showEmailStatus('Äang upload, vui lÃ²ng Ä‘á»£i...', 'processing');
      return;
    }
    if (!emailImgPreview.src) {
      showEmailStatus('Vui lÃ²ng chá»n áº£nh trÆ°á»›c', 'error');
      return;
    }

    try {
      isUploadingEmailImage = true;
      btnProcessImage.disabled = true;
      btnExtractEmails.disabled = true;
      showEmailStatus('Äang upload áº£nh lÃªn R2â€¦', 'processing');

            // Æ¯u tiÃªn blob tá»« biáº¿n emailImageBlob Ä‘á»ƒ trÃ¡nh pháº£i báº¥m 2 láº§n
      let blob = emailImageBlob;
      if (!blob) {
        if (!emailImgPreview || !emailImgPreview.src) throw new Error('ChÆ°a cÃ³ áº£nh Ä‘á»ƒ upload');
        const resp = await fetch(emailImgPreview.src);
        if (!resp.ok) throw new Error('KhÃ´ng thá»ƒ Ä‘á»c dá»¯ liá»‡u áº£nh');
        blob = await resp.blob();
      }
// Táº¡o key + Ä‘uÃ´i má»Ÿ rá»™ng
      let ext = '.png';
      const mt = (blob.type || '').toLowerCase();
      if (mt.includes('jpeg') || mt.includes('jpg')) ext = '.jpg';
      else if (mt.includes('webp')) ext = '.webp';
      else if (mt.includes('png')) ext = '.png';

      let key = (crypto.randomUUID ? crypto.randomUUID() : String(Date.now())) + ext;

      // KÃ½ URL PUT giá»‘ng audio
      const signed = await fetch('/sign-put', {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ key })
      }).then(r => r.json());

      if (!signed.url) throw new Error('KhÃ´ng táº¡o Ä‘Æ°á»£c URL upload');

      // Upload báº±ng XHR Ä‘á»ƒ cÃ³ onprogress (nhÆ° audio)
      await new Promise((res, rej) => {
        const xhr = new XMLHttpRequest();
        xhr.open('PUT', signed.url, true);
        xhr.upload.onprogress = e => { /* cÃ³ thá»ƒ hiá»ƒn thá»‹ progress náº¿u muá»‘n */ };
        xhr.onload = () => (xhr.status >= 200 && xhr.status < 300) ? res() : rej(new Error('Upload failed: ' + xhr.status));
        xhr.onerror = () => rej(new Error('Upload error'));
        xhr.onabort = () => rej(new Error('Upload aborted'));
        xhr.send(blob);
      });

      // LÆ°u key Ä‘á»ƒ server tá»± ghÃ©p public URL
      emailImageKey = key;
      emailImageUrl = null;
      emailImageBlob = null; // giáº£i phÃ³ng bá»™ nhá»›

      showEmailStatus('áº¢nh Ä‘Ã£ upload xong!', 'success');
      btnExtractEmails.disabled = false;
    } catch (e) {
      showEmailStatus('Lá»—i upload: ' + String(e), 'error');
      console.error('Upload error:', e);
    } finally {
            isEmailOcrBusy = false;
isUploadingEmailImage = false;
      btnProcessImage.disabled = false;
    }
  });

  btnExtractEmails.addEventListener('click', async function() {
      if (isEmailOcrBusy) { showEmailStatus('Äang xá»­ lÃ½ áº£nh/OCR, vui lÃ²ng Ä‘á»£i...', 'processing'); return; }
      isEmailOcrBusy = true;
    if (isUploadingEmailImage) {
      showEmailStatus('Äang upload áº£nh, vui lÃ²ng Ä‘á»£i...', 'processing');
      return;
    }
    btnExtractEmails.disabled = true;
    try {
      // 1) Náº¿u chÆ°a cÃ³ key/url thÃ¬ tá»± upload áº£nh
      if (!(emailImageUrl || emailImageKey)) {
          isUploadingEmailImage = true; // ÄÃ¡nh dáº¥u Ä‘ang upload

          let blob = emailImageBlob;
          if (!blob) {
              if (!emailImgPreview || !emailImgPreview.src) {
                  showEmailStatus('ChÆ°a cÃ³ áº£nh â€“ dÃ¡n/kÃ©o tháº£ áº£nh vÃ o khung trÃªn', 'error');
                  return;
              }
              const resp = await fetch(emailImgPreview.src);
              if (!resp.ok) throw new Error('KhÃ´ng Ä‘á»c Ä‘Æ°á»£c áº£nh tá»« preview');
              blob = await resp.blob();
          }
          showEmailStatus('Äang upload áº£nh lÃªn R2â€¦', 'processing');

          let ext = '.png';
          const mt = (blob.type || '').toLowerCase();
          if (mt.includes('jpeg') || mt.includes('jpg')) ext = '.jpg';
          else if (mt.includes('webp')) ext = '.webp';
          else if (mt.includes('png')) ext = '.png';

          const key = (crypto.randomUUID ? crypto.randomUUID() : String(Date.now())) + ext;

          const signed = await fetch('/sign-put', {
              method: 'POST',
              headers: { 'content-type': 'application/json' },
              body: JSON.stringify({ key })
          }).then(r => r.json());

          if (!signed.url) throw new Error('KhÃ´ng táº¡o Ä‘Æ°á»£c URL upload');

          await new Promise((res, rej) => {
              const xhr = new XMLHttpRequest();
              xhr.open('PUT', signed.url, true);
              xhr.onload = () => (xhr.status >= 200 && xhr.status < 300) ? res() : rej(new Error('Upload failed: ' + xhr.status));
              xhr.onerror = () => rej(new Error('Upload error'));
              xhr.send(blob);
          });

          emailImageKey = key;
          emailImageBlob = null; // giáº£i phÃ³ng bá»™ nhá»›
      }

      // 2) Gá»i OCR vá»›i model há»— trá»£ áº£nh
      showEmailStatus('Äang trÃ­ch xuáº¥t email...', 'processing');

      // Chuáº©n bá»‹ request body
      const requestBody = {
          ...(emailImageUrl ? { imageUrl: emailImageUrl } : { imageKey: emailImageKey }),
          model: 'grok-4-fast-non-reasoning' // THÃŠM MODEL Há»– TRá»¢ áº¢NH
      };

      const response = await fetch('/ocr-extract', {
          method: 'POST',
          headers: { 'content-type': 'application/json' },
          body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
          const errorText = await response.text();
          throw new Error('Lá»—i API: ' + response.status + ' - ' + errorText);
      }

      const result = await response.json();

      if (!result.ok) throw new Error(result.error || 'OCR tháº¥t báº¡i');

      // 3) Chuáº©n hoÃ¡ email list
      let emails = (result.emails || '').trim();
      if (!emails || emails === '[]') {
          const text = String(result.text || '');
          const found = (text.match(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi) || [])
                        .map(s => s.trim().toLowerCase());
          emails = Array.from(new Set(found)).join('; ');
      } else {
          const raw = emails.replace(/[,\\n]+/g, ';').split(';').map(x => x.trim()).filter(Boolean);
          emails = Array.from(new Set(raw.map(x => x.toLowerCase()))).join('; ');
      }

      ocrEmails.value = emails;
      btnGetJiraIds.disabled = !emails;
      if (!emails) showEmailStatus('KhÃ´ng tÃ¬m tháº¥y Ä‘á»‹a chá»‰ email trong áº£nh', 'error');
      else showEmailStatus('TrÃ­ch xuáº¥t thÃ nh cÃ´ng!', 'success');
    } catch (e) {
      showEmailStatus('Lá»—i: ' + String(e?.message || e), 'error');
      console.error('OCR error:', e);
    } finally {
            isEmailOcrBusy = false;
isUploadingEmailImage = false;
      btnExtractEmails.disabled = false;
    }
  });

  // Get Jira Account IDs
  btnGetJiraIds.addEventListener('click', async function() {
    if (isGettingJiraIds) { showEmailStatus('Äang láº¥y Jira IDs, vui lÃ²ng Ä‘á»£i...', 'processing'); return; }
      isGettingJiraIds = true;
const emails = ocrEmails.value.trim();
    if (!emails) {
      showEmailStatus('KhÃ´ng cÃ³ email Ä‘á»ƒ xá»­ lÃ½', 'error');
      return;
    }

    try {
      showEmailStatus('Äang láº¥y Jira Account IDs...', 'processing');

      // Split emails by semicolon
      const emailList = emails.split(';').map(e => e.trim()).filter(e => e);

      // Get Jira Account IDs for each email
      const jiraIds = [];
      const notFoundEmails = [];
      
      for (const email of emailList) {
        try {
          const response = await fetch('/jira-get-account-id', {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({ email })
          });

          if (!response.ok) {
            throw new Error('Lá»—i API Jira: ' + response.status);
          }
          const result = await response.json();
          if (result.ok && result.accountId) {
           jiraIds.push(result.accountId);
          } else {
            notFoundEmails.push(email);
          }
        } catch (e) {
          notFoundEmails.push(email);
        }
      }

      ocrJiraIds.value = jiraIds.join(';');
      
      if (notFoundEmails.length > 0) {
        showEmailStatus('KhÃ´ng tÃ¬m tháº¥y Account ID cho: ' + notFoundEmails.join(', '), 'error');
      } else {
        showEmailStatus('HoÃ n táº¥t!', 'success');
      }
    } catch (e) {
      showEmailStatus('Lá»—i: ' + String(e?.message || e), 'error');
      console.error('Jira API error:', e);
    }
  });


  function showEmailStatus(message, type) {
    emailStatus.textContent = message;
    emailStatus.className = 'email-status';

    if (message) {
      // Remove all existing type classes
      emailStatus.classList.remove('success', 'error', 'processing');

      // Add the new type class if provided
      if (type) {
        emailStatus.classList.add(type);
      }

      emailStatus.style.display = 'block';
    } else {
      emailStatus.style.display = 'none';
    }
  }

  if (btnCopy && pipelineOut) {
    btnCopy.addEventListener('click', () => {
      navigator.clipboard.writeText(pipelineOut.value || '').then(() => {
        btnCopy.textContent = 'ÄÃ£ copy';
        setTimeout(() => btnCopy.textContent = 'Copy log', 1200);
      });
    });
  }
  if (btnCancel) {
    btnCancel.addEventListener('click', () => {
      if(uploadXhr) uploadXhr.abort();
      if(transcribeAbort) transcribeAbort.abort();

      // XÃ³a file Ä‘á»ƒ táº£i láº¡i
      currentFile = null;
      input.value = '';
      if (uploadFileLabel) uploadFileLabel.textContent = 'ChÆ°a chá»n tá»‡p';
      setProgress(0);

      setSpinnerVisible(false);
      setState('ÄÃ£ há»§y');
    });
  }

  if (btnUpload) btnUpload.addEventListener('click', async function(){
    if((!currentFile || !currentFile.name) && (!input.files || input.files.length === 0)){
      alert('Chá»n má»™t tá»‡p audio trÆ°á»›c Ä‘Ã£');
      return;
    }
    if(!currentFile && input.files && input.files.length > 0) currentFile = input.files[0];

    try{
      btnCreate.disabled=true; lastLLMJson=null; lastTranscriptUrl=null; lastGrokResponse=null; lastPreviewHtml=null; lastPageUrl=null;
      setProgress(0);
      if (pipelineOut) pipelineOut.value='';
      if (pipelineLog) pipelineLog.textContent='';
      const pageLinkContainer = $('pageLinkContainer');
      if (pageLinkContainer) pageLinkContainer.style.display = 'none';
      const ticketResult = $('ticketResult');
      if (ticketResult) ticketResult.style.display = 'none';
      setState('KÃ½ URL upload...'); setSpinnerVisible(false);
      var key=(crypto.randomUUID?crypto.randomUUID():String(Date.now()));
      var m=(currentFile.name||'').match(/\\.[a-z0-9]+$/i); key+= m? m[0] : '.mp3';

      var signed=await fetch('/sign-put',{method:'POST',headers:{'content-type':'application/json'},body:JSON.stringify({key})}).then(r=>r.json());
      if(!signed.url) throw new Error('KhÃ´ng táº¡o Ä‘Æ°á»£c URL upload');

      setState('Äang upload lÃªn R2...');
      await new Promise((res,rej)=>{
        var xhr=new XMLHttpRequest(); uploadXhr=xhr;
        xhr.open('PUT', signed.url, true);
        xhr.upload.onprogress=e=>{ if(e.lengthComputable) setProgress(e.loaded/e.total); };
        xhr.onload=function(){ uploadXhr=null; (xhr.status>=200 && xhr.status<300)? res() : rej(new Error('Upload failed: '+xhr.status)); };
        xhr.onerror=function(){ uploadXhr=null; rej(new Error('Upload error')); };
        xhr.onabort=function(){ uploadXhr=null; rej(new Error('Upload aborted')); };
        xhr.send(currentFile);
      });

      setState('Äang xá»­ lÃ½...');
      setSpinnerVisible(true);
      if (pipelineOut) pipelineOut.value='Äang xá»­ lÃ½...';
      var ac=new AbortController(); transcribeAbort=ac;
      
      // Láº¥y template hiá»‡n táº¡i
      currentTemplate = templateSelect ? templateSelect.value : 'mom';
      
      var result=await fetch('/transcribe',{
        method:'POST',
        headers:{'content-type':'application/json'},
        body:JSON.stringify({
          key,
          template: currentTemplate // ThÃªm template
        }),
        signal:ac.signal
      }).then(r=>r.json()).catch(()=>({ok:false}));
      transcribeAbort=null; setSpinnerVisible(false);

      if(result.ok && result.llmJson){
        lastLLMJson=result.llmJson; lastTranscriptUrl=result.transcriptUrl||null; lastGrokResponse=result.grokResponse||null; lastPreviewHtml=result.previewHtml||null;
        
        // Cáº­p nháº­t template tá»« káº¿t quáº£ tráº£ vá»
        if (result.template) {
          currentTemplate = result.template;
        }
        
        // Äáº£m báº£o lastLLMJson cÃ³ Ä‘áº§y Ä‘á»§ cÃ¡c trÆ°á»ng cáº§n thiáº¿t
        if (!lastLLMJson.discussion_topics) lastLLMJson.discussion_topics = [];
        if (!lastLLMJson.action_items) lastLLMJson.action_items = [];
        if (!lastLLMJson.risk_items) lastLLMJson.risk_items = [];
        if (!lastLLMJson.progress_items) lastLLMJson.progress_items = [];
        if (!lastLLMJson.assessment) lastLLMJson.assessment = "ÄÃºng tiáº¿n Ä‘á»™";
        
        if (pipelineOut) pipelineOut.value=['âœ… HoÃ n táº¥t!','- Deepgram: OK','- LÆ°u transcript lÃªn R2: OK','- Grok 3 Mini: OK','','Transcript URL: '+(result.transcriptUrl||'(n/a)')].join('\\n');
        logJson({steps:result.steps, llmJson:result.llmJson});
        
        // Cáº­p nháº­t hiá»ƒn thá»‹ theo template
        updateDataDisplay(result.llmJson, currentTemplate);
        
        setState('Xong â€” cÃ³ thá»ƒ táº¡o page Confluence'); btnCreate.disabled=false;
      } else {
        setState('Táº¡o page tháº¥t báº¡i');
        if (pipelineOut) pipelineOut.value = 'âŒ Lá»—i pipeline\\n- BÆ°á»›c lá»—i: '+(result.step||'unknown')+'\\n- ThÃ´ng bÃ¡o: '+(result.error||'Unknown')+'\\n\\nChi tiáº¿t steps:\\n'+JSON.stringify(result.steps||{},null,2);
        btnCreate.disabled=true;
      }
    }catch(e){ setSpinnerVisible(false); setState('Lá»—i'); logJson({ error:String(e) }); }
  });
  
  // === Sá»¬A Lá»–I TEMPLATE SELECT ===
  // ThÃªm sá»± kiá»‡n cho templateSelect
  if (templateSelect) {
    templateSelect.addEventListener('change', function() {
      currentTemplate = templateSelect.value;
      // Cáº­p nháº­t hiá»ƒn thá»‹ báº£ng theo template
      if (window.lastLLMJson) {
        updateDataDisplay(window.lastLLMJson, currentTemplate);
      } else {
        // Náº¿u chÆ°a cÃ³ dá»¯ liá»‡u, váº«n hiá»ƒn thá»‹ báº£ng trá»‘ng theo template
        updateDataDisplay(null, currentTemplate);
      }
      
      // Cáº­p nháº­t tiÃªu Ä‘á» tá»± Ä‘á»™ng theo template
      if (modeAuto.checked) {
        if (currentTemplate === 'progress') {
          pageTitleEl.value = '[Report] BÃ¡o cÃ¡o tiáº¿n Ä‘á»™ dá»± Ã¡n trá»ng Ä‘iá»ƒm';
        } else if (currentTemplate === 'risk') {
          pageTitleEl.value = '[Report] Risk Management';
        } else {
          pageTitleEl.value = '[MOM] BiÃªn báº£n há»p';
        }
      }
    });
  }
  
  if (btnCreate) btnCreate.addEventListener('click', async function(){
    if(!lastLLMJson){ alert('ChÆ°a cÃ³ dá»¯ liá»‡u Ä‘á»ƒ táº¡o page.'); return; }

    // TRÆ¯á»šC KHI Gá»ŒI API: Cáº­p nháº­t dá»¯ liá»‡u tá»« báº£ng
    extractFromTables();

    const strategy = modeManual.checked ? 'manual' : 'autonumber';
    const titleVal = modeManual.checked ? (pageTitleEl.value || '').trim() : '';
    const rawSpaceValue = selectedSpaceKey || (spaceSelect && spaceSelect.value) || 'AIG';
    if (rawSpaceValue === 'ALL') {
      alert('Vui long chon mot space cu the truoc khi tao Confluence page.');
      return;
    }
    const spaceKey = rawSpaceValue;
    const parentId = parentIdInput ? parentIdInput.value.trim() : '';
    const template = currentTemplate; // Sá»­ dá»¥ng template hiá»‡n táº¡i

    if (strategy === 'manual' && !titleVal) { alert('Vui lÃ²ng nháº­p tiÃªu Ä‘á» Confluence page'); return; }

    try{
      setState('Äang táº¡o page Confluence...'); setSpinnerVisible(true);

      // Thu tháº­p dá»¯ liá»‡u tá»« báº£ng
      extractFromTables();
      
      // Äá»ƒ server tá»± build Confluence Storage Format tá»« llmJson
      const storageHtml = null;

      const attendeeIds = (ocrJiraIds && ocrJiraIds.value)
        ? ocrJiraIds.value.split(/[\\s;,]+/).map(s=>s.trim()).filter(Boolean)
        : [];

      // Debug logging trÆ°á»›c khi gá»­i request
      console.log('Sending request to /create-confluence:', {
        template: template,
        hasProgressItems: window.lastLLMJson?.progress_items?.length > 0,
        progressItems: window.lastLLMJson?.progress_items,
        spaceKey: spaceKey,
        title: titleVal
      });

      const createRes = await fetch('/create-confluence', {
        method:'POST',
        headers:{'content-type':'application/json'},
        body: JSON.stringify({
          llmJson: window.lastLLMJson,
          transcriptUrl: lastTranscriptUrl,
          titleStrategy: strategy,
          title: titleVal,
          spaceKey: spaceKey,
          parentId: parentId || null,
          template: template, // Gá»­i template
          storageHtml: storageHtml,
          attendeeIds: attendeeIds
        })
      });
      const resp = await createRes.json();

      setSpinnerVisible(false);
      if(resp.ok){
        setState('ÄÃ£ táº¡o page');
        if (pipelineOut) pipelineOut.value += '\\n\\nConfluence page: ' + (resp.pageUrl||'(Ä‘Ã£ táº¡o)') + (resp.title ? ('\\nTiÃªu Ä‘á»: ' + resp.title) : '');
        if (resp.pageUrl) {
          lastPageUrl = resp.pageUrl;
          const pageLink = $('pageLink');
          if (pageLink) pageLink.href = resp.pageUrl;
          const pageLinkContainer = $('pageLinkContainer');
          if (pageLinkContainer) pageLinkContainer.style.display = 'block';
        }
      }
      else{ setState('Táº¡o page tháº¥t báº¡i'); if (pipelineOut) pipelineOut.value += '\\n\\nâŒ ' + (resp.error||'Confluence error'); }
    }catch(e){ setSpinnerVisible(false); setState('Lá»—i'); if (pipelineOut) pipelineOut.value += '\\n\\nâŒ ' + String(e); }
  });

  $('btnAddTicket').addEventListener('click', () => { addTicket(); });

  $('btnCreateJira').addEventListener('click', async () => {
    if (tickets.length === 0) { alert('Vui lÃ²ng thÃªm Ã­t nháº¥t má»™t ticket'); return; }
    if (tickets.some(t => !t.summary)) { alert('Vui lÃ²ng nháº­p summary cho táº¥t cáº£ cÃ¡c tickets'); return; }
    
    // Sá»­ dá»¥ng selectedSpaceKey Ä‘Ã£ Ä‘Æ°á»£c lÆ°u tá»« tab "Káº¿t quáº£ & Confluence"
    const spaceKey = selectedSpaceKey === 'ALL' ? '' : selectedSpaceKey;
    
    // Debug log
    if (window.addDebugLog) {
      window.addDebugLog('Báº¯t Ä‘áº§u táº¡o ticket vá»›i spaceKey: ' + spaceKey);
      window.addDebugLog('Selected space key: ' + selectedSpaceKey);
      window.addDebugLog('Sá»‘ lÆ°á»£ng tickets: ' + tickets.length);
    }
    
    try {
      setState('Äang táº¡o tickets Jira...');
      setSpinnerVisible(true);
      const resp = await fetch('/create-jira-ticket', {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ tickets, spaceKey: spaceKey })
      }).then(r => r.json());
      setSpinnerVisible(false);
      
      // Debug log response
      if (window.addDebugLog) {
        window.addDebugLog('Response tá»« server: ' + JSON.stringify(resp, null, 2));
      }
      
      if (resp.ok) {
        setState('ÄÃ£ táº¡o tickets Jira');
        showTicketResults(resp.results);
        tickets = [];
        $('ticketList').innerHTML = '';
        updateCreateButton();
      } else {
        setState('Táº¡o tickets Jira tháº¥t báº¡i');
        if (window.addDebugLog) {
          window.addDebugLog('Lá»—i tá»« server: ' + (resp.error || 'Unknown error'));
        }
        showTicketResults([{ ok: false, error: resp.error || 'Unknown error' }]);
      }
    } catch (e) {
      setSpinnerVisible(false);
      setState('Lá»—i');
      if (window.addDebugLog) {
        window.addDebugLog('Exception: ' + String(e));
        window.addDebugLog('Stack trace: ' + (e.stack || 'No stack trace'));
      }
      showTicketResults([{ ok: false, error: String(e) }]);
    }
  });

  // Make functions available globally
  window.removeTicket = removeTicket;
  window.updateTicketField = updateTicketField;
  window.updateSummaryFromSelect = updateSummaryFromSelect;
  window.extractFromTables = extractFromTables;
  window.addEditIconListeners = addEditIconListeners;

  // Popup Editor functionality
  const popupOverlay = document.getElementById('popupOverlay');
  const popupTitle = document.getElementById('popupTitle');
  const popupTextarea = document.getElementById('popupTextarea');
  const popupClose = document.getElementById('popupClose');
  const popupCancel = document.getElementById('popupCancel');
  const popupSave = document.getElementById('popupSave');

  let currentInput = null;
  let currentType = null;

  // Open popup editor
  function openPopupEditor(input, type, title) {
    currentInput = input;
    currentType = type;
    popupTitle.textContent = title;
    popupTextarea.value = input.value;
    popupOverlay.style.display = 'flex';
    popupTextarea.focus();
  }

  // Close popup editor
  function closePopupEditor() {
    popupOverlay.style.display = 'none';
    currentInput = null;
    currentType = null;
  }

  // Save popup editor
  function savePopupEditor() {
    if (currentInput) {
      currentInput.value = popupTextarea.value;
    }
    closePopupEditor();
  }

  // Event listeners for popup
  popupClose.addEventListener('click', closePopupEditor);
  popupCancel.addEventListener('click', closePopupEditor);
  popupSave.addEventListener('click', savePopupEditor);

  // Close popup when clicking overlay
  popupOverlay.addEventListener('click', function(e) {
    if (e.target === popupOverlay) {
      closePopupEditor();
    }
  });

  // Close popup with Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && popupOverlay.style.display === 'flex') {
      closePopupEditor();
    }
  });

  // Add event listeners to edit icons
  function addEditIconListeners() {
    document.querySelectorAll('.edit-icon').forEach(icon => {
      // Remove existing listener to avoid duplicates
      icon.removeEventListener('click', handleEditIconClick);
      icon.addEventListener('click', handleEditIconClick);
    });
  }

  function handleEditIconClick() {
    const input = this.parentElement.querySelector('.table-input');
    const isContent = this.title.includes('ná»™i dung');
    const type = isContent ? 'content' : 'note';
    const title = isContent ? 'Chá»‰nh sá»­a ná»™i dung' : 'Chá»‰nh sá»­a ghi chÃº';
    openPopupEditor(input, type, title);
  }

  // Initialize edit icon listeners
  addEditIconListeners();

  // Re-add listeners when new rows are added
  const originalAddTableRow = addTableRow;
  function addTableRowWithListeners(tableId) {
    originalAddTableRow(tableId);
    window.addEditIconListeners();
  }

  // Override the global addTableRow function
  window.addTableRow = addTableRowWithListeners;

  // ===== JIRA POPUP FUNCTIONALITY =====
  const jiraPopupOverlay = document.getElementById('jiraPopupOverlay');
  const jiraPopupClose = document.getElementById('jiraPopupClose');
  const jiraPopupCancel = document.getElementById('jiraPopupCancel');
  const jiraPopupCreate = document.getElementById('jiraPopupCreate');
  const jiraPopupIssueType = document.getElementById('jiraPopupIssueType');
  const jiraPopupProject = document.getElementById('jiraPopupProject');
  const jiraPopupSummary = document.getElementById('jiraPopupSummary');
  const jiraPopupDescription = document.getElementById('jiraPopupDescription');
  const jiraPopupDueDate = document.getElementById('jiraPopupDueDate');
  const jiraPopupStatus = document.getElementById('jiraPopupStatus');

  let currentJiraRow = null;

  // Open Jira popup
  function openJiraPopup(row) {
    currentJiraRow = row;
    
    // Get project from step 1
    const spaceSelect = document.getElementById('spaceSelect');
    const rawProjectKey = selectedSpaceKey || (spaceSelect && spaceSelect.value) || '';
    const projectKey = rawProjectKey === 'ALL' ? '' : rawProjectKey;
    jiraPopupProject.value = projectKey;
    
    // Get content and note from row
    const cells = row.cells;
    const contentInput = cells[1]?.querySelector('.table-input');
    const noteInput = cells[cells.length - 2]?.querySelector('.table-input');
    
    jiraPopupSummary.value = contentInput ? contentInput.value : '';
    jiraPopupDescription.value = noteInput ? noteInput.value : '';
    jiraPopupDueDate.value = '';
    jiraPopupIssueType.value = 'Task';
    jiraPopupStatus.style.display = 'none';
    
    jiraPopupOverlay.style.display = 'flex';
  }

  // Close Jira popup
  function closeJiraPopup() {
    jiraPopupOverlay.style.display = 'none';
    currentJiraRow = null;
  }

  // Create Jira ticket
  async function createJiraTicketFromPopup() {
    const issueType = jiraPopupIssueType.value;
    const projectKey = jiraPopupProject.value;
    const summary = jiraPopupSummary.value.trim();
    const description = jiraPopupDescription.value.trim();
    const dueDate = jiraPopupDueDate.value;

    if (!projectKey) {
      showJiraPopupStatus('error', 'Vui lÃ²ng chá»n project á»Ÿ BÆ°á»›c 1');
      return;
    }

    if (!summary) {
      showJiraPopupStatus('error', 'Vui lÃ²ng nháº­p summary');
      return;
    }

    jiraPopupCreate.disabled = true;
    jiraPopupCreate.innerHTML = '<i class="fa-solid fa-spinner fa-spin"></i> Äang táº¡o...';
    showJiraPopupStatus('info', 'Äang táº¡o ticket Jira...');

    try {
      const payload = {
        projectKey,
        fields: {
          project: { key: projectKey },
          issuetype: { name: issueType },
          summary,
          description: {
            type: 'doc',
            version: 1,
            content: [{
              type: 'paragraph',
              content: description ? [{ type: 'text', text: description }] : []
            }]
          }
        }
      };

      if (dueDate) {
        payload.fields.duedate = dueDate;
      }

      const response = await fetch('/jira/issues/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await response.json();

      if (response.ok && result.key) {
        showJiraPopupStatus('success', \`Ticket \${result.key} Ä‘Ã£ Ä‘Æ°á»£c táº¡o thÃ nh cÃ´ng!\`);
        setTimeout(() => {
          closeJiraPopup();
        }, 2000);
      } else {
        const errorMsg = result.errors 
          ? Object.values(result.errors).join(', ') 
          : (result.errorMessages ? result.errorMessages.join(', ') : 'Lá»—i khÃ´ng xÃ¡c Ä‘á»‹nh');
        showJiraPopupStatus('error', 'Táº¡o ticket tháº¥t báº¡i: ' + errorMsg);
      }
    } catch (error) {
      showJiraPopupStatus('error', 'Lá»—i: ' + error.message);
    } finally {
      jiraPopupCreate.disabled = false;
      jiraPopupCreate.innerHTML = '<i class="fa-solid fa-plus"></i> Táº¡o Ticket';
    }
  }

  function showJiraPopupStatus(type, message) {
    jiraPopupStatus.style.display = 'block';
    jiraPopupStatus.className = '';
    jiraPopupStatus.textContent = message;
    
    if (type === 'success') {
      jiraPopupStatus.style.background = '#ECFDF3';
      jiraPopupStatus.style.border = '1px solid #D1FADF';
      jiraPopupStatus.style.color = '#1A7F37';
    } else if (type === 'error') {
      jiraPopupStatus.style.background = '#FEF3F2';
      jiraPopupStatus.style.border = '1px solid #FEE4E2';
      jiraPopupStatus.style.color = '#B42318';
    } else {
      jiraPopupStatus.style.background = '#E3F2FD';
      jiraPopupStatus.style.border = '1px solid #BBDEFB';
      jiraPopupStatus.style.color = '#1565C0';
    }
  }

  // Event listeners for Jira popup
  jiraPopupClose.addEventListener('click', closeJiraPopup);
  jiraPopupCancel.addEventListener('click', closeJiraPopup);
  jiraPopupCreate.addEventListener('click', createJiraTicketFromPopup);

  jiraPopupOverlay.addEventListener('click', function(e) {
    if (e.target === jiraPopupOverlay) {
      closeJiraPopup();
    }
  });

  // Add event listeners to create-jira-btn
  function addJiraButtonListeners() {
    document.querySelectorAll('.create-jira-btn').forEach(btn => {
      btn.removeEventListener('click', handleJiraButtonClick);
      btn.addEventListener('click', handleJiraButtonClick);
    });
  }

  function handleJiraButtonClick(e) {
    const row = this.closest('tr');
    if (row) {
      openJiraPopup(row);
    }
  }

  // Initialize
  addJiraButtonListeners();

  // Update addTableRow to include Jira button listeners
  const originalAddTableRow2 = window.addTableRow;
  window.addTableRow = function(tableId) {
    if (originalAddTableRow2) {
      originalAddTableRow2(tableId);
    }
    addJiraButtonListeners();
  };
});
</script>

  <!-- Popup Editor -->
  <div id="popupOverlay" class="popup-overlay">
    <div class="popup-editor">
      <div class="popup-header">
        <h3 id="popupTitle" class="popup-title">Chá»‰nh sá»­a ná»™i dung</h3>
        <button id="popupClose" class="popup-close">&times;</button>
      </div>
      <textarea id="popupTextarea" class="popup-textarea" placeholder="Nháº­p ná»™i dung..."></textarea>
      <div class="popup-actions">
        <button id="popupCancel" class="popup-btn popup-btn-secondary">Há»§y</button>
        <button id="popupSave" class="popup-btn popup-btn-primary">LÆ°u</button>
      </div>
    </div>
  </div>

  <!-- Popup Create Jira Ticket -->
  <div id="jiraPopupOverlay" class="popup-overlay">
    <div class="popup-editor" style="max-width: 700px;">
      <div class="popup-header">
        <h3 class="popup-title"><i class="fa-brands fa-jira"></i> Táº¡o Jira Ticket</h3>
        <button id="jiraPopupClose" class="popup-close">&times;</button>
      </div>
      <div style="display:flex;flex-direction:column;gap:16px;">
        <div>
          <label class="popup-label">Issue Type:</label>
          <select id="jiraPopupIssueType" class="popup-input">
            <option value="Task">Task</option>
            <option value="Story">Story</option>
            <option value="Bug">Bug</option>
            <option value="Epic">Epic</option>
          </select>
        </div>
        <div>
          <label class="popup-label">Project:</label>
          <input id="jiraPopupProject" class="popup-input" readonly />
        </div>
        <div>
          <label class="popup-label">Summary:</label>
          <textarea id="jiraPopupSummary" class="popup-textarea" style="min-height:80px;" placeholder="Nháº­p summary..."></textarea>
        </div>
        <div>
          <label class="popup-label">Description:</label>
          <textarea id="jiraPopupDescription" class="popup-textarea" style="min-height:120px;" placeholder="Nháº­p description..."></textarea>
        </div>
        <div>
          <label class="popup-label">Due Date (optional):</label>
          <input id="jiraPopupDueDate" type="date" class="popup-input" />
        </div>
      </div>
      <div class="popup-actions">
        <button id="jiraPopupCancel" class="popup-btn popup-btn-secondary">Há»§y</button>
        <button id="jiraPopupCreate" class="popup-btn popup-btn-primary">
          <i class="fa-solid fa-plus"></i> Táº¡o Ticket
        </button>
      </div>
      <div id="jiraPopupStatus" style="margin-top:12px;padding:10px;border-radius:8px;display:none;"></div>
    </div>
  </div>

</body>
</html>`;
}

// ============================================================================
// AI RISK MANAGEMENT - JIRA INTEGRATION
// ============================================================================

async function fetchJiraData(env, projectKey) {
  const BASE_JIRA = envJiraBase(env);
  const allIssues = [];
  let startAt = 0;
  const maxResults = 100;
  let hasMore = true;
  
  while (hasMore) {
    // Sá»­ dá»¥ng JQL Ä‘á»ƒ láº¥y issues vá»›i Ä‘áº§y Ä‘á»§ thÃ´ng tin
    const jql = `project = ${projectKey} ORDER BY created DESC`;
    const API_URL = `${BASE_JIRA}/rest/api/3/search`;
    
    try {
      const response = await fetch(`${API_URL}?jql=${encodeURIComponent(jql)}&startAt=${startAt}&maxResults=${maxResults}&fields=summary,issuetype,assignee,status,priority,created,updated,duedate,customfield_10041&expand=changelog`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Accept': 'application/json',
          'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
        }
      });
      
      if (!response.ok) {
        console.error(`Failed to fetch Jira data for ${projectKey}: ${response.status}`);
        break;
      }
      
      const data = await response.json();
      allIssues.push(...data.issues);
      
      hasMore = data.issues.length === maxResults;
      startAt += maxResults;
      
    } catch (error) {
      console.error(`Error fetching Jira data for ${projectKey}:`, error);
      break;
    }
  }
  
  return allIssues;
}

async function fetchJiraProjects(env) {
  const BASE_JIRA = envJiraBase(env);
  const API_URL = `${BASE_JIRA}/rest/api/3/project`;
  
  try {
    const response = await fetch(API_URL, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        'Accept': 'application/json',
        'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
      }
    });
    
    if (!response.ok) {
      console.error(`Failed to fetch Jira projects: ${response.status}`);
      return [];
    }
    
    const data = await response.json();
    return data || [];
  } catch (error) {
    console.error('Error fetching Jira projects:', error);
    return [];
  }
}

async function fetchJiraDataParallel(env, projectKeys) {
  // Äa luá»“ng: fetch táº¥t cáº£ projects cÃ¹ng lÃºc
  const promises = projectKeys.map(projectKey => fetchJiraData(env, projectKey));
  const results = await Promise.all(promises);
  
  // Gá»™p táº¥t cáº£ issues tá»« cÃ¡c projects
  const allIssues = results.flat();
  return allIssues;
}

async function fetchConfluenceData(env) {
  const BASE_CONFLUENCE = envConfluenceBase(env);
  const API_URL = `${BASE_CONFLUENCE}/rest/api/content`;
  
  try {
    const response = await fetch(`${API_URL}?type=page&limit=50&expand=body.storage`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        'Accept': 'application/json',
        'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
      }
    });
    
    if (!response.ok) {
      console.error(`Failed to fetch Confluence data: ${response.status}`);
      return [];
    }
    
    const data = await response.json();
    return data.results || [];
  } catch (error) {
    console.error('Error fetching Confluence data:', error);
    return [];
  }
}

async function analyzeRiskDataWithAI(env, jiraIssues, confluenceData) {
  // PhÃ¢n loáº¡i issues theo type
  const issuesByType = {
    Task: jiraIssues.filter(issue => issue.fields.issuetype?.name === 'Task'),
    Bug: jiraIssues.filter(issue => issue.fields.issuetype?.name === 'Bug'),
    Story: jiraIssues.filter(issue => issue.fields.issuetype?.name === 'Story'),
    Risk: jiraIssues.filter(issue => issue.fields.issuetype?.name === 'Risk')
  };

  // PhÃ¢n loáº¡i theo assignee - cáº£i thiá»‡n viá»‡c Ä‘á»c assignee
  const issuesByAssignee = {};
  jiraIssues.forEach(issue => {
    const assignee = issue.fields.assignee;
    let assigneeName = 'Unassigned';
    
    if (assignee) {
      // Thá»­ cÃ¡c cÃ¡ch khÃ¡c nhau Ä‘á»ƒ láº¥y tÃªn assignee
      assigneeName = assignee.displayName || assignee.name || assignee.emailAddress || assignee.accountId || 'Unknown';
    }
    
    if (!issuesByAssignee[assigneeName]) {
      issuesByAssignee[assigneeName] = [];
    }
    issuesByAssignee[assigneeName].push(issue);
  });

  // Chuáº©n bá»‹ dá»¯ liá»‡u cho AI Grok
  const jiraSummary = {
    totalIssues: jiraIssues.length,
    issuesByType: {
      Task: issuesByType.Task.length,
      Bug: issuesByType.Bug.length,
      Story: issuesByType.Story.length,
      Risk: issuesByType.Risk.length
    },
    issuesByAssignee: Object.keys(issuesByAssignee).map(assignee => ({
      name: assignee,
      count: issuesByAssignee[assignee].length,
      issues: issuesByAssignee[assignee].map(issue => ({
        key: issue.key,
        summary: issue.fields.summary,
        type: issue.fields.issuetype?.name,
        status: issue.fields.status?.name,
        priority: issue.fields.priority?.name
      }))
    })),
    overdueIssues: jiraIssues.filter(issue => {
      const dueDate = issue.fields.duedate;
      if (!dueDate) return false;
      return new Date(dueDate) < new Date() && issue.fields.status?.name !== 'Done';
    }).length,
    recentIssues: jiraIssues.filter(issue => {
      const created = new Date(issue.fields.created);
      const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
      return created >= oneWeekAgo;
    }).length,
    velocity: jiraIssues.filter(issue => 
      issue.fields.issuetype?.name === 'Story' && 
      issue.fields.status?.name === 'Done'
    ).reduce((sum, issue) => {
      const storyPoints = issue.fields.customfield_10041;
      return sum + (parseFloat(storyPoints) || 0);
    }, 0)
  };

  const confluenceSummary = {
    totalPages: confluenceData.length,
    recentPages: confluenceData.filter(page => {
      const created = new Date(page.created);
      const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
      return created >= oneWeekAgo;
    }).length
  };

  // Táº¡o prompt cho AI Grok
  const prompt = `# PHÃ‚N TÃCH Rá»¦I RO Dá»° ÃN Vá»šI AI GROK

Báº¡n lÃ  chuyÃªn gia phÃ¢n tÃ­ch rá»§i ro dá»± Ã¡n. HÃ£y phÃ¢n tÃ­ch dá»¯ liá»‡u tá»« Jira vÃ  Confluence Ä‘á»ƒ Ä‘Æ°a ra Ä‘Ã¡nh giÃ¡ rá»§i ro vÃ  gá»£i Ã½ hÃ nh Ä‘á»™ng.

## Dá»® LIá»†U JIRA:
- Tá»•ng sá»‘ issues: ${jiraSummary.totalIssues}
- PhÃ¢n loáº¡i theo type: Task: ${jiraSummary.issuesByType.Task}, Bug: ${jiraSummary.issuesByType.Bug}, Story: ${jiraSummary.issuesByType.Story}, Risk: ${jiraSummary.issuesByType.Risk}
- Issues quÃ¡ háº¡n: ${jiraSummary.overdueIssues}
- Issues má»›i (7 ngÃ y): ${jiraSummary.recentIssues}
- Velocity (Story Points hoÃ n thÃ nh): ${jiraSummary.velocity}

## PHÃ‚N Bá»” THEO ASSIGNEE:
${jiraSummary.issuesByAssignee.map(assignee => 
  `- ${assignee.name}: ${assignee.count} issues (${assignee.issues.map(i => i.key).join(', ')})`
).join('\n')}

## Dá»® LIá»†U CONFLUENCE:
- Tá»•ng sá»‘ trang: ${confluenceSummary.totalPages}
- Trang má»›i (7 ngÃ y): ${confluenceSummary.recentPages}

## YÃŠU Cáº¦U QUAN TRá»ŒNG:
1. ÄÃ¡nh giÃ¡ má»©c Ä‘á»™ rá»§i ro (Low/Medium/High/Extreme) dá»±a trÃªn dá»¯ liá»‡u THáº¬T
2. TÃ­nh Ä‘iá»ƒm rá»§i ro (1-20) dá»±a trÃªn cÃ¡c yáº¿u tá»‘ THáº¬T:
   - Sá»‘ lÆ°á»£ng issues quÃ¡ háº¡n: ${jiraSummary.overdueIssues}
   - Velocity tháº¥p: ${jiraSummary.velocity}
   - Backlog tÄƒng nhanh: ${jiraSummary.recentIssues}
   - Tá»· lá»‡ Bug cao: ${jiraSummary.issuesByType.Bug}
   - PhÃ¢n bá»• cÃ´ng viá»‡c khÃ´ng Ä‘á»u giá»¯a cÃ¡c assignee
   - Issues khÃ´ng Ä‘Æ°á»£c assign
3. ÄÆ°a ra gá»£i Ã½ hÃ nh Ä‘á»™ng cá»¥ thá»ƒ cho tá»«ng má»©c Ä‘á»™ rá»§i ro
4. PhÃ¢n tÃ­ch nguyÃªn nhÃ¢n vÃ  tÃ¡c Ä‘á»™ng (Bá»Ž QUA cÃ¡c rá»§i ro vá» chi phÃ­)
5. Táº­p trung vÃ o rá»§i ro vá» tiáº¿n Ä‘á»™, cháº¥t lÆ°á»£ng, vÃ  phÃ¢n bá»• nguá»“n lá»±c

## Báº®T BUá»˜C:
- Pháº£i tráº£ vá» JSON há»£p lá»‡
- KhÃ´ng Ä‘Æ°á»£c tráº£ vá» dá»¯ liá»‡u máº«u
- Pháº£i phÃ¢n tÃ­ch dá»¯ liá»‡u tháº­t vÃ  Ä‘Æ°a ra káº¿t quáº£ chÃ­nh xÃ¡c
- Ma tráº­n rá»§i ro pháº£i dá»±a trÃªn dá»¯ liá»‡u tháº­t, khÃ´ng pháº£i máº«u
- Pháº£i phÃ¢n tÃ­ch assignee tháº­t tá»« dá»¯ liá»‡u Jira vÃ  gÃ¡n vÃ o cá»™t "Chá»§ sá»Ÿ há»¯u"
- Pháº£i Ä‘Ã¡nh giÃ¡ rá»§i ro tháº­t vÃ  gÃ¡n vÃ o Ä‘Ãºng má»©c Ä‘á»™:
  * Low (1-4): Rá»§i ro nhá», Ã­t áº£nh hÆ°á»Ÿng
  * Medium (5-9): Rá»§i ro trung bÃ¬nh, áº£nh hÆ°á»Ÿng má»™t pháº§n
  * High (10-16): Rá»§i ro cao, áº£nh hÆ°á»Ÿng Ä‘Ã¡ng ká»ƒ
  * Extreme (>16): Rá»§i ro nghiÃªm trá»ng, áº£nh hÆ°á»Ÿng toÃ n bá»™ dá»± Ã¡n
- Má»—i rá»§i ro pháº£i cÃ³ gá»£i Ã½ xá»­ lÃ½ cá»¥ thá»ƒ vÃ  assignee tháº­t
- Pháº£i phÃ¢n tÃ­ch dá»¯ liá»‡u tháº­t vÃ  Ä‘Ã¡nh giÃ¡ Ä‘iá»ƒm rá»§i ro chÃ­nh xÃ¡c
- QUAN TRá»ŒNG: Pháº£i tráº£ vá» Ä‘áº§y Ä‘á»§ 4 má»©c Ä‘á»™ rá»§i ro trong riskMatrix, khÃ´ng Ä‘Æ°á»£c bá» sÃ³t
- Pháº£i Ä‘Æ°a ra nháº­n Ä‘á»‹nh cá»¥ thá»ƒ cho tá»«ng má»©c Ä‘á»™ dá»±a trÃªn dá»¯ liá»‡u tháº­t
- Báº®T BUá»˜C: Pháº£i phÃ¢n tÃ­ch dá»¯ liá»‡u tháº­t vÃ  Ä‘Æ°a ra nháº­n Ä‘á»‹nh cho 3 cá»™t:
  * Äiá»ƒm: TÃ­nh toÃ¡n Ä‘iá»ƒm rá»§i ro cá»¥ thá»ƒ (1-4, 5-9, 10-16, >16) dá»±a trÃªn dá»¯ liá»‡u tháº­t
  * Má»©c Ä‘á»™: ÄÃ¡nh giÃ¡ má»©c Ä‘á»™ rá»§i ro (Low, Medium, High, Extreme) dá»±a trÃªn phÃ¢n tÃ­ch tháº­t
  * Chi tiáº¿t: MÃ´ táº£ chi tiáº¿t tÃ¬nh tráº¡ng rá»§i ro dá»±a trÃªn dá»¯ liá»‡u tháº­t
- KhÃ´ng Ä‘Æ°á»£c tráº£ vá» dá»¯ liá»‡u máº«u, pháº£i phÃ¢n tÃ­ch dá»¯ liá»‡u tháº­t tá»« Jira vÃ  Confluence

HÃ£y tráº£ vá» káº¿t quáº£ dÆ°á»›i dáº¡ng JSON vá»›i cáº¥u trÃºc:
{
  "riskLevel": "Medium",
  "riskScore": 8,
  "issuesByType": {
    "Task": ${jiraSummary.issuesByType.Task},
    "Bug": ${jiraSummary.issuesByType.Bug},
    "Story": ${jiraSummary.issuesByType.Story},
    "Risk": ${jiraSummary.issuesByType.Risk}
  },
  "riskMatrix": [
    {
      "score": "1-4",
      "level": "Low",
      "detail": "Cháº¥p nháº­n Ä‘Æ°á»£c",
      "description": "Rá»§i ro cÃ³ tÃ¡c Ä‘á»™ng nhá», khÃ´ng áº£nh hÆ°á»Ÿng Ä‘Ã¡ng ká»ƒ Ä‘áº¿n tiáº¿n Ä‘á»™, chi phÃ­ hoáº·c cháº¥t lÆ°á»£ng.",
      "actions": ["Ghi nháº­n trong log rá»§i ro.", "Theo dÃµi Ä‘á»‹nh ká»³ trong cÃ¡c cuá»™c há»p sprint/daily.", "KhÃ´ng cáº§n hÃ nh Ä‘á»™ng ngay láº­p tá»©c.", "CÃ³ thá»ƒ cháº¥p nháº­n náº¿u xáº£y ra."],
      "assignee": "Team Lead hoáº·c PM",
      "priority": "Low"
    },
    {
      "score": "5-9",
      "level": "Medium",
      "detail": "Cáº§n xem xÃ©t",
      "description": "Rá»§i ro cÃ³ thá»ƒ áº£nh hÆ°á»Ÿng Ä‘áº¿n má»™t pháº§n chá»©c nÄƒng, gÃ¢y cháº­m trá»… nháº¹ hoáº·c tÄƒng chi phÃ­ nhá».",
      "actions": ["PhÃ¢n tÃ­ch nguyÃªn nhÃ¢n vÃ  kháº£ nÄƒng xáº£y ra.", "ÄÃ¡nh giÃ¡ tÃ¡c Ä‘á»™ng Ä‘áº¿n cÃ¡c sprint/milestone.", "Giao cho ngÆ°á»i chá»‹u trÃ¡ch nhiá»‡m theo dÃµi.", "XÃ¢y dá»±ng káº¿ hoáº¡ch hÃ nh Ä‘á»™ng phÃ²ng ngá»«a.", "ÄÆ°a vÃ o bÃ¡o cÃ¡o quáº£n lÃ½ rá»§i ro hÃ ng tuáº§n."],
      "assignee": "Scrum Master hoáº·c Team Lead",
      "priority": "Medium"
    },
    {
      "score": "10-16",
      "level": "High",
      "detail": "Cáº§n quáº£n lÃ½",
      "description": "Rá»§i ro cÃ³ thá»ƒ lÃ m cháº­m tiáº¿n Ä‘á»™ Ä‘Ã¡ng ká»ƒ, áº£nh hÆ°á»Ÿng Ä‘áº¿n cháº¥t lÆ°á»£ng, gÃ¢y chi phÃ­ phÃ¡t sinh lá»›n hoáº·c báº¥t mÃ£n tá»« phÃ­a khÃ¡ch hÃ ng.",
      "actions": ["Triá»ƒn khai biá»‡n phÃ¡p giáº£m thiá»ƒu ngay láº­p tá»©c.", "PhÃ¢n cÃ´ng ngÆ°á»i phá»¥ trÃ¡ch xá»­ lÃ½ cá»¥ thá»ƒ (RA - Risk Assignee).", "ÄÆ°a vÃ o há»p vá»›i nhÃ³m quáº£n lÃ½ dá»± Ã¡n.", "Cáº­p nháº­t tiáº¿n Ä‘á»™ xá»­ lÃ½ Ä‘á»‹nh ká»³ (má»—i sprint).", "CÃ¢n nháº¯c Ä‘iá»u chá»‰nh káº¿ hoáº¡ch dá»± Ã¡n."],
      "assignee": "PM hoáº·c Project Manager",
      "priority": "High"
    },
    {
      "score": ">16",
      "level": "Extreme",
      "detail": "KhÃ´ng cháº¥p nháº­n",
      "description": "Rá»§i ro nghiÃªm trá»ng cÃ³ thá»ƒ khiáº¿n dá»± Ã¡n tháº¥t báº¡i, máº¥t dá»¯ liá»‡u, vi pháº¡m phÃ¡p lÃ½ hoáº·c gÃ¢y háº­u quáº£ lá»›n cho khÃ¡ch hÃ ng/doanh nghiá»‡p.",
      "actions": ["KÃ­ch hoáº¡t quy trÃ¬nh xá»­ lÃ½ kháº©n cáº¥p (Risk Contingency Plan).", "BÃ¡o cÃ¡o ngay cho ban Ä‘iá»u hÃ nh/dá»± Ã¡n.", "Táº¡m dá»«ng cÃ¡c hoáº¡t Ä‘á»™ng liÃªn quan náº¿u cáº§n.", "ÄÃ¡nh giÃ¡ láº¡i toÃ n bá»™ káº¿ hoáº¡ch dá»± Ã¡n.", "CÃ³ thá»ƒ thay Ä‘á»•i chiáº¿n lÆ°á»£c, Ä‘á»‘i tÃ¡c, hoáº·c cÃ´ng nghá»‡."],
      "assignee": "Executive Team hoáº·c C-Level",
      "priority": "Critical"
    }
  ],
  "identifiedRisks": [
    {
      "riskName": "TÃªn rá»§i ro cá»¥ thá»ƒ dá»±a trÃªn dá»¯ liá»‡u tháº­t",
      "riskDescription": "MÃ´ táº£ chi tiáº¿t rá»§i ro nÃ y",
      "assignedScore": "5-9",
      "assignedLevel": "Medium",
      "assignedDetail": "Cáº§n xem xÃ©t",
      "assignedAssignee": "TÃªn assignee tháº­t tá»« Jira",
      "assignedPriority": "Medium",
      "specificActions": ["HÃ nh Ä‘á»™ng cá»¥ thá»ƒ cho rá»§i ro nÃ y"],
      "reasoning": "LÃ½ do táº¡i sao rá»§i ro nÃ y Ä‘Æ°á»£c Ä‘Ã¡nh giÃ¡ á»Ÿ má»©c nÃ y"
    }
  ],
  "analysis": {
    "rootCauses": ["PhÃ¢n tÃ­ch nguyÃªn nhÃ¢n tháº­t"],
    "impacts": ["PhÃ¢n tÃ­ch tÃ¡c Ä‘á»™ng tháº­t"],
    "recommendations": ["Khuyáº¿n nghá»‹ dá»±a trÃªn dá»¯ liá»‡u tháº­t"]
  }
}`;

  try {
    const response = await fetch(`${env.XAI_BASE_URL || 'https://api.x.ai/v1'}/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${env.XAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'grok-3-mini',
        messages: [
          {
            role: 'system',
            content: 'Báº¡n lÃ  chuyÃªn gia phÃ¢n tÃ­ch rá»§i ro dá»± Ã¡n vá»›i kinh nghiá»‡m 10+ nÄƒm. Báº®T BUá»˜C pháº£i tráº£ vá» JSON há»£p lá»‡ vá»›i Ä‘áº§y Ä‘á»§ thÃ´ng tin. KhÃ´ng Ä‘Æ°á»£c tráº£ vá» dá»¯ liá»‡u máº«u, pháº£i phÃ¢n tÃ­ch dá»¯ liá»‡u tháº­t vÃ  Ä‘Æ°a ra káº¿t quáº£ chÃ­nh xÃ¡c.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 3000
      })
    });

    if (!response.ok) {
      throw new Error(`AI API error: ${response.status}`);
    }

    const data = await response.json();
    let aiResponse;
    
    try {
      aiResponse = JSON.parse(data.choices[0].message.content);
    } catch (parseError) {
      console.error('Error parsing AI response:', parseError);
      // Fallback: táº¡o response máº·c Ä‘á»‹nh náº¿u AI khÃ´ng tráº£ vá» JSON há»£p lá»‡
      aiResponse = {
        riskLevel: "Medium",
        riskScore: 5,
        issuesByType: jiraSummary.issuesByType,
        riskMatrix: [
          {
            score: "1-4",
            level: "Low",
            detail: "Cháº¥p nháº­n Ä‘Æ°á»£c",
            description: "Rá»§i ro cÃ³ tÃ¡c Ä‘á»™ng nhá», khÃ´ng áº£nh hÆ°á»Ÿng Ä‘Ã¡ng ká»ƒ Ä‘áº¿n tiáº¿n Ä‘á»™, chi phÃ­ hoáº·c cháº¥t lÆ°á»£ng.",
            actions: ["Ghi nháº­n trong log rá»§i ro.", "Theo dÃµi Ä‘á»‹nh ká»³ trong cÃ¡c cuá»™c há»p sprint/daily.", "KhÃ´ng cáº§n hÃ nh Ä‘á»™ng ngay láº­p tá»©c.", "CÃ³ thá»ƒ cháº¥p nháº­n náº¿u xáº£y ra."],
            assignee: "Team Lead hoáº·c PM",
            priority: "Low"
          },
          {
            score: "5-9",
            level: "Medium",
            detail: "Cáº§n xem xÃ©t",
            description: "Rá»§i ro cÃ³ thá»ƒ áº£nh hÆ°á»Ÿng Ä‘áº¿n má»™t pháº§n chá»©c nÄƒng, gÃ¢y cháº­m trá»… nháº¹ hoáº·c tÄƒng chi phÃ­ nhá».",
            actions: ["PhÃ¢n tÃ­ch nguyÃªn nhÃ¢n vÃ  kháº£ nÄƒng xáº£y ra.", "ÄÃ¡nh giÃ¡ tÃ¡c Ä‘á»™ng Ä‘áº¿n cÃ¡c sprint/milestone.", "Giao cho ngÆ°á»i chá»‹u trÃ¡ch nhiá»‡m theo dÃµi.", "XÃ¢y dá»±ng káº¿ hoáº¡ch hÃ nh Ä‘á»™ng phÃ²ng ngá»«a.", "ÄÆ°a vÃ o bÃ¡o cÃ¡o quáº£n lÃ½ rá»§i ro hÃ ng tuáº§n."],
            assignee: "Scrum Master hoáº·c Team Lead",
            priority: "Medium"
          },
          {
            score: "10-16",
            level: "High",
            detail: "Cáº§n quáº£n lÃ½",
            description: "Rá»§i ro cÃ³ thá»ƒ lÃ m cháº­m tiáº¿n Ä‘á»™ Ä‘Ã¡ng ká»ƒ, áº£nh hÆ°á»Ÿng Ä‘áº¿n cháº¥t lÆ°á»£ng, gÃ¢y chi phÃ­ phÃ¡t sinh lá»›n hoáº·c báº¥t mÃ£n tá»« phÃ­a khÃ¡ch hÃ ng.",
            actions: ["Triá»ƒn khai biá»‡n phÃ¡p giáº£m thiá»ƒu ngay láº­p tá»©c.", "PhÃ¢n cÃ´ng ngÆ°á»i phá»¥ trÃ¡ch xá»­ lÃ½ cá»¥ thá»ƒ (RA - Risk Assignee).", "ÄÆ°a vÃ o há»p vá»›i nhÃ³m quáº£n lÃ½ dá»± Ã¡n.", "Cáº­p nháº­t tiáº¿n Ä‘á»™ xá»­ lÃ½ Ä‘á»‹nh ká»³ (má»—i sprint).", "CÃ¢n nháº¯c Ä‘iá»u chá»‰nh káº¿ hoáº¡ch dá»± Ã¡n."],
            assignee: "PM hoáº·c Project Manager",
            priority: "High"
          },
          {
            score: ">16",
            level: "Extreme",
            detail: "KhÃ´ng cháº¥p nháº­n",
            description: "Rá»§i ro nghiÃªm trá»ng cÃ³ thá»ƒ khiáº¿n dá»± Ã¡n tháº¥t báº¡i, máº¥t dá»¯ liá»‡u, vi pháº¡m phÃ¡p lÃ½ hoáº·c gÃ¢y háº­u quáº£ lá»›n cho khÃ¡ch hÃ ng/doanh nghiá»‡p.",
            actions: ["KÃ­ch hoáº¡t quy trÃ¬nh xá»­ lÃ½ kháº©n cáº¥p (Risk Contingency Plan).", "BÃ¡o cÃ¡o ngay cho ban Ä‘iá»u hÃ nh/dá»± Ã¡n.", "Táº¡m dá»«ng cÃ¡c hoáº¡t Ä‘á»™ng liÃªn quan náº¿u cáº§n.", "ÄÃ¡nh giÃ¡ láº¡i toÃ n bá»™ káº¿ hoáº¡ch dá»± Ã¡n.", "CÃ³ thá»ƒ thay Ä‘á»•i chiáº¿n lÆ°á»£c, Ä‘á»‘i tÃ¡c, hoáº·c cÃ´ng nghá»‡."],
            assignee: "Executive Team hoáº·c C-Level",
            priority: "Critical"
          }
        ],
        identifiedRisks: [
          {
            riskName: "PhÃ¢n tÃ­ch dá»±a trÃªn dá»¯ liá»‡u tháº­t tá»« Jira vÃ  Confluence",
            riskDescription: "MÃ´ táº£ chi tiáº¿t rá»§i ro nÃ y dá»±a trÃªn dá»¯ liá»‡u tháº­t",
            assignedScore: "5-9",
            assignedLevel: "Medium",
            assignedDetail: "Cáº§n xem xÃ©t",
            assignedAssignee: "Assignee tá»« dá»¯ liá»‡u tháº­t",
            assignedPriority: "Medium",
            specificActions: ["HÃ nh Ä‘á»™ng cá»¥ thá»ƒ cho rá»§i ro nÃ y"],
            reasoning: "LÃ½ do táº¡i sao rá»§i ro nÃ y Ä‘Æ°á»£c Ä‘Ã¡nh giÃ¡ á»Ÿ má»©c Medium dá»±a trÃªn dá»¯ liá»‡u tháº­t"
          }
        ],
        analysis: {
          rootCauses: ["PhÃ¢n tÃ­ch nguyÃªn nhÃ¢n tháº­t"],
          impacts: ["PhÃ¢n tÃ­ch tÃ¡c Ä‘á»™ng tháº­t"],
          recommendations: ["Khuyáº¿n nghá»‹ dá»±a trÃªn dá»¯ liá»‡u tháº­t"]
        }
      };
    }
    
    return {
      success: true,
      data: aiResponse
    };
  } catch (error) {
    console.error('Error calling AI Grok:', error);
    return {
      success: false,
      error: error.message,
      data: null
    };
  }
}

function calculateRiskLevel(overdueCount, recentCount, velocity) {
  let score = 0;
  
  // Äiá»ƒm dá»±a trÃªn sá»‘ lÆ°á»£ng ticket quÃ¡ háº¡n
  if (overdueCount > 20) score += 8;
  else if (overdueCount > 10) score += 6;
  else if (overdueCount > 5) score += 4;
  else if (overdueCount > 0) score += 2;
  
  // Äiá»ƒm dá»±a trÃªn velocity tháº¥p
  if (velocity < 10) score += 6;
  else if (velocity < 20) score += 4;
  else if (velocity < 30) score += 2;
  
  // Äiá»ƒm dá»±a trÃªn backlog tÄƒng nhanh
  if (recentCount > 50) score += 4;
  else if (recentCount > 30) score += 2;
  
  if (score > 16) return { level: 'Extreme', color: 'red', description: 'KhÃ´ng cháº¥p nháº­n' };
  if (score > 10) return { level: 'High', color: 'red', description: 'Cáº§n quáº£n lÃ½' };
  if (score > 5) return { level: 'Medium', color: 'amber', description: 'Cáº§n xem xÃ©t' };
  return { level: 'Low', color: 'green', description: 'Cháº¥p nháº­n Ä‘Æ°á»£c' };
}

async function generateRiskMatrix(riskAnalysis) {
  const matrix = [
    {
      score: '1-4',
      level: 'Low',
      detail: 'Cháº¥p nháº­n Ä‘Æ°á»£c',
      description: 'Rá»§i ro cÃ³ tÃ¡c Ä‘á»™ng nhá», khÃ´ng áº£nh hÆ°á»Ÿng Ä‘Ã¡ng ká»ƒ Ä‘áº¿n tiáº¿n Ä‘á»™, chi phÃ­ hoáº·c cháº¥t lÆ°á»£ng.',
      actions: [
        'Ghi nháº­n trong log rá»§i ro.',
        'Theo dÃµi Ä‘á»‹nh ká»³ trong cÃ¡c cuá»™c há»p sprint/daily.',
        'KhÃ´ng cáº§n hÃ nh Ä‘á»™ng ngay láº­p tá»©c.',
        'CÃ³ thá»ƒ cháº¥p nháº­n náº¿u xáº£y ra.'
      ]
    },
    {
      score: '5-9',
      level: 'Medium',
      detail: 'Cáº§n xem xÃ©t',
      description: 'Rá»§i ro cÃ³ thá»ƒ áº£nh hÆ°á»Ÿng Ä‘áº¿n má»™t pháº§n chá»©c nÄƒng, gÃ¢y cháº­m trá»… nháº¹ hoáº·c tÄƒng chi phÃ­ nhá».',
      actions: [
        'PhÃ¢n tÃ­ch nguyÃªn nhÃ¢n vÃ  kháº£ nÄƒng xáº£y ra.',
        'ÄÃ¡nh giÃ¡ tÃ¡c Ä‘á»™ng Ä‘áº¿n cÃ¡c sprint/milestone.',
        'Giao cho ngÆ°á»i chá»‹u trÃ¡ch nhiá»‡m theo dÃµi.',
        'XÃ¢y dá»±ng káº¿ hoáº¡ch hÃ nh Ä‘á»™ng phÃ²ng ngá»«a.',
        'ÄÆ°a vÃ o bÃ¡o cÃ¡o quáº£n lÃ½ rá»§i ro hÃ ng tuáº§n.'
      ]
    },
    {
      score: '10-16',
      level: 'High',
      detail: 'Cáº§n quáº£n lÃ½',
      description: 'Rá»§i ro cÃ³ thá»ƒ lÃ m cháº­m tiáº¿n Ä‘á»™ Ä‘Ã¡ng ká»ƒ, áº£nh hÆ°á»Ÿng Ä‘áº¿n cháº¥t lÆ°á»£ng, gÃ¢y chi phÃ­ phÃ¡t sinh lá»›n hoáº·c báº¥t mÃ£n tá»« phÃ­a khÃ¡ch hÃ ng.',
      actions: [
        'Triá»ƒn khai biá»‡n phÃ¡p giáº£m thiá»ƒu ngay láº­p tá»©c.',
        'PhÃ¢n cÃ´ng ngÆ°á»i phá»¥ trÃ¡ch xá»­ lÃ½ cá»¥ thá»ƒ (RA - Risk Assignee).',
        'ÄÆ°a vÃ o há»p vá»›i nhÃ³m quáº£n lÃ½ dá»± Ã¡n.',
        'Cáº­p nháº­t tiáº¿n Ä‘á»™ xá»­ lÃ½ Ä‘á»‹nh ká»³ (má»—i sprint).',
        'CÃ¢n nháº¯c Ä‘iá»u chá»‰nh káº¿ hoáº¡ch dá»± Ã¡n.'
      ]
    },
    {
      score: '>16',
      level: 'Extreme',
      detail: 'KhÃ´ng cháº¥p nháº­n',
      description: 'Rá»§i ro nghiÃªm trá»ng cÃ³ thá»ƒ khiáº¿n dá»± Ã¡n tháº¥t báº¡i, máº¥t dá»¯ liá»‡u, vi pháº¡m phÃ¡p lÃ½ hoáº·c gÃ¢y háº­u quáº£ lá»›n cho khÃ¡ch hÃ ng/doanh nghiá»‡p.',
      actions: [
        'KÃ­ch hoáº¡t quy trÃ¬nh xá»­ lÃ½ kháº©n cáº¥p (Risk Contingency Plan).',
        'BÃ¡o cÃ¡o ngay cho ban Ä‘iá»u hÃ nh/dá»± Ã¡n.',
        'Táº¡m dá»«ng cÃ¡c hoáº¡t Ä‘á»™ng liÃªn quan náº¿u cáº§n.',
        'ÄÃ¡nh giÃ¡ láº¡i toÃ n bá»™ káº¿ hoáº¡ch dá»± Ã¡n.',
        'CÃ³ thá»ƒ thay Ä‘á»•i chiáº¿n lÆ°á»£c, Ä‘á»‘i tÃ¡c, hoáº·c cÃ´ng nghá»‡.'
      ]
    }
  ];
  
  return matrix;
}

function riskRadarHTML() {
  return `<!doctype html>
<html lang="vi"><head>
<meta charset="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>AI Risk Management - BIDV PMO</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
:root{--primary:#009639;--primary-600:#006b2a;--bg:#F4F5F7;--card:#fff;--muted:#6B778C;--radius:14px}
html,body{margin:0;padding:0;background:var(--bg);font:16px/1.45 Inter,system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}
a.back{display:inline-block;margin:24px;text-decoration:none;color:var(--primary);font-weight:600}
.container{max-width:1200px;margin:0 auto;padding:0 16px 32px}
.title{font-size:32px;font-weight:800;margin:0;color:#172B4D}
.subtitle{color:var(--muted);margin:6px 0 24px}
.grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(360px,1fr));gap:20px}
.card{background:var(--card);border-radius:var(--radius);box-shadow:0 8px 20px rgba(0,0,0,.08);padding:18px}
.card h3{margin:0 0 10px;font-size:18px;color:#172B4D;display:flex;align-items:center;gap:10px}
.kpi{display:grid;grid-template-columns:repeat(4,1fr);gap:12px}
.kpi .box{background:#F8FFF9;border:1px solid #E6F4EA;border-radius:10px;padding:12px}
.kpi .val{font-size:24px;font-weight:800;color:var(--primary)}
.badge{display:inline-block;padding:4px 10px;border-radius:999px;font-size:12px;font-weight:600}
.badge.red{background:#FFEBE6;color:#BF2600}
.badge.amber{background:#FFFAEB;color:#8F5E00}
.badge.green{background:#E3FCEF;color:#006644}
.table{width:100%;border-collapse:collapse;margin-top:8px}
.table th{background:#E6F4EA;color:#0b5a2b;text-align:left;padding:8px}
.table td{padding:8px;border-bottom:1px solid #f0f0f0}
.note{color:var(--muted);font-size:14px;margin-top:6px}
canvas{display:block;width:100%;height:320px}
.loading{text-align:center;padding:40px;color:var(--muted)}
.risk-matrix{width:100%;border-collapse:collapse;margin-top:20px}
.risk-matrix th{background:#FFA500;color:#000;text-align:left;padding:12px;font-weight:600}
.risk-matrix td{padding:12px;border:1px solid #ddd;vertical-align:top}
.risk-matrix tr:nth-child(even){background:#f9f9f9}
.project-selector{background:var(--card);border-radius:var(--radius);box-shadow:0 8px 20px rgba(0,0,0,.08);padding:24px;margin-bottom:20px}
.project-selector h3{margin:0 0 16px;font-size:18px;color:#172B4D}
.btn{background:var(--primary);color:white;border:none;border-radius:8px;padding:10px 18px;font-size:14px;font-weight:700;cursor:pointer;transition:all .2s ease}
.btn:hover{background:var(--primary-600)}
.btn:disabled{background:#ccc;cursor:not-allowed}
.btn.secondary{background:#fff;color:var(--primary);border:1px solid #E6F4EA}
.row{display:flex;gap:10px;align-items:center}
.grid-2{display:grid;grid-template-columns:1fr 1fr;gap:12px}
.grid-1{display:grid;grid-template-columns:1fr;gap:12px}
.input, .select, .textarea, .date{width:100%;padding:10px 12px;border:2px solid #E6F4EA;border-radius:10px;font-size:14px;background:#fff}
.textarea{min-height:96px;resize:vertical}
.meta{color:var(--muted);font-size:12px}
.chip{display:inline-block;padding:4px 10px;border:1px solid #E6F4EA;border-radius:999px;background:#fff}
.alert{display:none;margin-top:10px;padding:10px;border-radius:10px}
.alert.success{display:block;background:#ECFDF3;border:1px solid #D1FADF;color:#1A7F37}
.alert.error{display:block;background:#FEF3F2;border:1px solid #FEE4E2;color:#B42318}
pre.code{display:none;background:#0b1220;color:#e5e7eb;padding:10px;border-radius:8px;max-height:180px;overflow:auto;font-size:12px}
.table-wrapper{overflow-x:auto;margin-top:20px}
.ticket-link{display:none;margin-top:16px;padding:14px;background:#E6F4EA;border:1px solid #D1FADF;border-radius:10px;align-items:center;justify-content:space-between}
.ticket-link.show{display:flex}
.ticket-link .text{color:#0b5a2b;font-weight:600}
.ticket-link .btn-link{background:var(--primary);color:white;border:none;border-radius:8px;padding:8px 16px;font-size:13px;font-weight:700;cursor:pointer;text-decoration:none;display:inline-flex;align-items:center;gap:6px}
.ticket-link .btn-link:hover{background:var(--primary-600)}
</style>
</head>
<body>
  <a class="back" href="/">â† Vá» menu PMO</a>
  <div class="container">
    <h1 class="title">AI Risk Management</h1>
    <p class="subtitle">PhÃ¢n tÃ­ch rá»§i ro dá»±a trÃªn dá»¯ liá»‡u thá»±c tá»« Jira vÃ  Confluence. Chá»n dá»± Ã¡n Ä‘á»ƒ báº¯t Ä‘áº§u phÃ¢n tÃ­ch.</p>

    <!-- Project Selector -->
    <div class="project-selector">
      <h3><i class="fas fa-project-diagram"></i> Chá»n dá»± Ã¡n Ä‘á»ƒ phÃ¢n tÃ­ch</h3>
      <div style="margin-bottom:20px">
        <label for="projectSelect" style="display:block;margin-bottom:8px;font-weight:600;color:#172B4D">Chá»n dá»± Ã¡n:</label>
        <select id="projectSelect" class="select">
          <option value="">-- Chá»n dá»± Ã¡n --</option>
          <option value="AIG">AIG - Dá»± Ã¡n AI</option>
          <option value="OTJ">OTJ - ÄÃ o táº¡o Jira</option>
          <option value="DEV">DEV - Dá»± Ã¡n DEVSECOPS</option>
          <option value="ALL">Táº¥t cáº£ dá»± Ã¡n</option>
        </select>
      </div>
      <div style="text-align:center">
        <button class="btn" id="analyzeBtn" disabled>
          <i class="fas fa-brain"></i> PhÃ¢n tÃ­ch vá»›i AI
        </button>
      </div>
    </div>

    <div id="loading" class="loading" style="display:none">
      <i class="fas fa-spinner fa-spin"></i> Äang phÃ¢n tÃ­ch dá»¯ liá»‡u tá»« Jira vÃ  Confluence vá»›i AI...
    </div>

    <div id="content" style="display:none">
      <!-- KPI sáº½ Ä‘Æ°á»£c cáº­p nháº­t báº±ng JavaScript -->
      <div class="kpi" id="kpi-section"></div>

      <div class="grid" style="margin-top:20px">
        <div class="card">
          <h3><i class="fas fa-chart-line"></i> PhÃ¢n tÃ­ch tiáº¿n Ä‘á»™ dá»± Ã¡n</h3>
          <canvas id="progressChart"></canvas>
          <div class="note" id="progressNote">PhÃ¢n tÃ­ch dá»±a trÃªn velocity vÃ  story points hoÃ n thÃ nh.</div>
        </div>

        <div class="card">
          <h3><i class="fas fa-exclamation-triangle"></i> PhÃ¢n bá»‘ má»©c Ä‘á»™ rá»§i ro</h3>
          <canvas id="riskPie"></canvas>
          <div class="table-wrapper">
            <table class="table" id="riskTable"></table>
          </div>
        </div>

        <div class="card">
          <h3><i class="fas fa-bolt"></i> Issues theo loáº¡i</h3>
          <canvas id="issuesChart"></canvas>
        </div>

        <div class="card" style="grid-column:1/-1">
          <h3><i class="fas fa-table"></i> Ma tráº­n quáº£n lÃ½ rá»§i ro (AI Grok)</h3>
          <div class="table-wrapper">
          <table class="risk-matrix" id="riskMatrix">
            <thead>
              <tr>
                <th>Äiá»ƒm</th>
                <th>Má»©c Ä‘á»™</th>
                <th>Chi tiáº¿t</th>
                <th>MÃ´ táº£</th>
                <th>HÃ nh Ä‘á»™ng cá»¥ thá»ƒ</th>
                <th>Chá»§ sá»Ÿ há»¯u (Assignee)</th>
                <th>Æ¯u tiÃªn</th>
                <th>Ticket</th>
              </tr>
            </thead>
            <tbody id="riskMatrixBody"></tbody>
          </table>
          </div>
        </div>

        <!-- Jira Ticket Panel -->
        <div class="card" id="jiraPanel" style="grid-column:1/-1">
          <h3><i class="fas fa-ticket"></i> Táº¡o ticket Jira tá»« rá»§i ro</h3>
          <div class="row" style="margin-bottom:8px">
            <span class="chip">Issue type: <b>Risk</b></span>
            <span class="chip">Assignee: <span id="jiraAssigneeName" class="meta">Project Lead</span></span>
            <span class="chip">Project: <span id="jiraProjectDisplay" class="meta">â€”</span></span>
          </div>
          <div class="grid-2">
            <div>
              <label class="meta" for="jiraProject">Dá»± Ã¡n</label>
              <select id="jiraProject" class="select"></select>
            </div>
            <div>
              <label class="meta" for="jiraDue">Due date</label>
              <input id="jiraDue" type="date" class="date"/>
            </div>
            <div style="grid-column:1/-1">
              <label class="meta" for="jiraRiskDesc">MÃ´ táº£ rá»§i ro (â†’ Summary)</label>
              <textarea id="jiraRiskDesc" class="textarea" placeholder="VÃ­ dá»¥: Nguy cÆ¡ trá»… háº¡n do phá»¥ thuá»™c API Ä‘á»‘i tÃ¡c..."></textarea>
            </div>
            <div style="grid-column:1/-1">
              <label class="meta" for="jiraActions">HÃ nh Ä‘á»™ng cá»¥ thá»ƒ (â†’ Description)</label>
              <textarea id="jiraActions" class="textarea" placeholder="VÃ­ dá»¥: 1) LiÃªn há»‡ Ä‘á»‘i tÃ¡c xÃ¡c nháº­n SLA; 2) Láº­p phÆ°Æ¡ng Ã¡n giáº£m thiá»ƒu..."></textarea>
            </div>
            <div class="grid-2" style="grid-column:1/-1">
              <div>
                <label class="meta" for="jiraSummary">Summary</label>
                <input id="jiraSummary" class="input" placeholder="Tá»± Ä‘á»™ng tá»« mÃ´ táº£ rá»§i ro"/>
              </div>
              <div>
                <label class="meta">Issue type</label>
                <input class="input" value="Risk" disabled/>
              </div>
            </div>
          </div>
          <div class="row" style="margin-top:10px">
            <button id="jiraCreateBtn" class="btn"><i class="fas fa-plus"></i> Táº¡o ticket Jira</button>
            <button id="jiraResetBtn" class="btn secondary">LÃ m má»›i</button>
            <span id="jiraStatus" class="meta"></span>
          </div>
          <div id="jiraMsg" class="alert"></div>
          <div id="jiraTicketLink" class="ticket-link">
            <span class="text"><i class="fas fa-check-circle"></i> Ticket Ä‘Ã£ Ä‘Æ°á»£c táº¡o thÃ nh cÃ´ng!</span>
            <a id="jiraTicketLinkBtn" href="#" target="_blank" class="btn-link">
              <i class="fas fa-external-link-alt"></i> Má»Ÿ ticket
            </a>
          </div>
          <pre id="jiraResp" class="code" aria-live="polite"></pre>
          <input type="hidden" id="jiraAssigneeId"/>
        </div>

      </div>
    </div>
  </div>

<script>
let selectedProject = null;
let __RM_PROJECTS = []; // {key,name,leadAccountId,leadDisplayName}

// ---------- Utils ----------
function escapeHtml(str=''){return String(str).replace(/[&<>"']/g,m=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;', "'":'&#39;' }[m]))}
function normalizeProjects(arr){
  if(!Array.isArray(arr)) return [];
  return arr.map(p=>{
    const lead=p.lead||{};
    return {
      key: p.key || p.projectKey || p.keyName,
      name: p.name || p.projectName || p.displayName || p.title,
      leadAccountId: p.leadAccountId || p.projectLeadAccountId || lead.accountId || p.leadAccountID || '',
      leadDisplayName: p.leadDisplayName || p.projectLeadName || lead.displayName || p.leadName || 'Project Lead'
    };
  }).filter(p=>p.key);
}
function jiraDocFromText(text){
  const t=String(text||'').trim();
  return {type:'doc',version:1,content:[{type:'paragraph',content:t?[{type:'text',text:t}]:[]}]};
}
function isoDateOnly(v){
  if(!v) return '';
  try{const d=typeof v==='string'?new Date(v):v; if(Number.isNaN(+d))return''; const y=d.getFullYear(),m=String(d.getMonth()+1).padStart(2,'0'),dd=String(d.getDate()).padStart(2,'0'); return \`\${y}-\${m}-\${dd}\`;}catch{return''}
}

// Sá»¬A Láº I: HÃ m láº¥y chi tiáº¿t dá»± Ã¡n tá»« Jira API
async function getProjectDetails(projectKey) {
  try {
    // Sá»­ dá»¥ng endpoint má»›i Ä‘á»ƒ láº¥y chi tiáº¿t project bao gá»“m project lead
    const response = await fetch(\`/jira/project-details?projectKey=\${projectKey}\`);
    if (!response.ok) return null;
    
    const data = await response.json();
    if (!data.ok) return null;
    
    // Tráº£ vá» thÃ´ng tin project vá»›i lead
    return {
      key: data.key,
      name: data.name,
      lead: data.lead
    };
  } catch (error) {
    console.error(\`Error fetching project details for \${projectKey}:\`, error);
    return null;
  }
}

// Sá»¬A Láº I: HÃ m láº¥y thÃ´ng tin user tá»« Jira API
async function getUserDetails(accountId) {
  try {
    // Sá»­ dá»¥ng endpoint proxy Ä‘Ã£ tá»“n táº¡i
    const response = await fetch(\`/jira-user?accountId=\${accountId}\`);
    if (!response.ok) return null;
    
    const data = await response.json();
    if (!data.success) return null;
    
    return data.user;
  } catch (error) {
    console.error(\`Error fetching user details for \${accountId}:\`, error);
    return null;
  }
}

// ---------- App boot ----------
document.addEventListener('DOMContentLoaded', async function() {
  await loadJiraProjects(); // giá»¯ nguyÃªn API, chá»‰ má»Ÿ rá»™ng lÆ°u lead
  refreshJiraProjectsUI();  // Ä‘á»• vÃ o panel Jira

  // Project selection logic (cáº­p nháº­t)
  const projectSelect = document.getElementById('projectSelect');
  const analyzeBtn = document.getElementById('analyzeBtn');
  projectSelect.addEventListener('change', async function() {
    selectedProject = this.value;
    analyzeBtn.disabled = !selectedProject;
    
    // THAY Äá»”I: ThÃªm async vÃ  xá»­ lÃ½ láº¥y project lead
    if (selectedProject && selectedProject !== 'ALL') {
      let pj = __RM_PROJECTS.find(p => p.key === selectedProject);
      
      // Náº¿u khÃ´ng tÃ¬m tháº¥y project lead, thá»­ láº¥y chi tiáº¿t dá»± Ã¡n
      if (pj && (!pj.leadAccountId || !pj.leadDisplayName)) {
        const projectDetails = await getProjectDetails(selectedProject);
        if (projectDetails && projectDetails.lead) {
          pj.leadAccountId = projectDetails.lead.accountId;
          pj.leadDisplayName = projectDetails.lead.displayName;
          
          // Cáº­p nháº­t thÃ´ng tin trong __RM_PROJECTS
          const index = __RM_PROJECTS.findIndex(p => p.key === selectedProject);
          if (index !== -1) {
            __RM_PROJECTS[index] = pj;
          }
        }
      }
      
      if (pj) setJiraProject(pj.key, pj.leadAccountId, pj.leadDisplayName);
    }
  });

  // Analyze button click (giá»¯ nguyÃªn)
  analyzeBtn.addEventListener('click', async function() {
    if (!selectedProject) return;
    document.getElementById('loading').style.display = 'block';
    document.getElementById('content').style.display = 'none';
    try {
      const response = await fetch('/risk-data?project=' + selectedProject);
      const data = await response.json();
      if (data.success) {
        displayRiskData(data.data);
      } else {
        document.getElementById('loading').innerHTML = '<i class="fas fa-exclamation-triangle"></i> Lá»—i khi táº£i dá»¯ liá»‡u: ' + (data.error||'');
      }
    } catch (error) {
      document.getElementById('loading').innerHTML = '<i class="fas fa-exclamation-triangle"></i> Lá»—i káº¿t ná»‘i: ' + error.message;
    }
  });

  bindJiraPanel(); // gáº¯n event cho panel Jira
});

// ---------- Existing logic (kept) ----------
async function loadJiraProjects() {
  try {
    const response = await fetch('/jira-projects');
    const data = await response.json();

    // Chuáº©n hÃ³a vÃ  lÆ°u Ä‘á»ƒ panel Jira dÃ¹ng
    const rawList = data && data.projects ? data.projects : data;
    __RM_PROJECTS = normalizeProjects(rawList);

    if (data.success && data.projects && data.projects.length > 0) {
      const projectSelect = document.getElementById('projectSelect');
      projectSelect.innerHTML = '<option value="">-- Chá»n dá»± Ã¡n --</option>';
      data.projects.forEach(project => {
        const option = document.createElement('option');
        option.value = project.key;
        option.textContent = project.key + ' - ' + project.name;
        projectSelect.appendChild(option);
      });
      const allOption = document.createElement('option');
      allOption.value = 'ALL';
      allOption.textContent = 'Táº¥t cáº£ dá»± Ã¡n';
      projectSelect.appendChild(allOption);
    } else {
      console.error('Failed to load projects:', data.error);
    }
  } catch (error) {
    console.error('Error loading projects:', error);
  }
  return __RM_PROJECTS;
}

function displayRiskData(data) {
  document.getElementById('loading').style.display = 'none';
  document.getElementById('content').style.display = 'block';
  updateKPIFromAI(data);
  updateChartsFromAI(data);
  updateRiskMatrixFromAI(data);
}

function updateKPIFromAI(data) {
  const kpiHtml = 
    '<div class="box">' +
      '<div>Dá»± Ã¡n Ä‘Æ°á»£c phÃ¢n tÃ­ch</div>' +
      '<div class="val">' + (data.selectedProject || 'N/A') + '</div>' +
      '<span class="badge green">ÄÃ£ chá»n</span>' +
    '</div>' +
    '<div class="box">' +
      '<div>Tá»•ng Issues</div>' +
      '<div class="val">' + (data.jiraIssuesCount || 0) + '</div>' +
      '<span class="badge ' + ((data.jiraIssuesCount || 0) > 100 ? 'red' : (data.jiraIssuesCount || 0) > 50 ? 'amber' : 'green') + '">' + ((data.jiraIssuesCount || 0) > 100 ? 'Cao' : (data.jiraIssuesCount || 0) > 50 ? 'Trung bÃ¬nh' : 'Tháº¥p') + '</span>' +
    '</div>' +
    '<div class="box">' +
      '<div>Trang Confluence</div>' +
      '<div class="val">' + (data.confluencePagesCount || 0) + '</div>' +
      '<span class="badge green">CÃ³ dá»¯ liá»‡u</span>' +
    '</div>' +
    '<div class="box">' +
      '<div>Má»©c Ä‘á»™ rá»§i ro (AI)</div>' +
      '<div class="val">' + (data.riskLevel || 'N/A') + '</div>' +
      '<span class="badge ' + (data.riskLevel === 'High' || data.riskLevel === 'Extreme' ? 'red' : data.riskLevel === 'Medium' ? 'amber' : 'green') + '">' + (data.riskScore || 0) + ' Ä‘iá»ƒm</span>' +
    '</div>';
  document.getElementById('kpi-section').innerHTML = kpiHtml;
}

function updateChartsFromAI(data) {
  const progressCtx = document.getElementById('progressChart').getContext('2d');
  const riskScore = data.riskScore || 0;
  new Chart(progressCtx, {
    type: 'line',
    data: {
      labels: ['Tuáº§n 1', 'Tuáº§n 2', 'Tuáº§n 3', 'Tuáº§n 4'],
      datasets: [{
        label: 'Risk Score',
        data: [riskScore * 0.8, riskScore * 0.9, riskScore * 1.1, riskScore],
        borderColor: riskScore > 15 ? '#FF6B6B' : riskScore > 10 ? '#FFE66D' : '#4ECDC4',
        backgroundColor: riskScore > 15 ? 'rgba(255, 107, 107, 0.1)' : riskScore > 10 ? 'rgba(255, 230, 109, 0.1)' : 'rgba(78, 205, 196, 0.1)',
        tension: 0.3
      }]
    },
    options: { responsive: true, plugins: { legend: { display: true } } }
  });

  const riskCtx = document.getElementById('riskPie').getContext('2d');
  const riskLevel = data.riskLevel || 'Low';
  const riskData = { 'Low':[1,0,0], 'Medium':[0,1,0], 'High':[0,0,1], 'Extreme':[1,0,0] };
  new Chart(riskCtx, {
    type: 'doughnut',
    data: {
      labels: ['Cao', 'Trung bÃ¬nh', 'Tháº¥p'],
      datasets: [{ data: riskData[riskLevel] || [0,0,1], backgroundColor: ['#FF6B6B','#FFE66D','#4ECDC4'] }]
    },
    options: { responsive: true, plugins: { legend: { position:'bottom' } } }
  });

  const issuesCtx = document.getElementById('issuesChart').getContext('2d');
  const issuesByType = data.issuesByType || {};
  new Chart(issuesCtx, {
    type: 'bar',
    data: {
      labels: ['Task','Bug','Story','Risk'],
      datasets: [{ label:'Sá»‘ lÆ°á»£ng', data:[issuesByType.Task||0,issuesByType.Bug||0,issuesByType.Story||0,issuesByType.Risk||0], backgroundColor:['#4ECDC4','#FF6B6B','#45B7D1','#FFA07A'] }]
    },
    options: { responsive: true, plugins: { legend: { display:false } }, scales: { y: { beginAtZero:true } } }
  });
}

// ---------- Risk Matrix + Jira create button ----------
function updateRiskMatrixFromAI(data) {
  const tbody = document.getElementById('riskMatrixBody');
  if (!data) {
    tbody.innerHTML = '<tr><td colspan="8">KhÃ´ng cÃ³ dá»¯ liá»‡u ma tráº­n rá»§i ro</td></tr>';
    return;
  }
  let html = '';

  if (data.riskMatrix && Array.isArray(data.riskMatrix)) {
    html += data.riskMatrix.map(item => {
      const actions = Array.isArray(item.actions) ? item.actions.join('\\n') : (item.actions || '');
      const desc = item.description || item.detail || '';
      return (
      '<tr>' +
        '<td>' + escapeHtml(item.score || 'N/A') + '</td>' +
        '<td>' + escapeHtml(item.level || 'N/A') + '</td>' +
        '<td>' + escapeHtml(item.detail || 'N/A') + '</td>' +
        '<td>' + escapeHtml(desc || 'N/A') + '</td>' +
        '<td><ul style="margin:0;padding-left:20px">' +
          (Array.isArray(item.actions) ? item.actions.map(a=>'<li>'+escapeHtml(a)+'</li>').join('') : '<li>KhÃ´ng cÃ³ hÃ nh Ä‘á»™ng</li>') +
        '</ul></td>' +
        '<td>' + escapeHtml(item.assignee || 'N/A') + '</td>' +
        '<td><span class="badge ' + (item.priority === 'Critical' ? 'red' : item.priority === 'High' ? 'red' : item.priority === 'Medium' ? 'amber' : 'green') + '">' + escapeHtml(item.priority || 'Low') + '</span></td>' +
        '<td><button class="btn" data-create-jira="1" data-desc="'+escapeHtml(desc)+'" data-actions="'+escapeHtml(actions)+'">Táº¡o</button></td>' +
      '</tr>');
    }).join('');
  }

  if (data.identifiedRisks && Array.isArray(data.identifiedRisks)) {
    html += data.identifiedRisks.map(risk => {
      const actions = Array.isArray(risk.specificActions) ? risk.specificActions.join('\\n') : (risk.specificActions || '');
      const desc = (risk.riskDescription || risk.riskName || '');
      return (
      '<tr style="background-color:#f8f9fa;border-left:4px solid #007bff">' +
        '<td><strong>' + escapeHtml(risk.assignedScore || 'N/A') + '</strong></td>' +
        '<td><strong>' + escapeHtml(risk.assignedLevel || 'N/A') + '</strong></td>' +
        '<td><strong>' + escapeHtml(risk.assignedDetail || 'N/A') + '</strong></td>' +
        '<td><strong>' + escapeHtml(risk.riskName || 'N/A') + '</strong><br><small>' + escapeHtml(risk.riskDescription || '') + '</small><br><small style="color:#666">LÃ½ do: ' + escapeHtml(risk.reasoning || '') + '</small></td>' +
        '<td><ul style="margin:0;padding-left:20px">' +
          (Array.isArray(risk.specificActions) ? risk.specificActions.map(a=>'<li>'+escapeHtml(a)+'</li>').join('') : '<li>KhÃ´ng cÃ³ hÃ nh Ä‘á»™ng</li>') +
        '</ul></td>' +
        '<td><strong>' + escapeHtml(risk.assignedAssignee || 'N/A') + '</strong></td>' +
        '<td><span class="badge ' + (risk.assignedPriority === 'Critical' ? 'red' : risk.assignedPriority === 'High' ? 'red' : risk.assignedPriority === 'Medium' ? 'amber' : 'green') + '">' + escapeHtml(risk.assignedPriority || 'Low') + '</span></td>' +
        '<td><button class="btn" data-create-jira="1" data-desc="'+escapeHtml(desc)+'" data-actions="'+escapeHtml(actions)+'">Táº¡o</button></td>' +
      '</tr>');
    }).join('');
  }

  tbody.innerHTML = html || '<tr><td colspan="8">KhÃ´ng cÃ³ dá»¯ liá»‡u ma tráº­n rá»§i ro</td></tr>';
  bindRowCreateButtons();
}

function bindRowCreateButtons(){
  const buttons = document.querySelectorAll('#riskMatrixBody [data-create-jira="1"]');
  buttons.forEach(btn=>{
    btn.addEventListener('click', ()=>{
      const desc = btn.getAttribute('data-desc') || '';
      const actions = btn.getAttribute('data-actions') || '';
      const prefill = {
        projectKey: (selectedProject && selectedProject!=='ALL') ? selectedProject : (document.getElementById('jiraProject').value || ''),
        description: desc,
        actions: actions,
        dueDate: ''
      };
      setJiraPrefill(prefill);
      document.getElementById('jiraPanel').scrollIntoView({behavior:'smooth',block:'center'});
    });
  });
}

// ---------- Jira Panel (UI only, backend unchanged) ----------
function refreshJiraProjectsUI(){
  const sel = document.getElementById('jiraProject');
  if(!sel) return;
  sel.innerHTML = __RM_PROJECTS.map(p=>'<option value="'+escapeHtml(p.key)+'" data-lead="'+escapeHtml(p.leadAccountId||'')+'" data-leadname="'+escapeHtml(p.leadDisplayName||'')+'">'+escapeHtml(p.key)+' - '+escapeHtml(p.name||p.key)+'</option>').join('');
  const pre = (selectedProject && selectedProject!=='ALL') ? selectedProject : (__RM_PROJECTS[0] && __RM_PROJECTS[0].key);
  if (pre) sel.value = pre;
  const pj = __RM_PROJECTS.find(p=>p.key===sel.value);
  setJiraProject(pj?.key||'', pj?.leadAccountId||'', pj?.leadDisplayName||'Project Lead');
}

function setJiraProject(key, leadId, leadName){
  const sel = document.getElementById('jiraProject');
  const nameEl = document.getElementById('jiraAssigneeName');
  const idEl = document.getElementById('jiraAssigneeId');
  const disp = document.getElementById('jiraProjectDisplay');
  if (sel && key) sel.value = key;
  if (disp) disp.textContent = key || 'â€”';
  if (nameEl) nameEl.textContent = leadName || 'Project Lead';
  if (idEl) idEl.value = leadId || '';
}

function setJiraPrefill(p={}){
  if (p.projectKey){
    const pj = __RM_PROJECTS.find(x=>x.key===p.projectKey);
    setJiraProject(p.projectKey, pj?.leadAccountId||'', pj?.leadDisplayName||'Project Lead');
  }
  const desc = document.getElementById('jiraRiskDesc');
  const act = document.getElementById('jiraActions');
  const sum = document.getElementById('jiraSummary');
  const due = document.getElementById('jiraDue');
  if (desc && p.description!=null) desc.value = p.description;
  if (act && p.actions!=null) act.value = p.actions;
  if (due && p.dueDate!=null) due.value = isoDateOnly(p.dueDate);
  if (sum){ sum.dataset.touched = ''; sum.value = (desc && desc.value) ? desc.value.trim() : (p.description||''); }
}

function bindJiraPanel(){
  const sel = document.getElementById('jiraProject');
  const due = document.getElementById('jiraDue');
  const desc = document.getElementById('jiraRiskDesc');
  const act = document.getElementById('jiraActions');
  const sum = document.getElementById('jiraSummary');
  const createBtn = document.getElementById('jiraCreateBtn');
  const resetBtn  = document.getElementById('jiraResetBtn');

  // sync summary from description (cho phÃ©p sá»­a tay)
  desc.addEventListener('input', ()=>{ if(!sum.dataset.touched){ sum.value = (desc.value||'').trim(); } });
  sum.addEventListener('input', ()=>{ sum.dataset.touched = '1'; });

  sel.addEventListener('change', ()=>{
    const opt = sel.selectedOptions[0];
    const leadId = opt ? (opt.getAttribute('data-lead')||'') : '';
    const leadName = opt ? (opt.getAttribute('data-leadname')||'Project Lead') : 'Project Lead';
    setJiraProject(sel.value, leadId, leadName);
  });

  createBtn.addEventListener('click', createJiraIssue);
  resetBtn.addEventListener('click', ()=>{
    clearJiraFeedback();
    act.value = '';
    sum.dataset.touched = '';
    sum.value = (desc.value||'').trim();
    due.value = '';
  });
}

function clearJiraFeedback(){
  const msg = document.getElementById('jiraMsg');
  const resp = document.getElementById('jiraResp');
  const st = document.getElementById('jiraStatus');
  const ticketLink = document.getElementById('jiraTicketLink');
  if (msg){ msg.style.display='none'; msg.textContent=''; msg.className='alert'; }
  if (resp){ resp.style.display='none'; resp.textContent=''; }
  if (st){ st.textContent=''; }
  if (ticketLink){ ticketLink.classList.remove('show'); }
}

function showJiraMsg(kind,text){
  const msg = document.getElementById('jiraMsg');
  if (!msg) return;
  msg.className = 'alert ' + kind;
  msg.textContent = text || '';
  msg.style.display = text ? 'block' : 'none';
}
function showJiraResp(obj){
  const pre = document.getElementById('jiraResp');
  if (!pre) return;
  pre.style.display='block';
  try{ pre.textContent = JSON.stringify(obj,null,2); }catch{ pre.textContent = String(obj); }
}
function setJiraStatus(t){ const st = document.getElementById('jiraStatus'); if(st) st.textContent = t||''; }

// Sá»¬A Láº I: HÃ m táº¡o ticket Jira
async function createJiraIssue(){
  clearJiraFeedback();
  const projectKey = document.getElementById('jiraProject').value;
  const summary = (document.getElementById('jiraSummary').value||'').trim() || (document.getElementById('jiraRiskDesc').value||'').trim();
  const descriptionText = (document.getElementById('jiraActions').value||'').trim();
  const dueDate = isoDateOnly(document.getElementById('jiraDue').value);
  let assigneeAccountId = (document.getElementById('jiraAssigneeId').value||'').trim();

  if (!projectKey || !summary){
    showJiraMsg('error','Vui lÃ²ng chá»n Project vÃ  nháº­p mÃ´ táº£ rá»§i ro / Summary.');
    return;
  }

  // Náº¿u khÃ´ng cÃ³ assignee, thá»­ láº¥y project lead
  if (!assigneeAccountId) {
    setJiraStatus('Äang tÃ¬m Project Lead...');
    try {
      const projectDetails = await getProjectDetails(projectKey);
      if (projectDetails && projectDetails.lead) {
        assigneeAccountId = projectDetails.lead.accountId;
        document.getElementById('jiraAssigneeId').value = assigneeAccountId;
        document.getElementById('jiraAssigneeName').textContent = projectDetails.lead.displayName;
      }
    } catch (error) {
      console.error('Error fetching project lead:', error);
    }
  }

  const payload = {
    projectKey,
    issueType: 'Risk',
    summary,
    description: descriptionText,
    dueDate,
    assigneeAccountId,
    fields: {
      project: { key: projectKey },
      issuetype: { name: 'Risk' },
      summary,
      description: jiraDocFromText(descriptionText),
      duedate: dueDate || undefined,
      assignee: assigneeAccountId ? { accountId: assigneeAccountId } : undefined
    }
  };

  const btn = document.getElementById('jiraCreateBtn');
  const old = btn.textContent;
  btn.disabled = true; 
  btn.textContent = 'Äang táº¡o...';
  setJiraStatus('Äang táº¡o ticket Jira...');
  
  try {
    const res = await fetch('/jira/issues/create', {
      method:'POST',
      headers:{ 'Content-Type':'application/json' },
      body: JSON.stringify(payload)
    });
    
    const json = await res.json().catch(() => ({}));
    
    if (!res.ok) {
      // Xá»­ lÃ½ lá»—i chi tiáº¿t
      let errorMsg = 'Táº¡o ticket tháº¥t báº¡i.';
      
      if (json.errors) {
        errorMsg += ' Lá»—i: ' + Object.values(json.errors).join(', ');
      } else if (json.errorMessages) {
        errorMsg += ' ' + json.errorMessages.join(', ');
      }
      
      showJiraMsg('error', errorMsg);
      showJiraResp(json);
    } else {
      // Hiá»ƒn thá»‹ key ticket vÃ  reset form
      showJiraMsg('success', \`ÄÃ£ táº¡o ticket Jira thÃ nh cÃ´ng. Key: \${json.key || 'N/A'}\`);
      showJiraResp(json);
      
      // Hiá»ƒn thá»‹ nÃºt má»Ÿ link ticket
      if (json.browseUrl) {
        const ticketLink = document.getElementById('jiraTicketLink');
        const ticketLinkBtn = document.getElementById('jiraTicketLinkBtn');
        if (ticketLink && ticketLinkBtn) {
          ticketLinkBtn.href = json.browseUrl;
          ticketLink.classList.add('show');
        }
      }
      
      // Reset form
      document.getElementById('jiraRiskDesc').value = '';
      document.getElementById('jiraActions').value = '';
      document.getElementById('jiraSummary').value = '';
      document.getElementById('jiraDue').value = '';
    }
  } catch (e) {
    showJiraMsg('error', 'Lá»—i khi gá»i API: ' + (e && e.message ? e.message : e));
  } finally {
    btn.disabled = false; 
    btn.textContent = old; 
    setJiraStatus('');
  }
}
</script>
</body></html>`;
}



function chatBotHTML() {
  return `<!doctype html>
<html lang="vi">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>AI Chat Bot â€” PMO</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0"></script>
<style>
  /* ====== Tokens Ä‘á»“ng bá»™ trang chá»§ ====== */
  :root{
    --bg:#f6f8fb;
    --card:#ffffff;
    --soft:#f1f5f9;
    --text:#111827;
    --muted:#6b7280;
    --line:#e5e7eb;
    --primary:#009639;
    --primary-600:#006b2a;
    --accent:#22c55e;
    --radius:16px;
    --shadow:0 10px 28px rgba(16,24,40,.10);
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{margin:0;background:var(--bg);color:var(--text);font:16px/1.6 "Inter",system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}

  /* Header dÃ­nh (giá»‘ng home) */
  .top{position:sticky;top:0;z-index:10;background:rgba(255,255,255,.88);backdrop-filter:saturate(1.05) blur(10px);border-bottom:1px solid var(--line)}
  .top .row{max-width:1240px;margin:0 auto;padding:12px 20px;display:flex;align-items:center;justify-content:space-between;gap:12px}
  .brand{display:flex;align-items:center;gap:10px}
  .logo{width:42px;height:42px;border-radius:10px;background:#e7f6ee;display:grid;place-items:center;overflow:hidden}
  .logo img{max-width:100%;max-height:100%}
  .title{margin:0;font-size:18px;font-weight:800;letter-spacing:.2px}
  .nav{display:flex;gap:8px;flex-wrap:wrap}
  .nav a{padding:8px 12px;border-radius:10px;text-decoration:none;color:#0f172a;border:1px solid transparent}
  .nav a:hover{background:#f0fdf4;border-color:#dcfce7}

  .container{max-width:1240px;margin:0 auto;padding:22px 20px}

  /* Hero giá»‘ng home */
  .hero{
    display:grid;grid-template-columns:1.1fr .9fr;gap:22px;
    background:
      radial-gradient(600px 220px at 10% -10%, #dcfce7 0%, transparent 60%),
      radial-gradient(600px 220px at 90% -20%, #e0f2fe 0%, transparent 60%),
      var(--card);
    border:1px solid var(--line);border-radius:22px;padding:22px;box-shadow:var(--shadow);
  }
  .hero h2{margin:0 0 8px;font-size:32px;letter-spacing:.2px}
  .hero p{margin:0;color:var(--muted)}
  .cta{margin-top:16px;display:flex;flex-wrap:wrap;gap:10px}
  .btn{appearance:none;border:0;border-radius:12px;padding:12px 16px;font-weight:800;cursor:pointer;display:inline-flex;gap:8px;align-items:center}
  .btn.primary{background:linear-gradient(90deg,var(--primary),var(--primary-600));color:#fff}
  .btn.ghost{background:#f8fafc;border:1px solid var(--line);color:#0f172a}
  .btn.ghost:hover{background:#eef2f7}
  .muted{color:var(--muted)}

  .hero-side{display:grid;grid-template-columns:1fr 1fr;gap:12px}
  .gcard{background:var(--card);border:1px solid var(--line);border-radius:14px;padding:14px;display:flex;gap:10px;align-items:flex-start}
  .gcard i{color:var(--primary)}
  .gtitle{font-weight:700}
  .gcard small{display:block;color:var(--muted)}

  /* LÆ°á»›i chÃ­nh: Sidebar + Chat */
  .chat-grid{display:grid;grid-template-columns:320px 1fr;gap:16px;margin-top:20px}
  .panel{background:var(--card);border:1px solid var(--line);border-radius:18px;padding:16px;box-shadow:var(--shadow)}
  .panel h3{margin:0 0 10px;font-size:16px;font-weight:800;color:#0f172a}
  .split{height:1px;background:var(--line);margin:12px 0}

  /* Sidebar */
  .sidebar-title{font-size:14px;font-weight:800;margin:8px 0;color:#0f172a}
  .sidebar-item{padding:10px;border-radius:12px;margin-bottom:8px;cursor:pointer;display:flex;align-items:center;gap:10px;border:1px solid var(--line);background:var(--soft)}
  .sidebar-item:hover{background:#eef2f7}
  .sidebar-icon{width:32px;height:32px;border-radius:8px;display:flex;align-items:center;justify-content:center;background:#fff;border:1px solid var(--line);color:var(--primary)}
  .select{width:100%;padding:10px;border:1px solid var(--line);border-radius:12px;background:#fff}

  /* Zalo card */
  .zalo-card{margin:12px 0;background:#fff;border:1px solid var(--line);border-radius:12px;padding:12px}
  .zalo-card h4{margin:0 0 8px;font-size:14px}
  .zalo-qr{width:100%;height:auto;border-radius:8px;border:1px solid var(--line)}
  .zalo-row{display:flex;gap:8px;margin-top:8px}
  .zalo-row select{flex:1;padding:10px;border:1px solid var(--line);border-radius:12px;background:#fff}
  .zalo-row button{padding:10px 12px;border-radius:12px;border:1px solid var(--line);background:#fff;cursor:pointer}
  .zalo-row button:hover{background:#f7fafc}

  /* Chat khu vá»±c pháº£i */
  .chat-card{display:flex;flex-direction:column;min-height:520px}
  .chat-messages{flex:1;overflow:auto;background:var(--soft);border-radius:12px;padding:16px}
  .message{margin-bottom:14px;display:flex;gap:12px}
  .message.user{flex-direction:row-reverse}
  .message-avatar{width:36px;height:36px;border-radius:10px;display:flex;align-items:center;justify-content:center;background:var(--primary);color:white;flex-shrink:0}
  .message.bot .message-avatar{background:#94a3b8}
  .message-content{max-width:70%;padding:12px 16px;border-radius:14px;background:#fff;border:1px solid var(--line)}
  .message.user .message-content{background:#E3F2FD;border-color:#bfdbfe}
  .message.bot .message-content{background:#F0F4FA;border-color:#e5e7eb}
  .message-time{font-size:12px;color:var(--muted);margin-top:4px}

  .message-form{margin-top:12px;display:flex;flex-direction:column;gap:12px}
  .input-container{display:flex;gap:10px}
  .message-input{flex:1;border:1px solid var(--line);border-radius:999px;padding:12px 18px;font-size:16px;background:#fff;outline:none}
  .send-button{width:48px;height:48px;border-radius:50%;background:linear-gradient(90deg,var(--primary),var(--primary-600));color:white;border:none;display:flex;align-items:center;justify-content:center;cursor:pointer}
  .send-button:disabled{background:#cbd5e1;cursor:not-allowed}

  /* Káº¿t quáº£ JQL + báº£ng + biá»ƒu Ä‘á»“ */
  .result-container{margin-top:12px;background:#fff;border:1px solid var(--line);border-radius:12px;padding:12px;display:none}
  .result-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}
  .result-title{font-weight:800}
  .result-actions{display:flex;gap:8px}
  .action-button{display:flex;align-items:center;gap:6px;padding:8px 12px;border-radius:10px;border:1px solid var(--line);background:white;cursor:pointer;font-size:14px}
  .action-button:hover{background:#f8fafc}
  .action-button.zalo{color:#0068FF}

  .jql-display{background:#f8fafc;border:1px solid var(--line);border-radius:10px;padding:10px;margin-bottom:10px;font-family:ui-monospace,Menlo,Consolas,monospace;font-size:14px;position:relative}
  .jql-display pre{margin:0;white-space:pre-wrap;word-break:break-word}
  .jql-copy{position:absolute;top:8px;right:8px;background:#fff;border:1px solid var(--line);border-radius:8px;padding:6px 10px;cursor:pointer;font-size:12px}
  .jql-copy:hover{background:#eef2f7}

  .table-container{overflow:auto;max-height:50vh}
  .result-table{width:100%;border-collapse:collapse}
  .result-table th{background:#E6F4EA;color:#0b5a2b;text-align:left;padding:10px;font-weight:700;font-size:14px}
  .result-table td{padding:10px;border-bottom:1px solid #f0f0f0;font-size:14px}
  .result-table tr:hover{background:#f8fafc}

  .chart-toolbar{display:flex;flex-wrap:wrap;gap:8px;align-items:center;background:#fff;border:1px dashed var(--line);border-radius:10px;padding:10px;margin-top:10px}
  .charts-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:12px;margin-top:10px}
  .chart-card{background:#fff;border:1px solid var(--line);border-radius:12px;padding:10px;min-height:300px}
  .chart-title{font-weight:700;font-size:14px;margin:0 0 8px}
  .chart-wrap{height:260px}
  .chart-wrap canvas{width:100% !important;height:100% !important;display:block}

  .loading{display:inline-block;width:16px;height:16px;border:2px solid #f3f3f3;border-top-color:var(--primary);border-radius:50%;display:none;animation:spin 1s linear infinite;margin-right:8px}
  @keyframes spin{to{transform:rotate(360deg)}}

  .footer{padding:18px 10px;text-align:center;color:var(--muted)}

  @media (max-width:1100px){
    .hero{grid-template-columns:1fr}
    .chat-grid{grid-template-columns:1fr}
  }
</style>
</head>
<body>
  <!-- Header Ä‘á»“ng bá»™ -->
  <header class="top">
    <div class="row">
      <div class="brand">
        <div class="logo">
          <img src="https://z-cdn-media.chatglm.cn/files/1a1ab789-5429-451f-bb53-65e73a39e4bd_pasted_image_1758225809744.png"
               alt="BIDV" onerror="this.style.display='none'">
        </div>
        <h1 class="title">CÃ´ng cá»¥ AI cho PMO</h1>
      </div>
      <nav class="nav">
        <a href="/"><i class="fa-solid fa-home"></i>&nbsp;Trang chá»§</a>
        <a href="/meetingnote"><i class="fa-solid fa-microphone-lines"></i>&nbsp;Meeting Note</a>
        <a href="/risk"><i class="fa-solid fa-triangle-exclamation"></i>&nbsp;Risk Management</a>
        <a href="/chatbot"><i class="fa-solid fa-robot"></i>&nbsp;Chat Bot</a>
      </nav>
    </div>
  </header>

  <main class="container">
    <!-- Hero -->
    <section class="hero">
      <div>
        <h2>AI Chat Bot</h2>
        <p>Há»i Jira/Confluence báº±ng ngÃ´n ngá»¯ tá»± nhiÃªn, tá»± sinh JQL, hiá»ƒn thá»‹ báº£ng vÃ  biá»ƒu Ä‘á»“, gá»­i káº¿t quáº£ qua Zalo.</p>
        <div class="cta">
          <a href="#chat" class="btn primary"><i class="fa-solid fa-message"></i>Báº¯t Ä‘áº§u trÃ² chuyá»‡n</a>
          <a href="/" class="btn ghost"><i class="fa-solid fa-house"></i>Vá» menu PMO</a>
        </div>
      </div>
      <div class="hero-side">
        <div class="gcard">
          <i class="fa-solid fa-wand-magic-sparkles"></i>
          <div>
            <div class="gtitle">Tá»± hiá»ƒu cÃ¢u há»i Jira</div>
            <small>PhÃ¡t hiá»‡n ngá»¯ cáº£nh Jira, sinh JQL chuáº©n vÃ  gá»i API tÃ¬m kiáº¿m.</small>
          </div>
        </div>
        <div class="gcard">
          <i class="fa-solid fa-chart-pie"></i>
          <div>
            <div class="gtitle">Báº£ng & biá»ƒu Ä‘á»“ tá»©c thÃ¬</div>
            <small>NhÃ³m theo Status/Priority/Assignee; cá»™tâ€“trÃ²nâ€“Ä‘Æ°á»ng.</small>
          </div>
        </div>
      </div>
    </section>

    <!-- Chat layout -->
    <section id="chat" class="chat-grid">
      <!-- Sidebar -->
      <div class="panel">
        <div class="sidebar-title">Chá»n Project</div>
        <div class="sidebar-item" style="background:transparent;padding:0;border:none">
          <select id="projectSelect" class="select">
            <option value="TRADE" selected>TRADE â€” BÃ¡o cÃ¡o thá»‹ trÆ°á»ng chá»©ng khoÃ¡n</option>
            <option value="AI">AI â€” Dá»± Ã¡n AI</option>
            <option value="JIRAMON">JIRAMON â€” Dá»± Ã¡n Jiramon</option>
          </select>
        </div>

        <div class="split"></div>

        <div class="sidebar-title">QuÃ©t QR Ä‘á»ƒ chat Zalo</div>
        <div class="zalo-card">
          <img class="zalo-qr" src="https://i.ibb.co/k6PngkKP/Screenshot-2025-09-30-095421.png" alt="QR Zalo Bot">
          <div style="font-size:12px;color:#6B778C;margin-top:6px">GÃµ <code>/name TÃªnCá»§aBáº¡n</code> Ä‘á»ƒ Ä‘áº·t tÃªn.</div>
          <div class="zalo-row">
            <button id="btnLoadContacts" title="Táº£i danh báº¡"><i class="fas fa-rotate"></i></button>
            <select id="zaloContactSelect">
              <option value="">-- ChÆ°a táº£i danh báº¡ --</option>
            </select>
          </div>
        </div>

        <div class="split"></div>

        <div class="sidebar-title">CÃ¢u há»i nhanh</div>
        <div class="sidebar-item example-query" data-query="TÃ´i muá»‘n xem táº¥t cáº£ cÃ¡c task Ä‘ang trong tráº¡ng thÃ¡i 'In Progress'">
          <div class="sidebar-icon"><i class="fas fa-tasks"></i></div>
          <div>
            <div style="font-weight:700">Task Ä‘ang thá»±c hiá»‡n</div>
            <div style="font-size:13px;color:#6B778C">CÃ¡c task In Progress</div>
          </div>
        </div>
        <div class="sidebar-item example-query" data-query="Hiá»ƒn thá»‹ cÃ¡c task Ä‘ang assign cho tÃ´i">
          <div class="sidebar-icon"><i class="fas fa-user"></i></div>
          <div>
            <div style="font-weight:700">Task cá»§a tÃ´i</div>
            <div style="font-size:13px;color:#6B778C">Assignee = báº¡n</div>
          </div>
        </div>
        <div class="sidebar-item example-query" data-query="TÃ¬m cÃ¡c task cÃ³ priority lÃ  High vÃ  chÆ°a Ä‘Æ°á»£c giáº£i quyáº¿t">
          <div class="sidebar-icon"><i class="fas fa-exclamation-triangle"></i></div>
          <div>
            <div style="font-weight:700">Æ¯u tiÃªn cao</div>
            <div style="font-size:13px;color:#6B778C">Priority = High</div>
          </div>
        </div>
        <div class="sidebar-item example-query" data-query="Láº¥y cÃ¡c task trong dá»± Ã¡n TRADE vÃ  cÃ³ status lÃ  'To Do'">
          <div class="sidebar-icon"><i class="fas fa-project-diagram"></i></div>
          <div>
            <div style="font-weight:700">Cáº§n lÃ m</div>
            <div style="font-size:13px;color:#6B778C">Status = To Do</div>
          </div>
        </div>
        <div class="sidebar-item example-query" data-query="TÃ´i muá»‘n biáº¿t cÃ³ bao nhiÃªu task Ä‘ang bá»‹ trá»… deadline">
          <div class="sidebar-icon"><i class="fas fa-clock"></i></div>
          <div>
            <div style="font-weight:700">Trá»… deadline</div>
            <div style="font-size:13px;color:#6B778C">Thá»‘ng kÃª overdue</div>
          </div>
        </div>
      </div>

      <!-- Chat main -->
      <div class="panel chat-card">
        <div class="chat-messages" id="chatMessages">
          <div class="message bot">
            <div class="message-avatar"><i class="fas fa-robot"></i></div>
            <div>
              <div class="message-content">
                Xin chÃ o! TÃ´i cÃ³ thá»ƒ giÃºp báº¡n há»i Jira/Confluence, sinh JQL tá»± Ä‘á»™ng, hiá»ƒn thá»‹ báº£ng & biá»ƒu Ä‘á»“, vÃ  gá»­i káº¿t quáº£ qua Zalo. Nháº­p cÃ¢u há»i Ä‘á»ƒ báº¯t Ä‘áº§u.
              </div>
              <div class="message-time">â€”</div>
            </div>
          </div>
        </div>

        <div class="message-form">
          <div class="input-container">
            <input type="text" class="message-input" id="messageInput" placeholder="Nháº­p cÃ¢u há»i cá»§a báº¡n...">
            <button class="send-button" id="sendButton"><i class="fas fa-paper-plane"></i></button>
          </div>

          <!-- Káº¿t quáº£ -->
          <div class="result-container" id="resultContainer">
            <div class="result-header">
              <div class="result-title">Káº¿t quáº£ tÃ¬m kiáº¿m</div>
              <div class="result-actions">
                <button class="action-button" id="closeResults"><i class="fas fa-times"></i> ÄÃ³ng</button>
                <button class="action-button zalo" id="zaloButton"><i class="fab fa-zalo"></i> Gá»­i qua Zalo</button>
              </div>
            </div>

            <div class="jql-display">
              <pre id="jqlQuery"></pre>
              <button class="jql-copy" id="copyJql">Sao chÃ©p JQL</button>
            </div>

            <div class="table-container" style="margin-top:12px">
              <table class="result-table" id="resultTable">
                <thead>
                  <tr>
                    <th>ID</th><th>TiÃªu Ä‘á»</th><th>Tráº¡ng thÃ¡i</th><th>Æ¯u tiÃªn</th><th>Assignee</th>
                  </tr>
                </thead>
                <tbody id="resultTableBody"></tbody>
              </table>
            </div>

            <!-- Chart controls -->
            <div class="chart-toolbar">
              <label><input type="checkbox" id="toggleCharts" checked> Hiá»ƒn thá»‹ biá»ƒu Ä‘á»“</label>
              <span style="width:1px;height:18px;background:#e5e7eb"></span>
              <label><input type="checkbox" id="optBar" checked> Column</label>
              <label><input type="checkbox" id="optPie" checked> Pie</label>
              <label><input type="checkbox" id="optLine"> Line</label>
              <span style="width:1px;height:18px;background:#e5e7eb"></span>
              <label>NhÃ³m theo:
                <select id="groupBySelect" class="select" style="max-width:180px;padding:6px 10px">
                  <option value="status">Tráº¡ng thÃ¡i</option>
                  <option value="priority">Æ¯u tiÃªn</option>
                  <option value="assignee">Assignee</option>
                </select>
              </label>
              <span style="width:1px;height:18px;background:#e5e7eb"></span>
              <label><input type="checkbox" id="optDataLabels" checked> Data labels</label>
              <button class="action-button" id="btnRenderCharts" style="margin-left:auto"><i class="fas fa-sync"></i> Render</button>
            </div>

            <!-- Charts -->
            <div class="charts-grid" id="chartsGrid" style="display:block">
              <div class="chart-card" id="barCard">
                <div class="chart-title">Column Chart</div>
                <div class="chart-wrap"><canvas id="barChart"></canvas></div>
              </div>
              <div class="chart-card" id="pieCard">
                <div class="chart-title">Pie Chart</div>
                <div class="chart-wrap"><canvas id="pieChart"></canvas></div>
              </div>
              <div class="chart-card" id="lineCard" style="display:none">
                <div class="chart-title">Line Chart</div>
                <div class="chart-wrap"><canvas id="lineChart"></canvas></div>
              </div>
            </div>

          </div>
        </div>
      </div>
    </section>
  </main>

  <footer class="footer">Â© 2025 BIDV â€” CÃ´ng cá»¥ AI cho PMO</footer>

<script>
document.addEventListener("DOMContentLoaded", async function(){
  const chatMessages = document.getElementById('chatMessages');
  const messageInput = document.getElementById('messageInput');
  const sendButton = document.getElementById('sendButton');
  const resultContainer = document.getElementById('resultContainer');
  const jqlQuery = document.getElementById('jqlQuery');
  const copyJql = document.getElementById('copyJql');
  const resultTableBody = document.getElementById('resultTableBody');
  const projectSelect = document.getElementById('projectSelect');

  // Chart controls
  const toggleCharts = document.getElementById('toggleCharts');
  const chartsGrid = document.getElementById('chartsGrid');
  const optBar = document.getElementById('optBar');
  const optPie = document.getElementById('optPie');
  const optLine = document.getElementById('optLine');
  const groupBySelect = document.getElementById('groupBySelect');
  const optDataLabels = document.getElementById('optDataLabels');
  const btnRenderCharts = document.getElementById('btnRenderCharts');

  // Zalo UI
  const btnLoadContacts = document.getElementById('btnLoadContacts');
  const zaloContactSelect = document.getElementById('zaloContactSelect');

  // State
  window.__projectKey = (projectSelect && projectSelect.value) ? projectSelect.value : 'TRADE';
  let lastResultsCache = null; // Ä‘á»ƒ gá»­i qua Zalo & váº½ chart
  let barChart, pieChart, lineChart;

  // Register datalabels once
  if (window.Chart && window.ChartDataLabels) { Chart.register(ChartDataLabels); }

  if (projectSelect) {
    projectSelect.addEventListener('change', () => {
      window.__projectKey = projectSelect.value || 'TRADE';
    });
  }

  // Load danh báº¡
  async function loadContacts(){
    try{
      zaloContactSelect.innerHTML = '<option value="">Äang táº£i danh báº¡...</option>';
      const res = await fetch('/zalo/contacts/list').then(r=>r.json());
      if (!res.ok) throw new Error(res.error || 'contacts list failed');
      const contacts = res.contacts || [];
      if (contacts.length === 0) {
        zaloContactSelect.innerHTML = '<option value="">ChÆ°a cÃ³ liÃªn há»‡ â€” gÃµ /name trong Zalo</option>';
        return;
      }
      zaloContactSelect.innerHTML = contacts.map(c =>
        '<option value="'+escapeHtml(c.display_name)+'">'+escapeHtml(c.display_name)+'</option>'
      ).join('');
    }catch(e){
      zaloContactSelect.innerHTML = '<option value="">Lá»—i táº£i danh báº¡</option>';
      console.error(e);
    }
  }
  if (btnLoadContacts) btnLoadContacts.addEventListener('click', loadContacts);

  // VÃ­ dá»¥ query click
  const exampleQueries = document.querySelectorAll('.example-query');
  exampleQueries.forEach(q => q.addEventListener('click', () => {
    const t = q.getAttribute('data-query');
    messageInput.value = t;
    sendMessage();
  }));

  function addUserMessage(message) {
    const el = document.createElement('div');
    el.className = 'message user';
    el.innerHTML = \`
      <div class="message-avatar"><i class="fas fa-user"></i></div>
      <div>
        <div class="message-content">\${escapeHtml(message)}</div>
        <div class="message-time">\${nowHM()}</div>
      </div>\`;
    chatMessages.appendChild(el);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }
  function addBotMessage(message) {
    const el = document.createElement('div');
    el.className = 'message bot';
    el.innerHTML = \`
      <div class="message-avatar"><i class="fas fa-robot"></i></div>
      <div>
        <div class="message-content">\${message}</div>
        <div class="message-time">\${nowHM()}</div>
      </div>\`;
    chatMessages.appendChild(el);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  function showResults(results) {
    resultTableBody.innerHTML = '';
    if (!results || results.length === 0) { lastResultsCache = []; renderCharts(); return; }
    lastResultsCache = results;
    results.forEach(r => {
      const row = document.createElement('tr');
      row.innerHTML = \`
        <td><a href="https://kvmon-dev.atlassian.net/browse/\${escapeHtml(r.key)}" target="_blank">\${escapeHtml(r.key)}</a></td>
        <td>\${escapeHtml(r.summary)}</td>
        <td>\${escapeHtml(r.status)}</td>
        <td>\${escapeHtml(r.priority)}</td>
        <td>\${escapeHtml(r.assignee || 'Unassigned')}</td>\`;
      resultTableBody.appendChild(row);
    });
    // Render/refresh charts every time we have new results
    renderCharts();
  }

  // ==== Chart helpers ====
  function destroyCharts(){
    [barChart, pieChart, lineChart].forEach(ch => { try{ if (ch) ch.destroy(); }catch{} });
    barChart = pieChart = lineChart = null;
  }

  function aggregate(results, key){
    const map = new Map();
    results.forEach(r=>{
      let k = (r[key] || 'Unknown');
      if (k == null || k === '') k = 'Unknown';
      const s = String(k);
      map.set(s, (map.get(s) || 0) + 1);
    });
    const labels = Array.from(map.keys());
    const data = Array.from(map.values());
    return { labels, data };
  }

  function renderCharts(){
    // Toggle whole charts area
    chartsGrid.style.display = toggleCharts.checked ? 'grid' : 'none';
    if (!toggleCharts.checked) { destroyCharts(); return; }

    const by = groupBySelect.value || 'status';
    const useLabels = !!optDataLabels.checked;

    // Guard
    const results = Array.isArray(lastResultsCache) ? lastResultsCache : [];
    const agg = aggregate(results, by);

    // Show/hide each card
    document.getElementById('barCard').style.display = optBar.checked ? 'block' : 'none';
    document.getElementById('pieCard').style.display = optPie.checked ? 'block' : 'none';
    document.getElementById('lineCard').style.display = optLine.checked ? 'block' : 'none';

    // Recreate charts fresh
    destroyCharts();

    const commonOpts = {
      responsive: true,
      maintainAspectRatio: false,
      plugins:{
        legend:{ position:'bottom' },
        datalabels: useLabels ? {
          display: true,
          formatter: (v)=> v,
          anchor: 'end',
          align: 'top',
          clamp: true,
          padding: 2,
          font: { size: 11, weight: '600' }
        } : { display:false }
      },
      scales: { y: { beginAtZero: true } }
    };

    if (optBar.checked) {
      barChart = new Chart(document.getElementById('barChart'), {
        type: 'bar',
        data: { labels: agg.labels, datasets: [{ label: 'Sá»‘ lÆ°á»£ng', data: agg.data }] },
        options: commonOpts
      });
    }
    if (optPie.checked) {
      const pieOpts = JSON.parse(JSON.stringify(commonOpts));
      delete pieOpts.scales;
      pieChart = new Chart(document.getElementById('pieChart'), {
        type: 'pie',
        data: { labels: agg.labels, datasets: [{ label:'Tá»· lá»‡', data: agg.data }] },
        options: pieOpts
      });
    }
    if (optLine.checked) {
      lineChart = new Chart(document.getElementById('lineChart'), {
        type: 'line',
        data: { labels: agg.labels, datasets: [{ label: 'Sá»‘ lÆ°á»£ng', data: agg.data, tension:.25 }] },
        options: commonOpts
      });
    }
  }

  [toggleCharts, optBar, optPie, optLine, groupBySelect, optDataLabels].forEach(el=>{
    el.addEventListener('change', renderCharts);
  });
  btnRenderCharts.addEventListener('click', renderCharts);

  // Chat send
  function sendMessage() {
    const message = messageInput.value.trim();
    if (!message) return;
    addUserMessage(message);
    messageInput.value = '';
    sendButton.disabled = true;
    addBotMessage('<span class="loading"></span>Äang xá»­ lÃ½ cÃ¢u há»i cá»§a báº¡n...');

    fetch('/chat-process', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message, projectKey: window.__projectKey })
    })
    .then(r => r.json())
    .then(data => {
      const loadingMessage = chatMessages.lastElementChild;
      if (loadingMessage && loadingMessage.querySelector('.loading')) loadingMessage.remove();

      if (data.success) {
        addBotMessage(escapeHtml(data.response || ''));
        jqlQuery.textContent = data.jql || '';
        showResults(data.results);
        if (data.jql && data.results && data.results.length > 0) {
          resultContainer.style.display = 'block';
        } else {
          resultContainer.style.display = 'none';
        }
      } else {
        const msg = (data && (data.error || data.details)) ? (data.error + (data.details ? (' (' + data.details + ')') : '')) : 'Xin lá»—i, tÃ´i khÃ´ng thá»ƒ xá»­ lÃ½ cÃ¢u há»i cá»§a báº¡n.';
        addBotMessage('<b>Lá»—i:</b> ' + escapeHtml(msg));
        resultContainer.style.display = 'none';
        showResults([]);
      }
      sendButton.disabled = false;
    })
    .catch(err => {
      const loadingMessage = chatMessages.lastElementChild;
      if (loadingMessage && loadingMessage.querySelector('.loading')) loadingMessage.remove();
      addBotMessage('ÄÃ£ xáº£y ra lá»—i khi xá»­ lÃ½ cÃ¢u há»i cá»§a báº¡n. Vui lÃ²ng thá»­ láº¡i sau.');
      sendButton.disabled = false;
      resultContainer.style.display = 'none';
      showResults([]);
      console.error(err);
    });
  }

  const closeResults = document.getElementById('closeResults');
  if (closeResults) closeResults.addEventListener('click', () => { resultContainer.style.display = 'none'; });

  copyJql.addEventListener('click', () => {
    const text = jqlQuery.textContent || '';
    if (!text.trim()) return;
    navigator.clipboard.writeText(text)
      .then(() => { copyJql.textContent = 'ÄÃ£ sao chÃ©p!'; setTimeout(() => { copyJql.textContent = 'Sao chÃ©p JQL'; }, 2000); })
      .catch(err => { console.error('Failed to copy: ', err); });
  });

  sendButton.addEventListener('click', sendMessage);
  messageInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') { sendMessage(); } });

  // Gá»­i qua Zalo: dÃ¹ng ngÆ°á»i nháº­n Ä‘Ã£ chá»n + prompt ná»™i dung
  const zaloButton = document.getElementById('zaloButton');
  if (zaloButton) zaloButton.addEventListener('click', async () => {
    try {
      const receiver = zaloContactSelect && zaloContactSelect.value ? zaloContactSelect.value : '';
      if (!receiver) {
        alert('HÃ£y báº¥m "Táº£i danh báº¡" vÃ  chá»n ngÆ°á»i nháº­n trÆ°á»›c khi gá»­i.');
        return;
      }
      const defaultMsg = makeDefaultZaloMessage();
      const text = prompt('Nháº­p ná»™i dung tin nháº¯n:', defaultMsg);
      if (text == null || !text.trim()) return; // user cancel

      const res = await fetch('/zalo/push-by-name', {
        method: 'POST',
        headers: { 'content-type':'application/json' },
        body: JSON.stringify({ display_name: receiver, text })
      }).then(r=>r.json());
      if (!res.ok) { alert('Gá»­i tháº¥t báº¡i: ' + (res.error || '')); return; }
      alert('ÄÃ£ gá»­i tin nháº¯n qua Zalo!');
    } catch (e) {
      alert('Lá»—i gá»­i Zalo: ' + String(e));
    }
  });

  function makeDefaultZaloMessage(){
    try{
      const lines = [];
      if (jqlQuery.textContent && jqlQuery.textContent.trim()) {
        lines.push('JQL: ' + jqlQuery.textContent.trim());
      }
      if (lastResultsCache && lastResultsCache.length) {
        const top = lastResultsCache.slice(0, 5).map(r => \`\${r.key} â€” \${r.summary} [\${r.status}|\${r.priority}]\`);
        lines.push('Top káº¿t quáº£:'); lines.push(...top);
        if (lastResultsCache.length > 5) lines.push(\`â€¦ vÃ  \${lastResultsCache.length - 5} káº¿t quáº£ khÃ¡c.\`);
      }
      return lines.join('\\n') || 'Káº¿t quáº£ tá»« Chat Bot PMO';
    }catch{ return 'Káº¿t quáº£ tá»« Chat Bot PMO'; }
  }

  function nowHM(){ const n=new Date(); return n.toLocaleTimeString('vi-VN',{hour:'2-digit',minute:'2-digit'}); }
  function escapeHtml(t){ const m={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'}; return String(t).replace(/[&<>"']/g, ch => m[ch]); }

  // Auto load contacts
  loadContacts();
});
</script>
</body>
</html>`;
}


// ============================================================================
// 8) ROUTER (export default)
// ============================================================================
export default {
  async fetch(req, env, ctx) {
    const url = new URL(req.url);
    
    // Endpoint for OCR extraction
    if (req.method === 'POST' && url.pathname === '/ocr-extract') {
      try {
        const { imageUrl, imageKey, model } = await safeJson(req);
        if (!imageUrl && !imageKey) return json({ ok: false, error: 'Missing imageUrl or imageKey' }, 400);

        // Táº¡o public URL tá»« key náº¿u cáº§n
        const publicUrl = imageUrl || (() => {
          if (!env.R2_PUBLIC_BASE_URL) throw new StepError('config', 'Missing R2_PUBLIC_BASE_URL');
          const base = env.R2_PUBLIC_BASE_URL.replace(/\/$/, '');
          const safeKey = String(imageKey).split('/').map(encodeURIComponent).join('/');
          return `${base}/${safeKey}`;
        })();

        if (!env.XAI_API_KEY) return json({ ok: false, error: 'Missing XAI_API_KEY' }, 500);

        // Sá»­ dá»¥ng Ä‘Ãºng base URL cho Grok
        const base = env.XAI_BASE_URL || 'https://api.x.ai/v1';

        // Sá»­ dá»¥ng model há»— trá»£ áº£nh, máº·c Ä‘á»‹nh lÃ  grok-4-fast-non-reasoning náº¿u khÃ´ng chá»‰ Ä‘á»‹nh
        const modelToUse = model || 'grok-4-fast-non-reasoning';

        const body = {
          model: modelToUse,
          messages: [
            {
              role: 'user',
              content: [
                {
                  type: 'text',
                  text: 'TrÃ­ch xuáº¥t táº¥t cáº£ Ä‘á»‹a chá»‰ email tá»« áº£nh nÃ y. Äá»‹nh dáº¡ng káº¿t quáº£ lÃ  má»™t danh sÃ¡ch email, má»—i email trÃªn má»™t dÃ²ng, khÃ´ng cÃ³ vÄƒn báº£n khÃ¡c.'
                },
                {
                  type: 'image_url',
                  image_url: {
                    url: publicUrl
                  }
                }
              ]
            }
          ],
          temperature: 0.2,
          max_tokens: 1000
        };

        // Sá»­ dá»¥ng endpoint /chat/completions thay vÃ¬ /responses
        const r = await fetch(`${base}/chat/completions`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${env.XAI_API_KEY}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(body)
        });

        if (!r.ok) {
          const errorText = await r.text();
          throw new StepError('grok', `xAI ${r.status}: ${errorText}`);
        }

        const data = await r.json();

        let result = { text: '', emails: '' };

        try {
          if (data.choices && data.choices.length > 0 && data.choices[0].message) {
            const content = data.choices[0].message.content;
            if (typeof content === 'string') {
              result.text = content;

              // TrÃ­ch xuáº¥t email tá»« ná»™i dung
              const emailRegex = /[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi;
              const emailMatches = content.match(emailRegex);
              if (emailMatches) {
                result.emails = Array.from(new Set(emailMatches.map(email => email.toLowerCase()))).join('; ');
              }
            }
          }
        } catch (e) {
          console.error('Error parsing Grok response:', e);
          console.error('Grok response:', data);
        }

        return json({ ok: true, ...result });
      } catch (err) {
        const e = toStepError(err);
        console.error('OCR extraction error:', e);
        return json({ ok: false, error: e.message }, 500);
      }
    }
    
    // Endpoint for getting Jira Account ID
    if (req.method === 'POST' && url.pathname === '/jira-get-account-id') {
      try {
        const { email } = await safeJson(req);
        if (!email) return json({ ok: false, error: 'Missing email' }, 400);

        const BASE_JIRA = envJiraBase(env);
        const API_URL = `${BASE_JIRA}/rest/api/3/user/search`;

        console.log(`Searching for Jira user with email: ${email}`);

        const r = await fetch(`${API_URL}?query=${encodeURIComponent(email)}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json; charset=utf-8',
            'Accept': 'application/json',
            'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
          }
        });

        if (!r.ok) {
          const errorText = await r.text();
          console.error('Jira API error:', errorText);
          throw new StepError('jira', `Jira ${r.status}: ${errorText}`);
        }

        const data = await r.json();
        console.log('Jira API response:', data);

        if (data && data.length > 0) {
          // Return the first match's account ID
          const user = data[0];
          console.log(`Found user: ${user.displayName}, accountId: ${user.accountId}`);
          return json({
            ok: true,
            accountId: user.accountId,
            displayName: user.displayName,
            emailAddress: user.emailAddress
          });
        } else {
          // No user found
          console.log(`No user found with email: ${email}`);
          return json({
            ok: true,
            accountId: null,
            message: `No user found with email: ${email}`
          });
        }
      } catch (err) {
        const e = toStepError(err);
        console.error('Jira get account ID error:', e);
        return json({ ok: false, error: e.message }, 500);
      }
    }
    
    // Endpoint for creating Jira issue (Risk module)
    if (req.method === 'POST' && url.pathname === '/jira/issues/create') {
      try {
        const payload = await safeJson(req);
        const { projectKey, fields } = payload;

        if (!projectKey) {
          return json({ ok: false, error: 'Missing projectKey' }, 400);
        }

        const BASE_JIRA = envJiraBase(env);
        const API_URL = `${BASE_JIRA}/rest/api/3/issue`;

        console.log('Creating Jira issue with payload:', JSON.stringify(payload, null, 2));

        // Make API call to Jira
        const response = await fetch(API_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json; charset=utf-8',
            'Accept': 'application/json',
            'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
          },
          body: JSON.stringify({ fields })
        });

        const responseText = await response.text();
        console.log('Jira response:', { status: response.status, text: responseText });

        if (!response.ok) {
          console.error('Jira API error:', { status: response.status, text: responseText, url: API_URL });
          let errorData;
          try {
            errorData = JSON.parse(responseText);
          } catch {
            errorData = { errorMessages: [responseText] };
          }
          return json(errorData, response.status);
        }

        const data = JSON.parse(responseText);
        // ThÃªm browseUrl Ä‘á»ƒ frontend cÃ³ thá»ƒ má»Ÿ link
        data.browseUrl = `${BASE_JIRA}/browse/${data.key}`;
        return json(data);
      } catch (err) {
        const e = toStepError(err);
        console.error('Jira create issue error:', e);
        return json({ ok: false, error: e.message }, 500);
      }
    }

    // Endpoint for getting Jira project details including lead
    if (req.method === 'GET' && url.pathname === '/jira/project-details') {
      try {
        const urlParams = new URL(req.url).searchParams;
        const projectKey = urlParams.get('projectKey');
        
        if (!projectKey) {
          return json({ ok: false, error: 'Missing projectKey' }, 400);
        }

        const BASE_JIRA = envJiraBase(env);
        const API_URL = `${BASE_JIRA}/rest/api/3/project/${projectKey}`;

        console.log(`Fetching project details for: ${projectKey}`);

        const response = await fetch(API_URL, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json; charset=utf-8',
            'Accept': 'application/json',
            'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
          }
        });

        if (!response.ok) {
          const errorText = await response.text();
          console.error('Jira API error:', errorText);
          return json({ ok: false, error: `Jira ${response.status}: ${errorText}` }, response.status);
        }

        const data = await response.json();
        console.log('Project details:', data);

        return json({
          ok: true,
          key: data.key,
          name: data.name,
          lead: data.lead ? {
            accountId: data.lead.accountId,
            displayName: data.lead.displayName,
            emailAddress: data.lead.emailAddress
          } : null
        });
      } catch (err) {
        const e = toStepError(err);
        console.error('Jira get project details error:', e);
        return json({ ok: false, error: e.message }, 500);
      }
    }
    
    // CORS preflight
    if (req.method === 'OPTIONS') {
      return new Response(null, { status: 204, headers: corsHeaders() });
    }

    // Home (UI)
    if (req.method === 'GET' && url.pathname === '/') {
      return new Response(homeHTML(), { headers: { 'content-type': 'text/html; charset=utf-8', ...corsHeaders() } });
    }

    // Meeting Note UI
    if (req.method === 'GET' && url.pathname === '/meetingnote') {
      return new Response(meetingNoteHTML(), { headers: { 'content-type': 'text/html; charset=utf-8', ...corsHeaders() } });
    }

    // Chat Bot UI
    if (req.method === 'GET' && url.pathname === '/chatbot') {
      return new Response(chatBotHTML(), { headers: { 'content-type': 'text/html; charset=utf-8', ...corsHeaders() } });
    }

    // Risk Radar UI
    if (req.method === 'GET' && url.pathname === '/risk') {
      return new Response(riskRadarHTML(), {
        headers: { 'content-type': 'text/html; charset=utf-8', ...corsHeaders() }
      });
    }

    // Get Jira Projects API
    if (req.method === 'GET' && url.pathname === '/jira-projects') {
      try {
        const projects = await fetchJiraProjects(env);
        return json({
          success: true,
          projects: projects.map(p => ({
            key: p.key,
            name: p.name,
            description: p.description || ''
          }))
        });
      } catch (error) {
        console.error('Error fetching Jira projects:', error);
        return json({
          success: false,
          error: error.message || 'Lá»—i khi táº£i danh sÃ¡ch dá»± Ã¡n'
        }, 500);
      }
    }

    // Risk Data API
    if (req.method === 'GET' && url.pathname === '/risk-data') {
      try {
        const urlObj = new URL(req.url);
        const projectParam = urlObj.searchParams.get('project');
        
        if (!projectParam) {
          return json({
            success: false,
            error: 'Thiáº¿u tham sá»‘ project'
          }, 400);
        }
        
        let jiraIssues = [];
        let confluenceData = [];
        
        // Äa luá»“ng: fetch Jira vÃ  Confluence cÃ¹ng lÃºc
        const promises = [];
        
        if (projectParam === 'ALL') {
          // Láº¥y táº¥t cáº£ projects tá»« Jira vÃ  fetch data
          const allProjects = await fetchJiraProjects(env);
          const projectKeys = allProjects.map(p => p.key);
          promises.push(fetchJiraDataParallel(env, projectKeys));
        } else {
          // Fetch project cá»¥ thá»ƒ
          promises.push(fetchJiraData(env, projectParam));
        }
        
        // Fetch Confluence data song song
        promises.push(fetchConfluenceData(env));
        
        // Chá» táº¥t cáº£ promises hoÃ n thÃ nh vá»›i timeout
        const timeoutPromise = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Timeout after 30 seconds')), 30000)
        );
        
        const [jiraResults, confluenceResults] = await Promise.race([
          Promise.all(promises),
          timeoutPromise
        ]);
        
        jiraIssues = jiraResults;
        confluenceData = confluenceResults;
        
        // Sá»­ dá»¥ng AI Grok Ä‘á»ƒ phÃ¢n tÃ­ch
        const aiAnalysis = await analyzeRiskDataWithAI(env, jiraIssues, confluenceData);
        
        if (!aiAnalysis.success) {
          throw new Error('AI analysis failed: ' + aiAnalysis.error);
        }
        
        return json({
          success: true,
          data: {
            ...aiAnalysis.data,
            jiraIssuesCount: jiraIssues.length,
            confluencePagesCount: confluenceData.length,
            selectedProject: projectParam
          }
        });
      } catch (error) {
        console.error('Error in risk-data endpoint:', error);
        return json({
          success: false,
          error: error.message || 'Lá»—i khi táº£i dá»¯ liá»‡u rá»§i ro'
        }, 500);
      }
    }

    // Chat processing (UI web gá»i)
    if (req.method === 'POST' && url.pathname === '/chat-process') {
      const { message, projectKey } = await safeJson(req);
      const out = await processChatMessage(env, message, { projectKey });
      return json(out, out.success ? 200 : 500);
    }

    // Presign PUT lÃªn R2
    if (req.method === 'POST' && url.pathname === '/sign-put') {
      const { key } = await safeJson(req);
      if (!key) return json({ error: 'Missing key' }, 400);
      const signed = await presignURL(env, 'PUT', key, 15 * 60);
      return json({ url: signed });
    }

    // Pipeline: Deepgram â†’ R2 â†’ Grok
    if (req.method === 'POST' && url.pathname === '/transcribe') {
      const { key, template } = await safeJson(req); // Nháº­n thÃªm template
      if (!key) return json({ ok: false, step: 'input', error: 'Missing key' }, 400);

      const steps = { deepgram: { ok: false }, saveR2: { ok: false }, grok: { ok: false } };
      try {
        if (!env.R2_PUBLIC_BASE_URL) throw new StepError('config', 'Missing R2_PUBLIC_BASE_URL');
        if (!env.DEEPGRAM_API_KEY) throw new StepError('config', 'Missing DEEPGRAM_API_KEY');
        if (!env.XAI_API_KEY) throw new StepError('config', 'Missing XAI_API_KEY');

        const base = env.R2_PUBLIC_BASE_URL.replace(/\/$/, '');
        const safeKey = String(key).split('/').map(encodeURIComponent).join('/');
        const audioUrl = `${base}/${safeKey}`;

        // 1) Deepgram â†’ transcript
        const dgUrl = 'https://api.deepgram.com/v1/listen?model=nova-2-general&language=vi&smart_format=true';
        const dgRes = await fetch(dgUrl, {
          method: 'POST',
          headers: { Authorization: `Token ${env.DEEPGRAM_API_KEY}`, 'Content-Type': 'application/json' },
          body: JSON.stringify({ url: audioUrl })
        });
        if (!dgRes.ok) throw new StepError('deepgram', `Deepgram ${dgRes.status}: ${await dgRes.text()}`);
        const dgJson = await dgRes.json();
        const transcript = extractTranscript(dgJson).trim();
        if (!transcript) throw new StepError('deepgram', 'KhÃ´ng trÃ­ch xuáº¥t Ä‘Æ°á»£c transcript');
        steps.deepgram.ok = true;

        // 2) LÆ°u transcript.txt lÃªn R2 (public)
        const txtKey = key.replace(/\.[^/.]+$/, '') + '.transcript.txt';
        const signedTxt = await presignURL(env, 'PUT', txtKey, 60);
        const putRes = await fetch(signedTxt, { method: 'PUT', headers: { 'content-type': 'text/plain; charset=utf-8' }, body: transcript });
        if (!putRes.ok) throw new StepError('saveR2', `Upload transcript ${putRes.status}: ${await putRes.text()}`);
        const transcriptUrl = `${base}/${txtKey.split('/').map(encodeURIComponent).join('/')}`;
        steps.saveR2.ok = true;

        // 3) Grok 3 Mini â†’ JSON (truyá»n template)
        const { json: llmJson, raw: llmText, response: grokResponse } = await callGrok(env, transcript, template);
        steps.grok.ok = true;

        // 4) Preview Confluence
        const previewHtml = buildConfluenceTableHTML(llmJson, template);

        return json({
          ok: true,
          steps,
          transcriptUrl,
          llmJson,
          llmText,
          grokResponse,
          previewHtml,
          template // Tráº£ vá» template
        });
      } catch (err) {
        const e = toStepError(err);
        if (e.step && steps[e.step]) steps[e.step].ok = false, steps[e.step].error = e.message;
        return json({ ok: false, step: e.step || 'unknown', error: e.message, steps }, 500);
      }
    }

    // Táº¡o page Confluence
    if (req.method === 'POST' && url.pathname === '/create-confluence') {
      const { llmJson, transcriptUrl, title, spaceKey, parentId, storageHtml: incomingHtml, titleStrategy, attendeeIds, template } = await safeJson(req);

      // Debug logging
      console.log('Create Confluence request:', {
        template,
        hasProgressItems: llmJson?.progress_items?.length > 0,
        progressItems: llmJson?.progress_items,
        spaceKey,
        title
      });

      try {
        // Kiá»ƒm tra cÃ¡c tham sá»‘ báº¯t buá»™c
        if (!spaceKey) {
          throw new StepError('confluence', 'Missing spaceKey');
        }

        // Láº¥y thÃ´ng tin xÃ¡c thá»±c Atlassian
        const email = atlassianEmail(env);
        const apiToken = env.ATLASSIAN_API_TOKEN;
        if (!email || !apiToken) {
          throw new StepError('confluence', 'Missing Atlassian credentials (ATLASSIAN_EMAIL/ATLASSIAN_USER, ATLASSIAN_API_TOKEN)');
        }

        // Táº¡o tiÃªu Ä‘á» trang
        let pageTitle = title;
        if (titleStrategy === 'autonumber' || !title) {
          // Tá»± Ä‘á»™ng táº¡o tiÃªu Ä‘á» vá»›i sá»‘ thá»© tá»±
          const dateStr = localDateISO(env); // YYYY-MM-DD
          let templateName = '[MOM] BiÃªn báº£n há»p'; // default
          
          if (template === 'risk') {
            templateName = '[Report] Risk Management';
          } else if (template === 'progress') {
            templateName = '[Report] BÃ¡o cÃ¡o tiáº¿n Ä‘á»™ dá»± Ã¡n trá»ng Ä‘iá»ƒm';
          } else if (llmJson?.assessment === 'Cháº­m tiáº¿n Ä‘á»™') {
            templateName = '[MOM] BiÃªn báº£n há»p';
          }
          
          pageTitle = `${templateName} - ${dateStr}`;
        }
        
        // Auto-number suffix (001, 002, ...) when strategy = autonumber
        if (titleStrategy === 'autonumber') {
          const baseTitle = pageTitle;
          try {
            // Use CQL search to find existing pages whose titles start with baseTitle
            const safeBase = baseTitle.replace(/"/g, '\"');
            const cql = `space="${spaceKey}" and title ~ "${safeBase}*"`;
            const searchNumUrl = confluenceApiUrl(env, `/search?cql=${encodeURIComponent(cql)}&limit=100`);
            const numRes = await fetch(searchNumUrl, {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json; charset=utf-8',
                'Accept': 'application/json',
                'Authorization': 'Basic ' + btoa(`${email}:${apiToken}`)
              }
            });
            let nextNum = 1;
            if (numRes.ok) {
              const numData = await numRes.json();
              const titles = (numData.results || []).map(r => (r.title || r.name || '').trim()).filter(Boolean);
              const esc = baseTitle.replace(/[.*+?^${}()|[\\\]]/g, '\\$&');
              const rx = new RegExp('^' + esc + '\\s*-\\s*(\\d+)$');
              for (const t of titles) {
                const m = t.match(rx);
                if (m) {
                  const n = parseInt(m[1], 10);
                  if (!isNaN(n) && n >= nextNum) nextNum = n + 1;
                }
              }
            }
            pageTitle = `${baseTitle} - ${String(nextNum).padStart(3,'0')}`;
          } catch (_e) {
            // Fallback if search fails
            pageTitle = `${baseTitle} - 001`;
          }
        }

        // Æ¯u tiÃªn sá»­ dá»¥ng HTML tá»« client (Ä‘Ã£ bao gá»“m dá»¯ liá»‡u ngÆ°á»i dÃ¹ng nháº­p)
        let storageHtml;
        if (incomingHtml) {
          // Sá»­ dá»¥ng HTML tá»« client (Ä‘Ã£ cÃ³ dá»¯ liá»‡u ngÆ°á»i dÃ¹ng nháº­p)
          storageHtml = incomingHtml;
        } else if (llmJson && (llmJson.discussion_topics || llmJson.action_items || llmJson.risk_items || llmJson.progress_items)) {
          // Sá»­ dá»¥ng hÃ m buildConfluenceTableHTML Ä‘Ã£ Ä‘Æ°á»£c Ä‘á»‹nh nghÄ©a vá»›i template
          storageHtml = buildConfluenceTableHTML(llmJson, template || 'mom').trim();
          console.log('Generated storageHtml:', storageHtml);
        } else {
          // Táº¡o báº£ng trá»‘ng náº¿u khÃ´ng cÃ³ dá»¯ liá»‡u
          storageHtml = buildConfluenceTableHTML({}, template || 'mom').trim();
          console.log('Empty storageHtml:', storageHtml);
        }

        // Táº¡o ná»™i dung trang: chá»‰ 2 báº£ng (khÃ´ng header, khÃ´ng transcript)
        const pageContent = storageHtml;
        const _attendees = Array.isArray(attendeeIds) ? attendeeIds.filter(x => x && typeof x === 'string') : [];
        const attendeesHtml = _attendees.length
          ? ('<p><strong>ThÃ nh pháº§n tham dá»±:</strong> ' + _attendees.map(function(a){
                return '<ac:link><ri:user ri:account-id="' + (String(a).match(/[A-Za-z0-9:\-]+/g)||[]).join('') + '"/></ac:link>';
              }).join(', ') + '</p>')
          : '';
        const pageContentWithAtt = attendeesHtml + pageContent;

        // Chuáº©n bá»‹ payload Ä‘á»ƒ táº¡o trang Confluence
        const payload = {
          type: 'page',
          title: pageTitle,
          space: { key: spaceKey },
          body: {
            storage: {
              value: pageContentWithAtt,
              representation: 'storage'
            }
          },
          ancestors: parentId ? [{ type: 'page', id: parentId }] : undefined
        };

        // Kiá»ƒm tra xem trang Ä‘Ã£ tá»“n táº¡i chÆ°a
        let existingPage = null;
        const searchUrl = confluenceApiUrl(env, `/content?spaceKey=${spaceKey}&title=${encodeURIComponent(pageTitle)}&expand=version`);
        const searchRes = await fetch(searchUrl, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json; charset=utf-8',
            'Accept': 'application/json',
            'Authorization': 'Basic ' + btoa(`${email}:${apiToken}`)
          }
        });

        if (searchRes.ok) {
          const searchData = await searchRes.json();
          if (searchData.results && searchData.results.length > 0) {
            existingPage = searchData.results[0];
          }
        }

        let pageUrl = '';
        if (existingPage) {
          // Cáº­p nháº­t trang Ä‘Ã£ tá»“n táº¡i
          const updateUrl = confluenceApiUrl(env, `/content/${existingPage.id}`);
          payload.version = { number: existingPage.version.number + 1 };

          const updateRes = await fetch(updateUrl, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json; charset=utf-8',
              'Accept': 'application/json',
              'Authorization': 'Basic ' + btoa(`${email}:${apiToken}`)
            },
            body: JSON.stringify(payload)
          });

          if (!updateRes.ok) {
            throw new StepError('confluence', `Update page failed: ${updateRes.status} - ${await updateRes.text()}`);
          }

          const updateData = await updateRes.json();
          pageUrl = `${envConfluenceBase(env)}/spaces/${spaceKey}/pages/${updateData.id}`;
        } else {
          // Táº¡o trang má»›i
          const createUrl = confluenceApiUrl(env, '/content');

          const createRes = await fetch(createUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json; charset=utf-8',
              'Accept': 'application/json',
              'Authorization': 'Basic ' + btoa(`${email}:${apiToken}`)
            },
            body: JSON.stringify(payload)
          });

          if (!createRes.ok) {
            throw new StepError('confluence', `Create page failed: ${createRes.status} - ${await createRes.text()}`);
          }

          const createData = await createRes.json();
          pageUrl = `${envConfluenceBase(env)}/spaces/${spaceKey}/pages/${createData.id}`;
        }

        return json({
          ok: true,
          pageUrl,
          title: pageTitle
        });
      } catch (err) {
        const e = toStepError(err);
        console.error('Confluence page creation error:', e);
        console.error('Error details:', {
          step: e.step,
          message: e.message,
          stack: err.stack,
          template: template,
          spaceKey: spaceKey,
          title: title
        });
        return json({
          ok: false,
          step: e.step || 'confluence',
          error: e.message,
          details: err.stack
        }, 500);
      }
    }

    // Táº¡o ticket Jira
    if (req.method === 'POST' && url.pathname === '/create-jira-ticket') {
      try {
        const { tickets, spaceKey } = await safeJson(req);
        
        // Validation
        if (!tickets || !Array.isArray(tickets) || tickets.length === 0) {
          throw new StepError('jira', 'Invalid tickets data');
        }
        if (!spaceKey) {
          throw new StepError('jira', 'Missing spaceKey');
        }
        if (!atlassianEmail(env) || !env.ATLASSIAN_API_TOKEN) {
          throw new StepError('jira', 'Missing Atlassian credentials');
        }
        if (!/^[A-Z]{2,10}$/.test(spaceKey)) {
          throw new StepError('jira', `Invalid project key format: ${spaceKey}`);
        }

        const BASE_JIRA = envJiraBase(env);
        const API_URL = `${BASE_JIRA}/rest/api/3/issue`;
        
        console.log('Creating Jira tickets:', { spaceKey, ticketsCount: tickets.length });

        const results = [];
        
        for (const ticket of tickets) {
          try {
            const { summary, description, issueType, priority, dueDate } = ticket;
            
            if (!summary) {
              results.push({ ok: false, error: 'Missing summary' });
              continue;
            }

            // Build payload
            const payload = {
              fields: {
                project: { key: spaceKey },
                summary: summary,
                description: {
                  type: 'doc',
                  version: 1,
                  content: [{
                    type: 'paragraph',
                    content: [{
                      type: 'text',
                      text: description || ''
                    }]
                  }]
                },
                issuetype: { name: issueType || 'Task' },
                priority: { name: priority || 'Medium' }
              }
            };

            // Add dueDate if provided
            if (dueDate) {
              payload.fields.duedate = dueDate;
            }

            console.log('Jira payload:', JSON.stringify(payload, null, 2));

            // Make API call
            const response = await fetch(API_URL, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json; charset=utf-8',
                'Accept': 'application/json',
                'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
              },
              body: JSON.stringify(payload)
            });

            const responseText = await response.text();
            console.log('Jira response:', { status: response.status, text: responseText });
            
            if (!response.ok) {
              console.error('Jira API error:', { status: response.status, text: responseText, url: API_URL });
              results.push({ ok: false, error: `Jira ${response.status}: ${responseText}` });
              continue;
            }

            const data = JSON.parse(responseText);
            results.push({
              ok: true,
              key: data.key,
              id: data.id,
              self: data.self,
              url: `${BASE_JIRA}/browse/${data.key}`
            });
            
          } catch (ticketError) {
            console.error('Error creating ticket:', ticketError);
            results.push({ ok: false, error: `Ticket creation failed: ${ticketError.message}` });
          }
        }

        const allSuccess = results.every(r => r.ok);
        return json({
          ok: allSuccess,
          results
        });
        
      } catch (err) {
        const e = toStepError(err);
        console.error('Jira ticket creation error:', e);
        return json({ 
          ok: false, 
          step: e.step || 'jira', 
          error: e.message 
        }, 500);
      }
    }

    // === ZALO: Webhook nháº­n sá»± kiá»‡n ===
    if (req.method === 'POST' && url.pathname === '/zalo/webhook') {
      try {
        const got = req.headers.get('x-bot-api-secret-token')
                || req.headers.get('X-Bot-Api-Secret-Token')
                || new URL(req.url).searchParams.get('secret'); // tiá»‡n test
        const expected =
          env.ZALO_SECRET_TOKEN
          || env.ZALO_WEBHOOK_SECRET_TOKEN
          || env.ZALO_WEBHOOK_SECRET
          || env.ZALO_BOT_WEBHOOK_SECRET;
        if (!expected || got !== expected) {
          return json({ ok: false, error: 'Invalid webhook secret' }, 403);
        }

        const body = await safeJson(req);

        const eventName =
          body?.result?.event_name ||
          body?.event_name ||
          body?.event?.name ||
          body?.name || '';

        const chatId =
          body?.result?.message?.chat?.id ||
          body?.message?.chat?.id ||
          body?.data?.message?.chat?.id ||
          body?.message?.sender?.id ||
          body?.sender?.id ||
          null;

        const text =
          body?.result?.message?.text ||
          body?.message?.text ||
          body?.data?.message?.text ||
          '';

        const senderName =
          body?.result?.message?.sender?.name ||
          body?.message?.sender?.name ||
          body?.sender?.name || null;

        if (chatId) {
          // khÃ´ng block webhook: ghi ná»n tÃªn máº·c Ä‘á»‹nh trong payload (náº¿u cÃ³)
          ctx.waitUntil(saveContact(env, chatId, senderName).catch(e => console.error('saveContact', e)));
        }

        // Lá»†NH: /id
        if (text && /^\/?id$/i.test(String(text).trim())) {
          await zaloSendMessage(env, chatId, `Chat ID cá»§a báº¡n: ${chatId}`);
          return json({ ok: true, echoed: true });
        }

        // Lá»†NH: /who -> xem tÃªn hiá»‡n táº¡i
        if (text && /^\/?who$/i.test(String(text).trim())) {
          const current = await getNameByChatId(env, chatId);
          await zaloSendMessage(env, chatId, current ? `TÃªn Ä‘ang lÆ°u: ${current}` : 'ChÆ°a Ä‘áº·t tÃªn hiá»ƒn thá»‹. HÃ£y gÃµ: /name TÃªnCá»§aBáº¡n');
          return json({ ok: true, who: true, displayName: current || null });
        }
        
        // Lá»‡nh: /name <tÃªn> -> Ä‘áº·t/Ä‘á»•i tÃªn (vÃ  xÃ¡c nháº­n rÃµ rÃ ng)
        const mName = text && text.match(/^\/?name\s+(.+)$/i);
        if (mName && mName[1]) {
          const displayName = mName[1].trim().slice(0, 80);
          try {
            await ensureContactsTable(env);
            await saveContact(env, chatId, displayName);
            await zaloSendMessage(env, chatId,
              `âœ… ÄÃ£ táº¡o/cáº­p nháº­t danh báº¡ thÃ nh cÃ´ng!
â€¢ TÃªn hiá»ƒn thá»‹: "${displayName}"
â€¢ chat_id: ${chatId}

Báº¡n cÃ³ thá»ƒ quay láº¡i web vÃ  báº¥m "Táº£i danh báº¡" Ä‘á»ƒ chá»n ngÆ°á»i nháº­n.`);
            return json({ ok: true, named: true, displayName });
          } catch (err) {
            console.error('saveContact error', err);
            await zaloSendMessage(env, chatId,
              `âš ï¸ LÆ°u danh báº¡ tháº¥t báº¡i. Vui lÃ²ng thá»­ láº¡i.
Chi tiáº¿t: ${String(err)}`);
            return json({ ok: false, error: String(err) }, 500);
          }
        }

        const isTextEvent =
          /message\.text\.received|user\.send\.text|message\.received/i.test(eventName) || !!text;

        if (!chatId || !isTextEvent) {
          console.log('Zalo webhook ignored', { eventName, haveText: !!text });
          return json({ ok: true, ignored: true, event: eventName });
        }

        // CÃ²n láº¡i: há»™i thoáº¡i thÆ°á»ng â†’ xá»­ lÃ½ ná»n
        ctx.waitUntil(handleZaloMessage(env, chatId, text));
        return json({ ok: true }); // ACK ngay
      } catch (e) {
        console.error('Zalo webhook error', e);
        return json({ ok: false, error: String(e) }, 500);
      }
    }

    // === ZALO: ÄÄƒng kÃ½ webhook (gá»i báº±ng Postman) ===
    if (req.method === 'POST' && url.pathname === '/zalo/set-webhook') {
      try {
        const { url: webhookUrl, secret } = await safeJson(req);
        if (!webhookUrl) return json({ ok: false, error: 'Missing url' }, 400);
        const res = await zaloSetWebhook(env, webhookUrl, secret || env.ZALO_SECRET_TOKEN);
        return json({ ok: true, res });
      } catch (e) {
        return json({ ok: false, error: String(e) }, 500);
      }
    }

    // === ZALO: Gá»­i tin chá»§ Ä‘á»™ng (táº¡o event gá»­i ngÆ°á»i dÃ¹ng) ===
    if (req.method === 'POST' && url.pathname === '/zalo/push') {
      try {
        const { chat_id, text } = await safeJson(req);
        if (!chat_id || !text) return json({ ok: false, error: 'Missing chat_id or text' }, 400);
        const res = await zaloSendMessage(env, chat_id, text);
        return json({ ok: true, res });
      } catch (e) {
        return json({ ok: false, error: String(e) }, 500);
      }
    }
    
    if (req.method === 'GET' && url.pathname === '/health') return new Response('ok', { headers: corsHeaders() });
    
    // Danh sÃ¡ch liÃªn há»‡
    if (req.method === 'GET' && url.pathname === '/zalo/contacts/list') {
      try { return json({ ok:true, contacts: await listContacts(env) }); }
      catch(e){ return json({ ok:false, error:String(e) }, 500); }
    }

    // Gá»­i theo tÃªn hiá»ƒn thá»‹
    if (req.method === 'POST' && url.pathname === '/zalo/push-by-name') {
      try {
        const { display_name, text } = await safeJson(req);
        if (!display_name) return json({ ok:false, error:'Missing display_name' }, 400);
        const chatId = await findChatIdByName(env, display_name);
        if (!chatId) return json({ ok:false, error:'TÃªn khÃ´ng tá»“n táº¡i' }, 404);
        const res = await zaloSendMessage(env, chatId, String(text || '').slice(0,2000));
        return json({ ok:true, res });
      } catch(e){ return json({ ok:false, error:String(e) }, 500); }
    }

    return new Response('Not found', { status: 404, headers: corsHeaders() });
  }
};



/* ===== AI Meeting Note Inline Patch (auto-added, worker-safe) =====
 * This block is no-op when running without a DOM (e.g., Cloudflare Worker).
 */
(function(global){
  const hasDOM = !!(global && global.document && global.document.getElementById);
  if (!hasDOM) { return; } // stop in Worker

  function $(id){ return global.document.getElementById(id); }
  async function defaultGetJiraByEmail(email){
    try{
      const res = await fetch(`/jira/account?email=${encodeURIComponent(email)}`);
      if(!res.ok) return null;
      const data = await res.json();
      if (data && (data.accountId || data.accountID)) {
        return { accountId: data.accountId || data.accountID };
      }
    }catch(e){}
    return null;
  }
  function parseEmails(raw){
    return (raw||'').split(/[;\n,\s]+/).map(s=>s.trim()).filter(Boolean);
  }
  function patch(){
    const ocrEmails = $('ocrEmails');
    const ocrJiraIds = $('ocrJiraIds');
    const btnGetJiraIds = $('btnGetJiraIds');
    if(!ocrEmails || !ocrJiraIds || !btnGetJiraIds) return;

    try{ ocrEmails.removeAttribute('readonly'); }catch(e){}
    try{ ocrJiraIds.setAttribute('readonly',''); }catch(e){}

    function sync(){ btnGetJiraIds.disabled = !(ocrEmails.value.trim()); }
    sync();
    ocrEmails.addEventListener('input', sync);

    try{ btnGetJiraIds.onclick = null; }catch(e){}
    const getByEmail = (global.__getJiraByEmail || defaultGetJiraByEmail);

    btnGetJiraIds.addEventListener('click', async (ev)=>{
      ev.preventDefault(); ev.stopPropagation();
      const emails = parseEmails(ocrEmails.value);
      if(!emails.length){ ocrJiraIds.value=''; return; }
      btnGetJiraIds.disabled = true;
      try{
        const ids = [];
        for(const email of emails){
          try{
            const r = await getByEmail(email);
            if(r && r.accountId) ids.push(r.accountId);
          }catch(e){}
        }
        ocrJiraIds.value = ids.join(';');
      } finally { sync(); }
    });
  }

  const d = global.document;
  if (d && (d.readyState === 'complete' || d.readyState === 'interactive')) {
    setTimeout(patch, 0);
  } else if (d) {
    d.addEventListener('DOMContentLoaded', patch);
  }
  // Debug log functions
  function addDebugLog(message) {
    const debugLog = document.getElementById('debugLog');
    const debugContent = document.getElementById('debugContent');
    
    if (debugLog && debugContent) {
      debugLog.style.display = 'block';
      const timestamp = new Date().toLocaleTimeString();
      debugContent.innerHTML += `[${timestamp}] ${message}\n`;
      debugLog.scrollTop = debugLog.scrollHeight;
    }
  }

  // Make debug function available globally
  window.addDebugLog = addDebugLog;

})(typeof globalThis !== 'undefined' ? globalThis : (typeof window !== 'undefined' ? window : this));










