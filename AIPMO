// Cloudflare Worker — PMO AI Menu + Meeting Note + Auto Report + Chat Bot + Grok 3 Mini + Confluence + Jira + Zalo
// ENV bắt buộc:
// - R2_ACCOUNT_ID, R2_ACCESS_KEY_ID, R2_SECRET_ACCESS_KEY, R2_BUCKET, R2_PUBLIC_BASE_URL
// - DEEPGRAM_API_KEY, XAI_API_KEY, (optional) XAI_BASE_URL (vd: https://us-east-1.api.x.ai/v1)
// - MISTRAL_API_KEY (cho OCR sử dụng Mistral AI)
// - ATLASSIAN_BASE (vd: https://kvmon-dev.atlassian.net/wiki hoặc https://kvmon-dev.atlassian.net)
// - ATLASSIAN_EMAIL, ATLASSIAN_API_TOKEN
// - ZALO_BOT_TOKEN, ZALO_WEBHOOK_SECRET_TOKEN

// ============================================================================
// 1) KERNEL HELPERS
// ============================================================================
function corsHeaders() {
  return {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET,POST,OPTIONS',
    'Access-Control-Allow-Headers': 'content-type, authorization, x-bot-api-secret-token, X-Bot-Api-Secret-Token'
  };
}
function json(obj, status = 200) {
  return new Response(JSON.stringify(obj), {
    status,
    headers: { 'content-type': 'application/json; charset=utf-8', ...corsHeaders() }
  });
}
async function safeJson(req) {
  try {
    const ct = (req.headers.get('content-type') || '').toLowerCase();
    if (ct.includes('application/json')) {
      return await req.json();
    }
    const text = await req.text(); // fallback
    return text ? JSON.parse(text) : {};
  } catch {
    return {};
  }
}
class StepError extends Error { constructor(step, message) { super(message); this.step = step; } }
function toStepError(err) { return (err instanceof StepError) ? err : new StepError('unknown', String(err?.message || err)); }

// ============================================================================
// 2) CHAT CORE (dùng chung cho web & Zalo)
// ============================================================================

// ============================================================================
// 2.1) CONVERSATION HISTORY MANAGER
// ============================================================================
const conversationHistories = new Map(); // { chatId: { messages: [], timestamp, mode } }
const MAX_HISTORY_MESSAGES = 10;
const HISTORY_TTL_MS = 30 * 60 * 1000; // 30 minutes

function addToConversationHistory(chatId, role, content, mode = 'menu') {
  let history = conversationHistories.get(chatId);
  
  if (!history) {
    history = {
      messages: [],
      timestamp: Date.now(),
      mode: mode
    };
    conversationHistories.set(chatId, history);
  }
  
  // Update timestamp
  history.timestamp = Date.now();
  history.mode = mode;
  
  // Add message
  history.messages.push({
    role: role, // 'user' or 'assistant'
    content: content,
    timestamp: Date.now()
  });
  
  // Keep only last MAX_HISTORY_MESSAGES
  if (history.messages.length > MAX_HISTORY_MESSAGES) {
    history.messages = history.messages.slice(-MAX_HISTORY_MESSAGES);
  }
}

function getConversationHistory(chatId) {
  const history = conversationHistories.get(chatId);
  
  if (!history) return null;
  
  // Check expiry
  if (Date.now() - history.timestamp > HISTORY_TTL_MS) {
    conversationHistories.delete(chatId);
    return null;
  }
  
  return history;
}

function clearConversationHistory(chatId) {
  conversationHistories.delete(chatId);
}

function setConversationMode(chatId, mode) {
  const history = conversationHistories.get(chatId);
  if (history) {
    history.mode = mode;
    history.timestamp = Date.now();
  } else {
    conversationHistories.set(chatId, {
      messages: [],
      timestamp: Date.now(),
      mode: mode
    });
  }
}

function getConversationMode(chatId) {
  const history = getConversationHistory(chatId);
  return history ? history.mode : 'menu';
}

// ============================================================================
// 2.2) JIRA QUESTION DETECTION
// ============================================================================
function isJiraQuestion(text) {
  if (!text) return false;
  const s = String(text).toLowerCase();

  const keywords = [
    'jira','task','ticket','issue','trạng thái','status','ưu tiên','priority',
    'assignee','project','dự án','backlog','sprint','bug','story','epic',
    'to do','in progress','done','deadline','quá hạn','duedate','due date',
    'created','updated','assign','giao','tiến độ','bao nhiêu task','board'
  ];
  if (keywords.some(k => s.includes(k))) return true;

  // Pattern mã issue kiểu ABC-123
  return /[A-Z][A-Z0-9_]{1,9}-\d+/.test(text);
}

// ============================================================================
// 2.3) AI INTENT DETECTION & SMART CONFIRMATION
// ============================================================================

async function handleNaturalClarification(env, userResponse, clarificationData, chatId, mode) {
  const { intentData, currentMissingInfo, availableProjects, entities, missingInfo, originalMessage } = clarificationData;
  
  // Parse user response
  let updatedEntities = { ...entities };
  let updatedMissingInfo = [...missingInfo];
  
  // Update entity based on current missing info
  if (currentMissingInfo === 'project') {
    // Parse project selection
    const projectMatch = userResponse.match(/^\d+$/);
    if (projectMatch) {
      const index = parseInt(projectMatch[0]) - 1;
      if (availableProjects && index < availableProjects.length) {
        updatedEntities.projectKey = availableProjects[index].key;
      } else if (index === availableProjects.length) {
        updatedEntities.projectKey = ''; // All projects
      }
    } else {
      // Try to match project key in text
      const projectKeyMatch = userResponse.match(/\b([A-Z][A-Z0-9]{1,9})\b/);
      if (projectKeyMatch) {
        updatedEntities.projectKey = projectKeyMatch[1];
      }
    }
    updatedMissingInfo = updatedMissingInfo.filter(info => info !== 'project');
    
  } else if (currentMissingInfo === 'queryType') {
    // Parse query type selection
    const queryTypeMap = {
      '1': 'progress',
      '2': 'risk',
      '3': 'quality',
      '4': 'tasks',
      'tiến độ': 'progress',
      'progress': 'progress',
      'rủi ro': 'risk',
      'risk': 'risk',
      'chất lượng': 'quality',
      'quality': 'quality',
      'bug': 'quality',
      'công việc': 'tasks',
      'task': 'tasks',
      'workload': 'tasks'
    };
    
    const normalized = userResponse.toLowerCase().trim();
    for (const [key, value] of Object.entries(queryTypeMap)) {
      if (normalized.includes(key)) {
        updatedEntities.queryType = value;
        break;
      }
    }
    updatedMissingInfo = updatedMissingInfo.filter(info => info !== 'queryType');
    
  } else if (currentMissingInfo === 'timeframe') {
    // Parse timeframe selection
    const timeframeMap = {
      '1': '30d',
      '2': '3m',
      '3': 'sprint',
      '30': '30d',
      '30 ngày': '30d',
      '3 tháng': '3m',
      '3m': '3m',
      'sprint': 'sprint',
      'active sprint': 'sprint'
    };
    
    const normalized = userResponse.toLowerCase().trim();
    for (const [key, value] of Object.entries(timeframeMap)) {
      if (normalized.includes(key)) {
        updatedEntities.timeframe = value;
        break;
      }
    }
    updatedMissingInfo = updatedMissingInfo.filter(info => info !== 'timeframe');
  }
  
  // Add user response to history
  addToConversationHistory(chatId, 'user', userResponse, mode);
  
  // Check if still missing info
  if (updatedMissingInfo.length > 0) {
    // Ask next question
    const updatedIntentData = {
      ...intentData,
      entities: updatedEntities,
      missingInfo: updatedMissingInfo
    };
    
    const confirmation = await generateSmartConfirmation(env, updatedIntentData, availableProjects);
    const response = confirmation.confirmationText;
    
    // Add assistant response to history
    addToConversationHistory(chatId, 'assistant', response, mode);
    
    return {
      success: true,
      response: response,
      needsClarification: true,
      clarificationStep: 'natural_clarification',
      clarificationData: {
        intentData: updatedIntentData,
        currentMissingInfo: confirmation.currentMissingInfo,
        availableProjects: availableProjects,
        entities: updatedEntities,
        missingInfo: updatedMissingInfo,
        originalMessage: originalMessage
      },
      options: confirmation.options,
      mode: 'natural'
    };
  }
  
  // All info collected - execute query
  const { projectKey, timeframe, queryType } = updatedEntities;
  
  // Build enhanced message
  let enhancedMessage = originalMessage || 'phân tích dự án';
  
  if (projectKey) {
    enhancedMessage += ` dự án ${projectKey}`;
  } else {
    enhancedMessage += ' tất cả dự án';
  }
  
  if (queryType) {
    const queryTypeTextMap = {
      'progress': 'tiến độ',
      'risk': 'rủi ro',
      'quality': 'chất lượng bugs',
      'tasks': 'công việc tasks'
    };
    enhancedMessage += ` ${queryTypeTextMap[queryType] || queryType}`;
  }
  
  if (timeframe) {
    const timeframeTextMap = {
      '30d': '30 ngày gần đây',
      '3m': '3 tháng',
      'sprint': 'sprint hiện tại'
    };
    enhancedMessage += ` ${timeframeTextMap[timeframe] || timeframe}`;
  }
  
  // Execute JQL query
  const jql = await generateJQL(env, enhancedMessage, projectKey || '');
  const jiraResults = await executeJQL(env, jql);
  
  const statusCount = {};
  const priorityCount = {};
  const assigneeCount = {};
  const typeCount = {};
  
  jiraResults.forEach(issue => {
    statusCount[issue.status] = (statusCount[issue.status] || 0) + 1;
    priorityCount[issue.priority] = (priorityCount[issue.priority] || 0) + 1;
    const assignee = issue.assignee || 'Unassigned';
    assigneeCount[assignee] = (assigneeCount[assignee] || 0) + 1;
    const issueType = issue.type || 'Unknown';
    typeCount[issueType] = (typeCount[issueType] || 0) + 1;
  });

  let prompt = `Phân tích dự án với ${jiraResults.length} issues dựa trên câu hỏi: "${enhancedMessage}"

THỐNG KÊ:
- Trạng thái: ${Object.entries(statusCount).map(([k,v]) => `${k}(${v})`).join(', ')}
- Ưu tiên: ${Object.entries(priorityCount).map(([k,v]) => `${k}(${v})`).join(', ')}
- Phân công: ${Object.entries(assigneeCount).map(([k,v]) => `${k}(${v})`).join(', ')}

Hãy trả lời ngắn gọn theo format:

▪ Tình hình:
[nội dung tình hình]

▪ Vấn đề:
[nội dung vấn đề]

▪ Đề xuất:
[nội dung đề xuất]`;

  const answer = await askGrok(env, prompt);
  
  // Add assistant response to history
  addToConversationHistory(chatId, 'assistant', answer, mode);
  
  return { 
    success: true, 
    response: answer, 
    jql: jql, 
    results: jiraResults,
    statistics: {
      status: statusCount,
      priority: priorityCount,
      assignee: assigneeCount,
      type: typeCount
    },
    mode: 'natural'
  };
}

async function analyzeUserIntent(env, message, conversationHistory) {
  // Tạo context từ lịch sử hội thoại
  let contextPrompt = '';
  if (conversationHistory && conversationHistory.messages.length > 0) {
    contextPrompt = '\n\nLịch sử hội thoại gần đây:\n';
    conversationHistory.messages.slice(-5).forEach(msg => {
      contextPrompt += `${msg.role === 'user' ? 'User' : 'Assistant'}: ${msg.content}\n`;
    });
  }
  
  const prompt = `Bạn là AI phân tích ý định người dùng về các câu hỏi dự án Jira.

${contextPrompt}

Câu hỏi mới: "${message}"

Hãy phân tích và trả về JSON:
{
  "intent": "query_project|unclear|general_chat",
  "confidence": 0.0-1.0,
  "entities": {
    "projectKey": "ABC hoặc null",
    "timeframe": "30d|3m|6m|sprint|null",
    "queryType": "progress|risk|quality|tasks|null",
    "specificIssue": "ABC-123 hoặc null"
  },
  "missingInfo": ["project", "timeframe", "queryType"],
  "suggestedQuestion": "Câu hỏi xác nhận ngắn gọn"
}

Lưu ý:
- confidence > 0.7: đủ thông tin để query
- confidence 0.4-0.7: cần xác nhận
- confidence < 0.4: cần hỏi lại rõ hơn
- Sử dụng lịch sử để đoán context
- suggestedQuestion phải ngắn gọn, thân thiện`;

  try {
    const response = await askGrok(env, prompt);
    const jsonMatch = response.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }
  } catch (e) {
    console.error('Intent analysis error:', e);
  }
  
  // Fallback
  return {
    intent: 'unclear',
    confidence: 0.3,
    entities: {},
    missingInfo: ['project', 'timeframe', 'queryType'],
    suggestedQuestion: 'Bạn muốn hỏi về dự án nào và vấn đề gì?'
  };
}

async function generateSmartConfirmation(env, intentData, availableProjects) {
  const { entities, missingInfo } = intentData;
  
  // HỎI TUẦN TỰ TỪNG BƯỚC - Chỉ hỏi 1 thông tin một lúc
  let confirmationText = '';
  let currentMissingInfo = null;
  let options = [];
  
  // Priority order: project -> queryType -> timeframe
  if (missingInfo.includes('project')) {
    currentMissingInfo = 'project';
    confirmationText = '📊 **Bạn muốn hỏi về dự án nào?**\n\n';
    
    if (availableProjects && availableProjects.length > 0) {
      availableProjects.slice(0, 5).forEach((p, i) => {
        confirmationText += `${i + 1}. ${p.name} (${p.key})\n`;
        options.push({ id: p.key, text: `${p.name} (${p.key})`, type: 'project' });
      });
      
      const allIndex = Math.min(5, availableProjects.length) + 1;
      confirmationText += `${allIndex}. Tất cả dự án\n`;
      options.push({ id: 'ALL', text: 'Tất cả dự án', type: 'project' });
    }
    
  } else if (missingInfo.includes('queryType')) {
    currentMissingInfo = 'queryType';
    
    // Thêm thông tin project nếu đã có
    const projectInfo = entities.projectKey ? ` dự án **${entities.projectKey}**` : '';
    confirmationText = `🎯 **Bạn muốn hỏi về${projectInfo}:**\n\n`;
    
    confirmationText += '1. Tiến độ (progress)\n';
    confirmationText += '2. Rủi ro (risks)\n';
    confirmationText += '3. Chất lượng (quality/bugs)\n';
    confirmationText += '4. Công việc (tasks/workload)\n';
    
    options = [
      { id: 'progress', text: 'Tiến độ', type: 'queryType' },
      { id: 'risk', text: 'Rủi ro', type: 'queryType' },
      { id: 'quality', text: 'Chất lượng', type: 'queryType' },
      { id: 'tasks', text: 'Công việc', type: 'queryType' }
    ];
    
  } else if (missingInfo.includes('timeframe')) {
    currentMissingInfo = 'timeframe';
    
    // Thêm context về project và queryType nếu đã có
    let context = '';
    if (entities.projectKey && entities.queryType) {
      const queryTypeMap = {
        'progress': 'tiến độ',
        'risk': 'rủi ro',
        'quality': 'chất lượng',
        'tasks': 'công việc'
      };
      context = ` về **${queryTypeMap[entities.queryType] || entities.queryType}** của dự án **${entities.projectKey}**`;
    } else if (entities.projectKey) {
      context = ` của dự án **${entities.projectKey}**`;
    } else if (entities.queryType) {
      const queryTypeMap = {
        'progress': 'tiến độ',
        'risk': 'rủi ro',
        'quality': 'chất lượng',
        'tasks': 'công việc'
      };
      context = ` về **${queryTypeMap[entities.queryType] || entities.queryType}**`;
    }
    
    confirmationText = `⏰ **Chọn thời gian${context}:**\n\n`;
    confirmationText += '1. 30 ngày gần đây\n';
    confirmationText += '2. 3 tháng\n';
    confirmationText += '3. Sprint hiện tại\n';
    
    options = [
      { id: '30d', text: '30 ngày gần đây', type: 'timeframe' },
      { id: '3m', text: '3 tháng', type: 'timeframe' },
      { id: 'sprint', text: 'Sprint hiện tại', type: 'timeframe' }
    ];
  }
  
  confirmationText += '\n💬 Bạn có thể trả lời số hoặc gõ trực tiếp nhé!';
  
  return {
    needsConfirmation: missingInfo.length > 0,
    confirmationText: confirmationText,
    missingInfo: missingInfo,
    currentMissingInfo: currentMissingInfo,
    options: options
  };
}

async function processChatMessage(env, message, opts = {}) {
  if (!message || !String(message).trim()) {
    return { success: false, error: 'Missing message' };
  }
  
  const projectKey = (opts && opts.projectKey) ? String(opts.projectKey).trim() : '';
  const clarificationStep = (opts && opts.clarificationStep) ? opts.clarificationStep : null;
  const clarificationData = (opts && opts.clarificationData) ? opts.clarificationData : {};
  const platform = (opts && opts.platform) ? opts.platform : 'webapp';
  const chatId = (opts && opts.chatId) ? opts.chatId : 'web-default';
  const mode = (opts && opts.mode) ? opts.mode : getConversationMode(chatId);

  // Add user message to history
  addToConversationHistory(chatId, 'user', message, mode);
  
  // NATURAL MODE: AI-powered conversation
  if (mode === 'natural') {
    try {
      const history = getConversationHistory(chatId);
      
      // Analyze intent with conversation context
      const intentData = await analyzeUserIntent(env, message, history);
      
      // High confidence: Execute query directly
      if (intentData.confidence > 0.7 && intentData.intent === 'query_project') {
        const { entities } = intentData;
        
        // Build enhanced message from entities
        let enhancedMessage = message;
        if (entities.projectKey) enhancedMessage += ` dự án ${entities.projectKey}`;
        if (entities.timeframe) {
          const timeMap = {
            '30d': '30 ngày gần đây',
            '3m': '3 tháng',
            '6m': '6 tháng', 
            'sprint': 'sprint hiện tại'
          };
          enhancedMessage += ` ${timeMap[entities.timeframe] || entities.timeframe}`;
        }
        
        const jql = await generateJQL(env, enhancedMessage, entities.projectKey || '');
        const jiraResults = await executeJQL(env, jql);
        
        const statusCount = {};
        const priorityCount = {};
        const assigneeCount = {};
        const typeCount = {};
        
        jiraResults.forEach(issue => {
          statusCount[issue.status] = (statusCount[issue.status] || 0) + 1;
          priorityCount[issue.priority] = (priorityCount[issue.priority] || 0) + 1;
          const assignee = issue.assignee || 'Unassigned';
          assigneeCount[assignee] = (assigneeCount[assignee] || 0) + 1;
          const issueType = issue.type || 'Unknown';
          typeCount[issueType] = (typeCount[issueType] || 0) + 1;
        });

        let prompt = `Phân tích dự án với ${jiraResults.length} issues dựa trên câu hỏi: "${message}"

THỐNG KÊ:
- Trạng thái: ${Object.entries(statusCount).map(([k,v]) => `${k}(${v})`).join(', ')}
- Ưu tiên: ${Object.entries(priorityCount).map(([k,v]) => `${k}(${v})`).join(', ')}
- Phân công: ${Object.entries(assigneeCount).map(([k,v]) => `${k}(${v})`).join(', ')}

Hãy trả lời ngắn gọn theo format:

▪ Tình hình:
[nội dung tình hình]

▪ Vấn đề:
[nội dung vấn đề]

▪ Đề xuất:
[nội dung đề xuất]`;

        const answer = await askGrok(env, prompt);
        
        // Add assistant response to history
        addToConversationHistory(chatId, 'assistant', answer, mode);
        
        return { 
          success: true, 
          response: answer, 
          jql: jql, 
          results: jiraResults,
          statistics: {
            status: statusCount,
            priority: priorityCount,
            assignee: assigneeCount,
            type: typeCount
          },
          mode: 'natural'
        };
      }
      
      // Medium confidence: Ask for confirmation
      if (intentData.confidence >= 0.4) {
        // Load available projects for smart suggestions
        let availableProjects = [];
        try {
          const BASE_JIRA = envJiraBase(env);
          const r = await fetch(`${BASE_JIRA}/rest/api/3/project`, {
            headers: {
              'Accept': 'application/json',
              'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
            }
          });
          if (r.ok) availableProjects = await r.json();
        } catch (e) {}
        
        const confirmation = await generateSmartConfirmation(env, intentData, availableProjects);
        
        const response = `${intentData.suggestedQuestion}\n\n${confirmation.confirmationText}`;
        
        // Add assistant response to history
        addToConversationHistory(chatId, 'assistant', response, mode);
        
        // Store current state for multi-step clarification
        return {
          success: true,
          response: response,
          needsClarification: true,
          clarificationStep: 'natural_clarification',
          clarificationData: {
            intentData: intentData,
            currentMissingInfo: confirmation.currentMissingInfo,
            availableProjects: availableProjects,
            entities: intentData.entities,
            missingInfo: intentData.missingInfo,
            originalMessage: message
          },
          options: confirmation.options,
          mode: 'natural'
        };
      }
      
      // Low confidence: General response
      const generalResponse = await askGrok(env, `User hỏi: "${message}". Hãy trả lời ngắn gọn và hỏi lại rõ hơn về dự án, thời gian, loại thông tin cần xem.`);
      
      addToConversationHistory(chatId, 'assistant', generalResponse, mode);
      
      return {
        success: true,
        response: generalResponse,
        mode: 'natural'
      };
      
    } catch (error) {
      return { 
        success: false, 
        error: 'Có lỗi khi xử lý yêu cầu của bạn.', 
        details: error.message 
      };
    }
  }

  // MENU MODE: Original clarification flow
  // Kiểm tra nếu đang trong quá trình clarification
  if (clarificationStep) {
    // Handle natural mode clarification separately
    if (clarificationStep === 'natural_clarification') {
      return await handleNaturalClarification(env, message, clarificationData, chatId, mode);
    }
    
    return await handleClarificationStep(env, message, clarificationStep, clarificationData);
  }

  // Kiểm tra nếu message cần clarification
  const clarificationNeeded = needsClarification(message);
  if (clarificationNeeded) {
    return await startClarificationFlow(env, message, clarificationNeeded, platform);
  }

  // Xử lý message thông thường
  try {
    // Lấy dữ liệu Jira - AI tự phân tích thời gian từ message
    const jql = await generateJQL(env, message, projectKey);
    const jiraResults = await executeJQL(env, jql);
    
    // Tạo dữ liệu thống kê
    const statusCount = {};
    const priorityCount = {};
    const assigneeCount = {};
    const typeCount = {};
    
    jiraResults.forEach(issue => {
      statusCount[issue.status] = (statusCount[issue.status] || 0) + 1;
      priorityCount[issue.priority] = (priorityCount[issue.priority] || 0) + 1;
      const assignee = issue.assignee || 'Unassigned';
      assigneeCount[assignee] = (assigneeCount[assignee] || 0) + 1;
      const issueType = issue.type || 'Unknown';
      typeCount[issueType] = (typeCount[issueType] || 0) + 1;
    });

    // Tạo prompt cho AI với dữ liệu thống kê
    let prompt = `Phân tích dự án với ${jiraResults.length} issues dựa trên câu hỏi: "${message}"

THỐNG KÊ:
- Trạng thái: ${Object.entries(statusCount).map(([k,v]) => `${k}(${v})`).join(', ')}
- Ưu tiên: ${Object.entries(priorityCount).map(([k,v]) => `${k}(${v})`).join(', ')}
- Phân công: ${Object.entries(assigneeCount).map(([k,v]) => `${k}(${v})`).join(', ')}

Hãy trả lời ngắn gọn theo format:

▪ Tình hình:
[nội dung tình hình]

▪ Vấn đề:
[nội dung vấn đề]

▪ Đề xuất:
[nội dung đề xuất]

Mỗi đầu mục phải xuống dòng riêng. Không cần viết "Dưới đây là..." hay giới thiệu dài dòng.`;

    const answer = await askGrok(env, prompt);
    return { 
      success: true, 
      response: answer, 
      jql: jql, 
      results: jiraResults,
      statistics: {
        status: statusCount,
        priority: priorityCount,
        assignee: assigneeCount
      }
    };
  } catch (error) {
    return { 
      success: false, 
      error: 'Có lỗi khi xử lý yêu cầu của bạn.', 
      details: error.message 
    };
  }
}


async function generateJQL(env, message, defaultProjectKey) {
  let baseJql = '';
  
  // Nếu có project key thì chỉ lấy dữ liệu của project đó
  if (defaultProjectKey && defaultProjectKey.trim()) {
    const fallbackKey = defaultProjectKey.toUpperCase().replace(/[^A-Z0-9_]/g, '');
    baseJql = `project = "${fallbackKey}"`;
  } else {
    // Nếu không có project key thì lấy tất cả dự án
    baseJql = 'project is not EMPTY';
  }
  
  // AI tự động phân tích thời gian từ câu hỏi
  const messageText = String(message || '').toLowerCase();
  
  if (messageText.includes('3 tháng') || messageText.includes('ba tháng') || messageText.includes('3 months')) {
    baseJql += ' AND created >= -90d';
  } else if (messageText.includes('6 tháng') || messageText.includes('sáu tháng') || messageText.includes('6 months')) {
    baseJql += ' AND created >= -180d';
  } else if (messageText.includes('sprint') || messageText.includes('active sprint') || messageText.includes('sprint hiện tại')) {
    baseJql += ' AND sprint in openSprints()';
  } else if (messageText.includes('1 năm') || messageText.includes('một năm') || messageText.includes('12 tháng')) {
    baseJql += ' AND created >= -365d';
  } else {
    // Mặc định 30 ngày
    baseJql += ' AND created >= -30d';
  }
  
  return `${baseJql} ORDER BY created DESC`;
}



async function executeJQL(env, jql) {
  const BASE_JIRA = envJiraBase(env);
  const API_BASE_URL = `${BASE_JIRA}/rest/api/3/search/jql`;

  try {
    const m = jql.match(/\bLIMIT\s+(\d+)/i);
    const maxResults = m ? Math.max(1, Math.min(1000, parseInt(m[1], 10))) : 1000;
    const cleanJql = jql.replace(/\bLIMIT\s+\d+/ig, '').trim();

    let allResults = [];
    let nextPageToken = null;
    const batchSize = 100; // Lấy từng batch 100 issues

    // Loop để lấy hết tất cả tickets sử dụng nextPageToken
    while (true) {
      // Tạo URL với query parameters
      const params = new URLSearchParams({
        jql: cleanJql,
        maxResults: batchSize.toString(),
        fields: 'key,summary,status,priority,assignee'
      });

      // Thêm nextPageToken nếu có
      if (nextPageToken) {
        params.append('nextPageToken', nextPageToken);
      }

      const API_URL = `${API_BASE_URL}?${params.toString()}`;

      const r = await fetch(API_URL, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
        }
      });

      if (!r.ok) {
        throw new StepError('jira', `JQL ${r.status}: ${await r.text()}`);
      }

      const data = await r.json();

      if (!data.issues || !Array.isArray(data.issues)) {
        break;
      }

      const batchResults = data.issues.map(issue => ({
        key: issue.key,
        summary: issue.fields.summary,
        status: issue.fields.status?.name,
        priority: issue.fields.priority ? issue.fields.priority.name : 'Not set',
        assignee: issue.fields.assignee ? issue.fields.assignee.displayName : null
      }));

      allResults = allResults.concat(batchResults);

      // Kiểm tra xem có trang tiếp theo không
      nextPageToken = data.nextPageToken || null;

      // Nếu không có nextPageToken hoặc đã lấy đủ số lượng yêu cầu thì dừng
      if (!nextPageToken || data.issues.length < batchSize || allResults.length >= maxResults) {
        break;
      }
    }

    // Giới hạn kết quả theo maxResults nếu cần
    return allResults.slice(0, maxResults);
  } catch (error) {
    throw error;
  }
}

function generateResponse(message, jql, results) {
  const count = results.length;

  if (count === 0) {
    return `Tôi đã tìm kiếm theo câu hỏi của bạn nhưng không tìm thấy kết quả nào. JQL đã sử dụng là:\n\n\`${jql}\``;
  }

  let response = `Tôi đã tìm thấy ${count} kết quả cho câu hỏi của bạn.\n\nJQL đã sử dụng là:\n\`${jql}\``;

  if (count > 10) {
    response += `\n\n(Chỉ hiển thị 10 kết quả đầu)`;
  }

  return response;
}

// ============================================================================
// 3) ZALO INTEGRATION
// ============================================================================
async function zaloSendMessage(env, chatId, text) {
  if (!env.ZALO_BOT_TOKEN) throw new StepError('zalo', 'Missing ZALO_BOT_TOKEN');
  const api = `https://bot-api.zapps.me/bot${env.ZALO_BOT_TOKEN}/sendMessage`;

  const payloadText = String(text || '');
  const CHUNK = 900; // an toàn
  const parts = payloadText.match(new RegExp(`[\\s\\S]{1,${CHUNK}}`, 'g')) || [''];

  let lastRes = null;
  for (const p of parts) {
    const payload = { chat_id: String(chatId), text: p };

    // retry nhẹ khi 429 (rate limit)
    let attempt = 0;
    for (;;) {
      const r = await fetch(api, {
        method: 'POST',
        headers: { 'content-type': 'application/json; charset=utf-8' },
        body: JSON.stringify(payload)
      });
      const t = await r.text();
      if (r.ok) {
        try { lastRes = JSON.parse(t); } catch { lastRes = { ok: true, raw: t }; }
        break;
      }
      if (r.status === 429 && attempt < 2) {
        await new Promise(rs => setTimeout(rs, 500 * (attempt + 1)));
        attempt++;
        continue;
      }
      throw new StepError('zalo', `sendMessage ${r.status}: ${t}`);
    }
  }
  return lastRes;
}

async function zaloSetWebhook(env, webhookUrl, secretToken) {
  if (!env.ZALO_BOT_TOKEN) throw new StepError('zalo', 'Missing ZALO_BOT_TOKEN');
  const api = `https://bot-api.zapps.me/bot${env.ZALO_BOT_TOKEN}/setWebhook`;
  const secret = secretToken || env.ZALO_SECRET_TOKEN || 'dev-secret';

  const r = await fetch(api, {
    method: 'POST',
    headers: { 'content-type': 'application/json; charset=utf-8' },
    body: JSON.stringify({ url: webhookUrl, secret_token: secret })
  });
  const t = await r.text();
  if (!r.ok) throw new StepError('zalo', `setWebhook ${r.status}: ${t}`);
  try { return JSON.parse(t); } catch { return { ok: true, raw: t }; }
}


function buildZaloReply(original, jql, results) {
  const list = Array.isArray(results) ? results : [];
  if (!jql) {
    // Không phải Jira → trả lời tự nhiên
    return (original && typeof original === 'string')
      ? `✅ ${String(original).slice(0, 1800)}` // Reserve space for emoji
      : '✅ OK';
  }
  
  // Format response with emoji and structure for Zalo
  if (original && typeof original === 'string') {
    let response = `📊 **KẾT QUẢ PHÂN TÍCH**\n\n`;
    response += String(original).slice(0, 800); // Reserve more space for ticket list
    
    if (list.length > 0) {
      response += `\n\n📈 **TỔNG QUAN:**`;
      response += `\n• Tổng số issues: ${list.length}`;
      
      // Count statuses
      const statusCount = {};
      list.forEach(item => {
        statusCount[item.status] = (statusCount[item.status] || 0) + 1;
      });
      
      Object.entries(statusCount).forEach(([status, count]) => {
        const emoji = getStatusEmoji(status);
        response += `\n• ${emoji} ${status}: ${count}`;
      });
      
      // Add detailed ticket list (first 10 tickets)
      response += `\n\n� **DANH SÁCH TICKETS:**`;
      const displayLimit = Math.min(10, list.length);
      
      for (let i = 0; i < displayLimit; i++) {
        const ticket = list[i];
        const statusEmoji = getStatusEmoji(ticket.status);
        const priorityEmoji = getPriorityEmoji(ticket.priority);
        
        response += `\n\n${i + 1}. **${ticket.key}**`;
        response += `\n   ${ticket.summary}`;
        response += `\n   ${statusEmoji} ${ticket.status} | ${priorityEmoji} ${ticket.priority}`;
        if (ticket.assignee) {
          response += ` | 👤 ${ticket.assignee}`;
        }
      }
      
      if (list.length > displayLimit) {
        response += `\n\n... và ${list.length - displayLimit} tickets khác`;
      }
    }
    
    response += `\n\n💬 Cần hỗ trợ thêm? Gõ "Chào PMO" để xem menu!`;
    return response;
  }
  
  // Fallback nếu không có nội dung gốc
  if (list.length === 0) {
    return '❌ Không tìm thấy kết quả theo câu hỏi của bạn.\n\n💡 Thử mô tả cụ thể hơn hoặc thay đổi từ khóa tìm kiếm.';
  }
  
  return `✅ Đã tìm thấy ${list.length} kết quả cho câu hỏi của bạn.\n\n📊 Gửi tin nhắn khác để xem phân tích chi tiết!`;
}

function getStatusEmoji(status) {
  const emojiMap = {
    'To Do': '📋',
    'In Progress': '🔄',
    'Done': '✅',
    'Backlog': '📝',
    'Review': '👀',
    'Testing': '🧪',
    'Blocked': '🚫',
    'Bug': '🐛',
    'Sub-task': '🎯'
  };
  
  return emojiMap[status] || '▫️';
}

function getPriorityEmoji(priority) {
  const emojiMap = {
    'Highest': '🔴',
    'High': '🟠',
    'Medium': '🟡',
    'Low': '🟢',
    'Lowest': '⚪',
    'Critical': '🚨',
    'Major': '🔴',
    'Minor': '🟡',
    'Trivial': '⚪'
  };
  
  return emojiMap[priority] || '▫️';
}

// ============================================================================
// GREETING SYSTEM FOR ZALO
// ============================================================================

function isGreetingTrigger(text) {
  const normalizedText = String(text || '').toLowerCase().trim();
  const greetingPatterns = [
    'chào pmo',
    'chao pmo', 
    'hello pmo',
    'hi pmo',
    'start',
    'bắt đầu',
    'khởi động',
    'menu',
    'help',
    'hỗ trợ'
  ];
  
  return greetingPatterns.some(pattern => normalizedText.includes(pattern));
}

async function sendGreetingMenu(env, chatId) {
  const greetingMessage = buildGreetingMessage();
  
  // Set context for main menu selection
  const newContext = {
    step: 'awaiting_main_menu',
    data: {
      menuType: 'main',
      options: getMainMenuOptions()
    }
  };
  
  setZaloContext(chatId, newContext);
  console.log(`[Zalo Debug] Set greeting menu context for ${chatId}:`, newContext);
  
  await zaloSendMessage(env, chatId, greetingMessage);
}

function buildGreetingMessage() {
  return `👋 **Xin chào! Tôi là PMO Assistant**

🤖 Tôi có thể hỗ trợ bạn phân tích và quản lý dự án:

📊 1️⃣ Tổng quan tiến độ dự án
🚨 2️⃣ Phân tích rủi ro
📋 3️⃣ Kiểm tra công việc & tasks  
🐛 4️⃣ Báo cáo chất lượng
💬 5️⃣ Trò chuyện tự nhiên

👆 **Hãy chọn số (1-5) để tiếp tục**

💡 *Chọn 5 để hỏi thoải mái theo cách của bạn, tôi sẽ hiểu và hỗ trợ!*`;
}

function getMainMenuOptions() {
  return [
    { id: 'main-progress', text: 'Tổng quan tiến độ dự án', type: 'progress' },
    { id: 'main-risk', text: 'Phân tích rủi ro', type: 'risk' },
    { id: 'main-tasks', text: 'Kiểm tra công việc & tasks', type: 'tasks' },
    { id: 'main-quality', text: 'Báo cáo chất lượng', type: 'quality' },
    { id: 'main-natural', text: 'Trò chuyện tự nhiên', type: 'natural' }
  ];
}

async function handleMainMenuChoice(env, chatId, userInput, context) {
  try {
    const mainOptions = context.data.options;
    const choice = parseMainMenuChoice(userInput, mainOptions);
    
    if (!choice) {
      // Fallback for main menu
      const fallbackMessage = `🤔 Mình chưa hiểu lựa chọn của bạn.

👆 Hãy chọn số **1-5** từ menu trên

🔄 Hoặc gõ **"Chào PMO"** để xem lại menu`;
      
      await zaloSendMessage(env, chatId, fallbackMessage);
      return { completed: false, context };
    }
    
    // NEW: Handle Natural Chat mode
    if (choice.type === 'natural') {
      // Switch to natural mode
      setConversationMode(chatId, 'natural');
      
      const naturalWelcome = `💬 **Chế độ Trò chuyện tự nhiên đã bật!**

Bây giờ bạn có thể hỏi thoải mái, ví dụ:
• "Dự án ABC có vấn đề gì?"
• "Tiến độ sprint hiện tại thế nào?"
• "Có task nào quá hạn không?"

🤖 Tôi sẽ tự động hiểu và hỏi lại nếu cần thêm thông tin.

🔄 Gõ **"Menu"** hoặc **"Chào PMO"** để quay lại menu chính.`;

      await zaloSendMessage(env, chatId, naturalWelcome);
      
      // Clear context, switch to natural mode
      clearZaloContext(chatId);
      
      return { completed: true };
    }
    
    // UPDATED FLOW: Redirect to project selection instead of executing immediately
    // Step 1: User chose main menu (1-4) -> Now ask them to choose project
    const projectSelectionFlow = await showProjectListWithSearch(env, {
      originalMessage: getMessageFromMenuType(choice.type),
      clarificationType: choice.type,
      platform: 'zalo'
    });
    
    if (projectSelectionFlow.success && projectSelectionFlow.needsClarification) {
      const zaloClarification = formatZaloClarification(projectSelectionFlow);
      const newContext = {
        step: 'awaiting_clarification', // Changed from projectSelectionFlow.clarificationStep
        data: {
          ...projectSelectionFlow.clarificationData,
          currentStep: projectSelectionFlow.clarificationStep // Store the actual step here
        }
      };
      
      await zaloSendMessage(env, chatId, zaloClarification);
      return { completed: false, context: newContext };
    }
    
    return { completed: true };
  } catch (e) {
    console.error('handleMainMenuChoice error', e);
    await zaloSendMessage(env, chatId, '❌ Có lỗi khi xử lý lựa chọn. Hãy thử lại hoặc gõ "Chào PMO"');
    return { completed: true };
  }
}

function parseMainMenuChoice(userInput, options) {
  const input = String(userInput || '').trim().toLowerCase();
  
  // Try to match by number
  const numberMatch = input.match(/^\d+$/);
  if (numberMatch) {
    const index = parseInt(numberMatch[0]) - 1;
    if (index >= 0 && index < options.length) {
      return options[index];
    }
  }
  
  // Try to match by keywords
  const keywordMap = {
    'tiến độ': 'progress',
    'progress': 'progress',
    'rủi ro': 'risk',
    'risk': 'risk',
    'công việc': 'tasks',
    'task': 'tasks',
    'chất lượng': 'quality',
    'quality': 'quality',
    'bug': 'quality'
  };
  
  for (const [keyword, type] of Object.entries(keywordMap)) {
    if (input.includes(keyword)) {
      return options.find(opt => opt.type === type);
    }
  }
  
  return null;
}

function getMessageFromMenuType(type) {
  const messageMap = {
    'progress': 'tổng quan tiến độ',
    'risk': 'rủi ro dự án',
    'tasks': 'công việc tasks',
    'quality': 'chất lượng bugs',
    'report': 'báo cáo thống kê',
    'custom': 'tùy chỉnh'
  };
  
  return messageMap[type] || 'thông tin dự án';
}

// Zalo context storage with expiry (simple in-memory for demo, should use persistent storage in production)
const zaloContexts = new Map();
const CONTEXT_EXPIRY_MS = 10 * 60 * 1000; // 10 minutes

function setZaloContext(chatId, context) {
  zaloContexts.set(chatId, {
    ...context,
    timestamp: Date.now()
  });
}

function getZaloContext(chatId) {
  const ctx = zaloContexts.get(chatId);
  if (!ctx) return null;
  
  // Check if expired
  if (Date.now() - ctx.timestamp > CONTEXT_EXPIRY_MS) {
    zaloContexts.delete(chatId);
    return null;
  }
  
  return ctx;
}

function clearZaloContext(chatId) {
  zaloContexts.delete(chatId);
}

async function handleZaloMessage(env, chatId, text) {
  try {
    // Get or create context for this chat
    let context = getZaloContext(chatId) || { step: null, data: {} };
    
    console.log(`[Zalo Debug] ChatID: ${chatId}, Text: "${text}", Context Step: ${context.step}, Current Step: ${context.data?.currentStep}`);
    
    // Check for greeting trigger
    if (isGreetingTrigger(text)) {
      // Clear natural mode and reset to menu
      clearConversationHistory(chatId);
      setConversationMode(chatId, 'menu');
      await sendGreetingMenu(env, chatId);
      return;
    }
    
    // Check current conversation mode
    const currentMode = getConversationMode(chatId);
    
    // NATURAL MODE HANDLING
    if (currentMode === 'natural') {
      console.log('[Zalo Debug] Natural mode active');
      
      // Process with natural conversation AI
      const out = await processChatMessage(env, text, { 
        platform: 'zalo',
        chatId: chatId,
        mode: 'natural'
      });

      if (!out.success) {
        const msg = out.error || '❌ Có lỗi khi xử lý. Vui lòng thử lại sau.';
        await zaloSendMessage(env, chatId, msg);
        return;
      }

      // Send response
      if (out.jql && out.results) {
        const reply = buildZaloReply(out.response, out.jql, out.results || []);
        await zaloSendMessage(env, chatId, reply);
      } else {
        await zaloSendMessage(env, chatId, out.response || '✅ OK');
      }
      
      return;
    }
    
    // FALLBACK: If no context but user sends a number 1-5, assume they're responding to menu
    if (!context.step || context.step === null) {
      const numberMatch = String(text).trim().match(/^[1-5]$/);
      if (numberMatch) {
        console.log('[Zalo Debug] No context but user sent 1-5, assuming menu response');
        // Recreate menu context
        context = {
          step: 'awaiting_main_menu',
          data: {
            menuType: 'main',
            options: getMainMenuOptions()
          }
        };
        setZaloContext(chatId, context);
      }
    }
    
    // Check if user is responding to main menu
    if (context.step === 'awaiting_main_menu') {
      console.log('[Zalo Debug] Handling main menu choice');
      const response = await handleMainMenuChoice(env, chatId, text, context);
      if (response.completed) {
        clearZaloContext(chatId); // Clear context after completion
      } else {
        setZaloContext(chatId, response.context); // Update context
        console.log('[Zalo Debug] Updated context:', response.context);
      }
      return;
    }
    
    // Check if user is responding to a clarification
    if (context.step === 'awaiting_clarification') {
      console.log('[Zalo Debug] Handling clarification, current step:', context.data?.currentStep);
      const response = await handleZaloChoice(env, chatId, text, context);
      if (response.completed) {
        clearZaloContext(chatId); // Clear context after completion
      } else {
        setZaloContext(chatId, response.context); // Update context
        console.log('[Zalo Debug] Updated context:', response.context);
      }
      return;
    }

    console.log('[Zalo Debug] No context match, processing as new message');
    // Process new message (menu mode by default)
    const out = await processChatMessage(env, text, { 
      platform: 'zalo',
      chatId: chatId,
      mode: 'menu'
    });

    if (!out.success) {
      const msg = out.error || '❌ Có lỗi khi xử lý. Vui lòng thử lại sau.';
      await zaloSendMessage(env, chatId, msg);
      return;
    }

    if (out.needsClarification) {
      // Store context and send numbered options
      const zaloClarification = formatZaloClarification(out);
      zaloContexts.set(chatId, {
        step: 'awaiting_clarification',
        data: {
          originalMessage: out.originalMessage,
          clarificationType: out.clarificationType,
          options: out.options
        }
      });
      await zaloSendMessage(env, chatId, zaloClarification);
      return;
    }

    if (!out.jql) {
      await zaloSendMessage(env, chatId, out.response || '✅ OK');
      return;
    }

    const reply = buildZaloReply(out.response, out.jql, out.results || []);
    await zaloSendMessage(env, chatId, reply);
  } catch (e) {
    console.error('handleZaloMessage error', e);
    try { await zaloSendMessage(env, chatId, '❌ Xin lỗi, hệ thống đang bận. Thử lại sau nhé.'); } catch {}
  }
}

async function handleZaloChoice(env, chatId, userInput, context) {
  try {
    // Handle main menu selection
    if (context.step === 'awaiting_main_menu') {
      return await handleMainMenuChoice(env, chatId, userInput, context);
    }
    
    // Get the current step from context data
    const currentStep = context.data.currentStep;
    
    // Handle project search input (free text)
    if (currentStep === 'project_search_input') {
      const result = await handleProjectSearchInput(env, userInput, context.data);
      if (result.success && result.needsClarification) {
        const zaloClarification = formatZaloClarification(result);
        const newContext = {
          step: 'awaiting_clarification',
          data: {
            ...result.clarificationData,
            currentStep: result.clarificationStep
          }
        };
        await zaloSendMessage(env, chatId, zaloClarification);
        return { completed: false, context: newContext };
      } else if (result.success) {
        const reply = buildZaloReply(result.response, result.jql, result.results || []);
        await zaloSendMessage(env, chatId, reply);
        return { completed: true };
      } else {
        await zaloSendMessage(env, chatId, `❌ ${result.error || 'Có lỗi khi tìm kiếm dự án'}`);
        return { completed: true };
      }
    }
    
    const { options, originalMessage, clarificationType } = context.data;
    
    // Parse user input (number or text)
    const choice = parseUserChoice(userInput, options);
    
    if (!choice) {
      // Fallback: Ask AI to clarify what's needed
      const fallbackResponse = await generateZaloFallback(env, userInput, originalMessage, options);
      await zaloSendMessage(env, chatId, fallbackResponse);
      return { completed: false, context }; // Keep same context
    }

    // Route to appropriate handler based on action
    if (choice.action === 'select_project_from_results') {
      const result = await handleProjectSelection(env, choice.id, context.data);
      if (result.success && result.needsClarification) {
        const zaloClarification = formatZaloClarification(result);
        const newContext = {
          step: 'awaiting_clarification',
          data: {
            ...result.clarificationData,
            currentStep: result.clarificationStep
          }
        };
        await zaloSendMessage(env, chatId, zaloClarification);
        return { completed: false, context: newContext };
      } else if (result.success) {
        const reply = buildZaloReply(result.response, result.jql, result.results || []);
        await zaloSendMessage(env, chatId, reply);
        return { completed: true };
      } else {
        await zaloSendMessage(env, chatId, `❌ ${result.error || 'Có lỗi khi xử lý'}`);
        return { completed: true };
      }
    } else if (choice.action === 'select_time_period') {
      const result = await executeFinalQueryWithTimeframe(env, context.data, choice.id);
      if (result.success) {
        const reply = buildZaloReply(result.response, result.jql, result.results || []);
        await zaloSendMessage(env, chatId, reply);
        return { completed: true };
      } else {
        await zaloSendMessage(env, chatId, `❌ ${result.error || 'Có lỗi khi xử lý yêu cầu'}`);
        return { completed: true };
      }
    } else if (choice.action === 'manual_search_project') {
      const result = await initiateProjectSearch(env, context.data);
      if (result.success && result.needsClarification) {
        const zaloClarification = formatZaloClarification(result);
        const newContext = {
          step: 'awaiting_clarification',
          data: {
            ...result.clarificationData,
            currentStep: result.clarificationStep
          }
        };
        await zaloSendMessage(env, chatId, zaloClarification);
        return { completed: false, context: newContext };
      }
      return { completed: true };
    } else if (choice.action === 'execute_query') {
      const result = await executeSmartQuery(env, choice.id, originalMessage);
      if (result.success) {
        const reply = buildZaloReply(result.response, result.jql, result.results || []);
        await zaloSendMessage(env, chatId, reply);
      } else {
        await zaloSendMessage(env, chatId, `❌ ${result.error || 'Có lỗi khi xử lý yêu cầu'}`);
      }
      return { completed: true };
    } else {
      // Handle custom selection or other actions
      const nextStep = await handleCustomZaloSelection(env, choice, context.data);
      if (nextStep.needsMoreInput) {
        await zaloSendMessage(env, chatId, nextStep.message);
        return { completed: false, context: { step: 'awaiting_clarification', data: { ...nextStep.data, currentStep: nextStep.step } } };
      } else {
        const reply = buildZaloReply(nextStep.response, nextStep.jql, nextStep.results || []);
        await zaloSendMessage(env, chatId, reply);
        return { completed: true };
      }
    }
  } catch (e) {
    console.error('handleZaloChoice error', e);
    await zaloSendMessage(env, chatId, '❌ Có lỗi khi xử lý lựa chọn của bạn. Thử lại nhé.');
    return { completed: true };
  }
}

function parseUserChoice(userInput, options) {
  const input = String(userInput || '').trim().toLowerCase();
  
  // Try to match by number
  const numberMatch = input.match(/^\d+$/);
  if (numberMatch) {
    const index = parseInt(numberMatch[0]) - 1;
    if (index >= 0 && index < options.length) {
      return options[index];
    }
  }
  
  // Try to match by text content
  for (const option of options) {
    const optionText = option.text.toLowerCase();
    if (input.includes(optionText) || optionText.includes(input)) {
      return option;
    }
    
    // Check specific keywords
    if (option.id.includes('30d') && (input.includes('30') || input.includes('tháng'))) {
      return option;
    }
    if (option.id.includes('3m') && (input.includes('3 tháng') || input.includes('ba tháng'))) {
      return option;
    }
    if (option.id.includes('sprint') && input.includes('sprint')) {
      return option;
    }
    if (option.id.includes('custom') && (input.includes('tùy chỉnh') || input.includes('khác'))) {
      return option;
    }
  }
  
  return null;
}

function formatZaloClarification(clarificationData) {
  const { response, options } = clarificationData;
  
  let message = `🤖 ${response}\n\n`;
  
  options.forEach((option, index) => {
    const emoji = getOptionEmoji(option.id);
    message += `${emoji} ${index + 1}️⃣ ${option.text}\n`;
  });
  
  message += `\n👆 Hãy reply số (1-${options.length}) hoặc gõ yêu cầu cụ thể`;
  
  return message;
}

function getOptionEmoji(optionId) {
  const emojiMap = {
    'progress-all-30d': '📊',
    'progress-all-3m': '📈',
    'progress-sprint': '🏃‍♂️',
    'progress-custom': '⚙️',
    
    'risk-schedule': '⏰',
    'risk-quality': '🐛',
    'risk-resource': '👥',
    'risk-all': '🚨',
    
    'tasks-overdue': '🔴',
    'tasks-inprogress': '🟡',
    'tasks-performance': '⚡',
    'tasks-workload': '📋',
    
    'quality-bugs': '🐞',
    'quality-critical': '🚨',
    'quality-trend': '📉',
    'quality-team': '👨‍💼',
    
    'report-summary': '📄',
    'report-performance': '📊',
    'report-timeline': '📅',
    'report-custom': '⚙️'
  };
  
  return emojiMap[optionId] || '▫️';
}

async function generateZaloFallback(env, userInput, originalMessage, options) {
  try {
    const optionsList = options.map((opt, idx) => `${idx + 1}. ${opt.text}`).join('\n');
    
    const fallbackPrompt = `User đang cần hỗ trợ về: "${originalMessage}"
    
Tôi đã đưa ra các lựa chọn:
${optionsList}

Nhưng user trả lời: "${userInput}"

Hãy phản hồi ngắn gọn (dưới 200 từ) để:
1. Làm rõ user cần gì cụ thể
2. Hướng dẫn user chọn số hoặc mô tả rõ hơn
3. Sử dụng emoji phù hợp cho Zalo

Format: Thân thiện, dễ hiểu, có emoji`;

    const response = await askGrok(env, fallbackPrompt);
    return `🤔 ${response}\n\n💡 Hoặc bạn có thể chọn số từ danh sách trên nhé!`;
  } catch (e) {
    return `🤔 Mình chưa hiểu rõ yêu cầu của bạn.\n\n💡 Hãy chọn số (1-${options.length}) từ danh sách trên, hoặc mô tả cụ thể hơn những gì bạn cần nhé!`;
  }
}

async function handleCustomZaloSelection(env, choice, contextData) {
  // Handle custom selections that need more steps
  if (choice.action === 'custom_selection') {
    // For now, redirect to a simpler flow for Zalo
    return {
      needsMoreInput: false,
      response: "📋 Để tùy chỉnh chi tiết, hãy mô tả cụ thể:\n\n• Dự án nào? (VD: ABC, XYZ hoặc 'tất cả')\n• Thời gian? (VD: '2 tuần', '1 tháng', 'sprint')\n• Loại thông tin? (VD: 'bugs', 'tiến độ', 'rủi ro')\n\n💬 Gửi tin nhắn mới với thông tin này nhé!",
      jql: null,
      results: []
    };
  }
  
  return {
    needsMoreInput: false,
    response: "✅ Đã xử lý yêu cầu của bạn!",
    jql: null,
    results: []
  };
}


// ============================================================================
// 4) R2 SIGNING
// ============================================================================
function toHex(buf) { return [...new Uint8Array(buf)].map(b => b.toString(16).padStart(2, '0')).join(''); }
async function sha256Hex(str) { const enc = new TextEncoder(); return toHex(await crypto.subtle.digest('SHA-256', enc.encode(str))); }
async function hmac(key, data) {
  const enc = new TextEncoder();
  const cryptoKey = key instanceof CryptoKey ? key : await crypto.subtle.importKey('raw', typeof key === 'string' ? enc.encode(key) : key, { name: 'HMAC', hash: 'SHA-256' }, false, ['sign']);
  return crypto.subtle.sign('HMAC', cryptoKey, enc.encode(data));
}
async function getSigningKey(secret, shortDate) {
  const kDate = await hmac('AWS4' + secret, shortDate);
  const kRegion = await hmac(kDate, 'auto');
  const kService = await hmac(kRegion, 's3');
  return hmac(kService, 'aws4_request');
}
async function presignURL(env, method, key, expiresSec) {
  const bucket = env.R2_BUCKET || 'db-meetingnote';
  const accountId = env.R2_ACCOUNT_ID, accessKey = env.R2_ACCESS_KEY_ID, secretKey = env.R2_SECRET_ACCESS_KEY;
  if (!accountId || !accessKey || !secretKey) throw new Error('Missing R2 signing secrets');

  const host = accountId + '.r2.cloudflarestorage.com';
  const now = new Date();
  const amzDate = now.toISOString().replace(/[:-]|\..*/g, '').slice(0, 15) + 'Z';
  const shortDate = amzDate.slice(0, 8);
  const credential = accessKey + '/' + shortDate + '/auto/s3/aws4_request';

  const qs = new URLSearchParams({
    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
    'X-Amz-Credential': credential,
    'X-Amz-Date': amzDate,
    'X-Amz-Expires': String(expiresSec),
    'X-Amz-SignedHeaders': 'host'
  });
  const canonicalQuery = qs.toString();
  const canonicalHeaders = 'host:' + host + '\n';
  const signedHeaders = 'host';
  const payloadHash = 'UNSIGNED-PAYLOAD';
  const uri = '/' + bucket + '/' + encodeURIComponent(key);

  const canonicalRequest = [method, uri, canonicalQuery, canonicalHeaders, signedHeaders, payloadHash].join('\n');
  const stringToSign = ['AWS4-HMAC-SHA256', amzDate, shortDate + '/auto/s3/aws4_request', await sha256Hex(canonicalRequest)].join('\n');

  const kSigning = await getSigningKey(secretKey, shortDate);
  const signature = toHex(await hmac(await kSigning, stringToSign));
  return 'https://' + host + uri + '?' + canonicalQuery + '&X-Amz-Signature=' + signature;
}

// ============================================================================
// 5) MEETING PIPELINE (Deepgram → Grok)
// ============================================================================
function extractTranscript(data) {
  if (!data || typeof data !== 'object') return '';
  if (typeof data.transcript === 'string' && data.transcript.trim()) return data.transcript;
  const t1 = data?.results?.channels?.[0]?.alternatives?.[0]?.transcript;
  if (typeof t1 === 'string' && t1.trim()) return t1;
  const t2 = data?.channels?.[0]?.alternatives?.[0]?.transcript;
  if (typeof t2 === 'string' && t2.trim()) return t2;
  const t3 = Array.isArray(data?.results) ? data.results?.[0]?.alternatives?.[0]?.transcript : '';
  if (typeof t3 === 'string' && t3.trim()) return t3;
  if (Array.isArray(data?.results?.utterances) && data.results.utterances.length) {
    const join = data.results.utterances.map(u => u?.transcript || u?.text || '').filter(Boolean).join(' ').trim();
    if (join) return join;
  }
  return '';
}

// Cập nhật hàm buildLLMPrompt
function buildLLMPrompt(transcript, templateType = 'mom') {
  return buildMeetingNotesPrompt(transcript);
}

function buildMeetingNotesPrompt(transcript) {
  return [
    '# TẠO BÁO CÁO TIẾN ĐỘ DỰ ÁN TỪ MEETING NOTES',
    '',
    'Bạn là một chuyên gia phân tích và tổng hợp nội dung cuộc họp dự án. Nhiệm vụ của bạn là đọc transcript của buổi họp, hiểu ngữ cảnh và trích xuất thông tin quan trọng để tạo ra báo cáo tiến độ dự án ở định dạng JSON chuẩn.',
    '',
    'Báo cáo phải thể hiện rõ:',
    '- Các chủ đề chính được thảo luận (discussion_topics)',
    '- Các hành động cụ thể cần thực hiện (action_items)',
    '- Đánh giá tổng thể về tiến độ dự án (assessment)',
    '',
    'Hãy đọc kỹ toàn bộ nội dung transcript, xác định các phần trao đổi, ý kiến, quyết định, và trách nhiệm được nêu ra. Ghi nhận CHI TIẾT, tránh suy diễn hoặc thêm thông tin không có trong transcript.',
    '',
    '## MỨC ĐỘ CHI TIẾT CẦN THIẾT CHO TRƯỜNG "content":',
    '- Với discussion_topics.content: mô tả chi tiết bối cảnh hoặc vấn đề được đưa ra, dữ liệu hoặc số liệu liên quan (nếu có), quan điểm các bên, rủi ro/khó khăn, quyết định hoặc định hướng tạm thời. Tránh chỉ nêu tiêu đề chung chung.',
    '- Với action_items.content: mô tả rõ ràng và chi tiết công việc cần làm, cách thực hiện, phạm vi thực hiện, hạng mục hoặc module liên quan, các yếu tố phụ thuộc và tiêu chí để xác định hoàn thành công việc (nếu được nêu).',
    '',
    '## CẤU TRÚC JSON BẮT BUỘC:',
    '{',
    '  "discussion_topics": [',
    '    {',
    '      "content": "string (mô tả CHI TIẾT nội dung thảo luận: bối cảnh, dữ liệu, ý kiến, rủi ro, quyết định)",',
    '      "pic": "string (tên người phụ trách hoặc người phát biểu chính)",',
    '      "note": "string (ghi chú bổ sung, ý kiến hoặc nhận xét quan trọng)"',
    '    }',
    '  ],',
    '  "action_items": [',
    '    {',
    '      "content": "string (mô tả CHI TIẾT công việc: nội dung cần thực hiện, cách làm, phạm vi, hạng mục liên quan, yếu tố phụ thuộc và tiêu chí hoàn thành)",',
    '      "deadline": "string (ngày hoàn thành, định dạng YYYY-MM-DD, để trống nếu không có)",',
    '      "pic": "string (tên người phụ trách hành động này)",',
    '      "note": "string (ghi chú chi tiết, mô tả hoặc trạng thái hiện tại)"',
    '    }',
    '  ],',
    '  "assessment": "Đúng tiến độ" | "Chậm tiến độ"',
    '}',
    '',
    '## HƯỚNG DẪN CHI TIẾT:',
    '1. Đọc toàn bộ transcript và nhận diện các nội dung được thảo luận (discussion_topics) – mỗi mục cần mô tả CHI TIẾT, thể hiện nội dung chính, bối cảnh và người tham gia chính.',
    '2. Trích xuất các hành động (action_items) – mô tả rõ ràng và CHI TIẾT việc cần làm, ai phụ trách, và thời hạn nếu được đề cập.',
    '3. Nếu không có deadline hoặc PIC, để trống chuỗi "" (không viết null hoặc None).',
    '4. Phần "assessment" chỉ chọn một trong hai giá trị: "Đúng tiến độ" hoặc "Chậm tiến độ".',
    '5. Ưu tiên tính trung thực – không thêm, suy diễn hay tạo dữ liệu ngoài transcript.',
    '6. Giữ nguyên ngôn ngữ tiếng Việt, trích xuất tên người, ngày tháng và chi tiết chính xác như trong nội dung họp.',
    '7. Nếu cuộc họp có nhiều người nói, chỉ ghi tên người khi thông tin đó rõ ràng.',
    '8. Nếu có số liệu, quyết định, mã issue/ticket, module/hạng mục, hoặc mốc thời gian cụ thể được nêu, hãy đưa vào phần "content" tương ứng.',
    '',
    '## TRANSCRIPT:',
    transcript,
    '',
    '## KẾT QUẢ:',
    'Chỉ trả về JSON hợp lệ (đúng cấu trúc, có thể parse được), không thêm lời giải thích, tiêu đề, hoặc văn bản nào khác ngoài JSON.'
  ].join('\\n');
}


// Hàm meetingJsonSchema
function meetingJsonSchema(templateType = 'mom') {
  return getMeetingNotesSchema();
}

function getMeetingNotesSchema() {
  return {
    type: 'object',
    properties: {
      discussion_topics: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            content: { type: 'string' },
            pic: { type: 'string' },
            note: { type: 'string' }
          },
          required: ['content']
        }
      },
      action_items: {
        type: 'array',
        items: {
          type: 'object',
          properties: {
            content: { type: 'string' },
            deadline: { type: 'string', format: 'date' },
            pic: { type: 'string' },
            note: { type: 'string' }
          },
          required: ['content']
        }
      },
      assessment: { type: 'string', enum: ['Đúng tiến độ', 'Chậm tiến độ'] }
    },
    required: ['discussion_topics', 'action_items', 'assessment'],
    additionalProperties: true
  };
}

async function callGrok(env, transcript, templateType = 'mom') {
  const base = (env.XAI_BASE_URL || 'https://api.x.ai/v1').replace(/\/$/, '');
  const body = {
    model: 'grok-3-mini',
    input: buildLLMPrompt(transcript, templateType),
    temperature: 0.6,
    response_format: {
      type: 'json_schema',
      json_schema: { name: 'pmo_extract', schema: meetingJsonSchema(templateType), strict: true }
    }
  };
  const r = await fetch(`${base}/responses`, {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${env.XAI_API_KEY}`, 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  });
  const text = await r.text();
  if (!r.ok) throw new StepError('grok', `xAI ${r.status}: ${text}`);
  const data = JSON.parse(text);

  let raw = '';
  let parsed = {};

  try {
    if (data.output_text) raw = data.output_text;
    if (!raw && data.output?.[1]?.content?.[0]) {
      raw = data.output[1].content[0].text;
    }
    if (raw) {
      const jsonMatch = raw.match(/\{[\s\S]*\}/);
      parsed = jsonMatch ? JSON.parse(jsonMatch[0]) : JSON.parse(raw);
    }

    // Đảm bảo cấu trúc dữ liệu đúng - Meeting notes template
    if (!parsed.discussion_topics) parsed.discussion_topics = [];
    if (!parsed.action_items) parsed.action_items = [];
    if (!parsed.assessment) parsed.assessment = "Đúng tiến độ";

    // Đảm bảo mỗi mục trong discussion_topics có đủ trường
    parsed.discussion_topics = parsed.discussion_topics.map(topic => ({
      content: topic.content || "",
      pic: topic.pic || "",
      note: topic.note || ""
    }));

    // Đảm bảo mỗi mục trong action_items có đủ trường
    parsed.action_items = parsed.action_items.map(action => ({
      content: action.content || "",
      deadline: action.deadline || "",
      pic: action.pic || "",
      note: action.note || ""
    }));
  } catch (e) {
    // Nếu có lỗi, tạo cấu trúc mặc định
    parsed = {
      discussion_topics: [],
      action_items: [],
      assessment: "Đúng tiến độ"
    };
  }

  return { json: parsed, raw: raw || '', response: data };
}

async function askGrok(env, userText) {
  const base = (env.XAI_BASE_URL || 'https://api.x.ai/v1').replace(/\/$/, '');
  const body = { model: 'grok-3-mini', input: String(userText || ''), temperature: 0.1 };

  const r = await fetch(`${base}/responses`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${env.XAI_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body)
  });

  if (!r.ok) {
    throw new StepError('grok', `xAI ${r.status}: ${await r.text()}`);
  }

  const data = await r.json();
  let text = '';
  if (data.output_text) text = data.output_text.trim();
  if (!text && data.output?.[1]?.content?.[0]?.text) {
    text = data.output[1].content[0].text.trim();
  }

  return text || 'Mình chưa chắc về câu này. Bạn có thể nói rõ hơn bối cảnh hoặc mục tiêu muốn đạt không?';
}

async function callGemini(env, transcript, templateType = 'mom') {
  if (!env.GEMINI_API_KEY) {
    throw new StepError('gemini', 'Missing GEMINI_API_KEY');
  }

  // Sử dụng Gemini 2.5 Pro
  const url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent';
  
  const prompt = buildLLMPrompt(transcript, templateType) + `

Lưu ý: Hãy trả về JSON hợp lệ theo đúng cấu trúc được yêu cầu. Không thêm markdown formatting hay text khác.`;

  const body = {
    contents: [{
      parts: [{
        text: prompt
      }]
    }],
    generationConfig: {
      temperature: 0.6,
      candidateCount: 1,
      maxOutputTokens: 8192,
      responseMimeType: "application/json"
    }
  };

  const r = await fetch(url, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'x-goog-api-key': env.GEMINI_API_KEY
    },
    body: JSON.stringify(body)
  });

  const text = await r.text();
  
  if (!r.ok) {
    // Parse error message for better handling
    let errorDetail = text;
    try {
      const errorJson = JSON.parse(text);
      if (errorJson.error?.message) {
        errorDetail = errorJson.error.message;
      }
    } catch (e) {
      // Keep original text if not JSON
    }
    
    throw new StepError('gemini', `Gemini ${r.status}: ${errorDetail}`);
  }
  
  const data = JSON.parse(text);

  let raw = '';
  let parsed = {};

  try {
    if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
      raw = data.candidates[0].content.parts[0].text;
      
      // Xóa markdown formatting nếu có
      let cleanText = raw.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      
      // Tìm JSON trong response
      const jsonMatch = cleanText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        parsed = JSON.parse(jsonMatch[0]);
      } else {
        // Thử parse toàn bộ text
        parsed = JSON.parse(cleanText);
      }
    }

    // Đảm bảo cấu trúc dữ liệu đúng - Meeting notes template
    if (!parsed.discussion_topics) parsed.discussion_topics = [];
    if (!parsed.action_items) parsed.action_items = [];
    if (!parsed.assessment) parsed.assessment = "Đúng tiến độ";

    // Đảm bảo mỗi mục trong discussion_topics có đủ trường
    parsed.discussion_topics = parsed.discussion_topics.map(topic => ({
      content: topic.content || "",
      pic: topic.pic || "",
      note: topic.note || ""
    }));

    // Đảm bảo mỗi mục trong action_items có đủ trường
    parsed.action_items = parsed.action_items.map(action => ({
      content: action.content || "",
      deadline: action.deadline || "",
      pic: action.pic || "",
      note: action.note || ""
    }));
  } catch (e) {
    console.error('Gemini JSON parsing error:', e, 'Raw text:', raw);
    // Nếu có lỗi, tạo cấu trúc mặc định
    parsed = {
      discussion_topics: [],
      action_items: [],
      assessment: "Đúng tiến độ"
    };
  }

  return { json: parsed, raw: raw || '', response: data };
}

async function askGemini(env, userText) {
  if (!env.GEMINI_API_KEY) {
    throw new StepError('gemini', 'Missing GEMINI_API_KEY');
  }

  // Sử dụng Gemini 2.5 Pro
  const url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent';
  
  const body = {
    contents: [{
      parts: [{
        text: String(userText || '')
      }]
    }],
    generationConfig: {
      temperature: 0.1,
      candidateCount: 1,
      maxOutputTokens: 2048
    }
  };

  const r = await fetch(url, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'x-goog-api-key': env.GEMINI_API_KEY
    },
    body: JSON.stringify(body)
  });

  if (!r.ok) {
    const errorText = await r.text();
    let errorDetail = errorText;
    try {
      const errorJson = JSON.parse(errorText);
      if (errorJson.error?.message) {
        errorDetail = errorJson.error.message;
      }
    } catch (e) {
      // Keep original text if not JSON
    }
    throw new StepError('gemini', `Gemini ${r.status}: ${errorDetail}`);
  }

  const data = await r.json();
  let text = '';
  
  if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
    text = data.candidates[0].content.parts[0].text.trim();
  }

  return text || 'Mình chưa chắc về câu này. Bạn có thể nói rõ hơn bối cảnh hoặc mục tiêu muốn đạt không?';
}

async function callGPT5Nano(env, transcript, templateType = 'mom') {
  if (!env.OPENAI_API_KEY) {
    throw new StepError('openai', 'Missing OPENAI_API_KEY');
  }

  const prompt = buildLLMPrompt(transcript, templateType);

  const body = {
    model: 'gpt-5-nano',
    messages: [
      {
        role: 'system',
        content: 'Bạn là trợ lý AI chuyên nghiệp giúp phân tích và tóm tắt nội dung họp, trích xuất thông tin quan trọng theo cấu trúc JSON.'
      },
      {
        role: 'user',
        content: prompt
      }
    ],
    temperature: 2,
    response_format: { type: 'json_object' }
  };

  const r = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${env.OPENAI_API_KEY}`
    },
    body: JSON.stringify(body)
  });

  const text = await r.text();
  
  if (!r.ok) {
    let errorDetail = text;
    try {
      const errorJson = JSON.parse(text);
      if (errorJson.error?.message) {
        errorDetail = errorJson.error.message;
      }
    } catch (e) {
      // Keep original text if not JSON
    }
    
    throw new StepError('openai', `OpenAI ${r.status}: ${errorDetail}`);
  }
  
  const data = JSON.parse(text);

  let raw = '';
  let parsed = {};

  try {
    if (data.choices?.[0]?.message?.content) {
      raw = data.choices[0].message.content;
      
      // Parse JSON từ response
      const jsonMatch = raw.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        parsed = JSON.parse(jsonMatch[0]);
      } else {
        parsed = JSON.parse(raw);
      }
    }

    // Đảm bảo cấu trúc dữ liệu đúng - Meeting notes template
    if (!parsed.discussion_topics) parsed.discussion_topics = [];
    if (!parsed.action_items) parsed.action_items = [];
    if (!parsed.assessment) parsed.assessment = "Đúng tiến độ";

    // Đảm bảo mỗi mục trong discussion_topics có đủ trường
    parsed.discussion_topics = parsed.discussion_topics.map(topic => ({
      content: topic.content || "",
      pic: topic.pic || "",
      note: topic.note || ""
    }));

    // Đảm bảo mỗi mục trong action_items có đủ trường
    parsed.action_items = parsed.action_items.map(action => ({
      content: action.content || "",
      deadline: action.deadline || "",
      pic: action.pic || "",
      note: action.note || ""
    }));
  } catch (e) {
    console.error('GPT-5 Nano JSON parsing error:', e, 'Raw text:', raw);
    // Nếu có lỗi, tạo cấu trúc mặc định
    parsed = {
      discussion_topics: [],
      action_items: [],
      assessment: "Đúng tiến độ"
    };
  }

  return { json: parsed, raw: raw || '', response: data };
}

async function askGPT5Nano(env, userText) {
  if (!env.OPENAI_API_KEY) {
    throw new StepError('openai', 'Missing OPENAI_API_KEY');
  }

  const body = {
    model: 'gpt-5-nano',
    messages: [
      {
        role: 'system',
        content: 'Bạn là trợ lý AI thông minh, hỗ trợ truy vấn và tương tác với người dùng.'
      },
      {
        role: 'user',
        content: String(userText || '')
      }
    ],
    temperature: 2
  };

  const r = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${env.OPENAI_API_KEY}`
    },
    body: JSON.stringify(body)
  });

  if (!r.ok) {
    const errorText = await r.text();
    let errorDetail = errorText;
    try {
      const errorJson = JSON.parse(errorText);
      if (errorJson.error?.message) {
        errorDetail = errorJson.error.message;
      }
    } catch (e) {
      // Keep original text if not JSON
    }
    throw new StepError('openai', `OpenAI ${r.status}: ${errorDetail}`);
  }

  const data = await r.json();
  let text = '';
  
  if (data.choices?.[0]?.message?.content) {
    text = data.choices[0].message.content.trim();
  }

  return text || 'Mình chưa chắc về câu này. Bạn có thể nói rõ hơn bối cảnh hoặc mục tiêu muốn đạt không?';
}

// ============================================================================
// CLARIFICATION SYSTEM
// ============================================================================

function needsClarification(message) {
  const text = String(message || '').toLowerCase();
  
  // Kiểm tra xem câu hỏi có đủ cụ thể không
  const hasSpecificProject = /\b[A-Z][A-Z0-9]{1,9}\b/.test(message); // Pattern project key
  const hasSpecificTime = text.includes('3 tháng') || text.includes('6 tháng') || 
                         text.includes('sprint') || text.includes('tuần') || 
                         text.includes('ngày') || text.includes('năm');
  
  // Các từ khóa cần clarification
  const patterns = [
    { keywords: ['tổng quan', 'tiến độ', 'overview', 'progress'], type: 'progress' },
    { keywords: ['rủi ro', 'risk', 'vấn đề', 'problem'], type: 'risk' },
    { keywords: ['task', 'công việc', 'việc', 'hiệu suất', 'performance'], type: 'tasks' },
    { keywords: ['chất lượng', 'bug', 'quality', 'lỗi', 'defect'], type: 'quality' },
    { keywords: ['báo cáo', 'report', 'thống kê', 'statistics', 'số liệu'], type: 'report' }
  ];

  for (const pattern of patterns) {
    if (pattern.keywords.some(keyword => text.includes(keyword))) {
      // Nếu câu hỏi đã đủ cụ thể (có project + time) thì không cần clarification
      if (hasSpecificProject && hasSpecificTime) {
        return null;
      }
      return { type: pattern.type, hasProject: hasSpecificProject, hasTime: hasSpecificTime };
    }
  }
  
  return null;
}

async function startClarificationFlow(env, message, clarificationInfo, platform = 'webapp') {
  const { type, hasProject, hasTime } = clarificationInfo;
  
  // Tạo câu hỏi và options thông minh dựa trên context
  const clarificationData = generateSmartClarification(message, type, hasProject, hasTime, platform);
  
  return {
    success: true,
    needsClarification: true,
    clarificationType: type,
    originalMessage: message,
    response: clarificationData.question,
    options: clarificationData.options,
    platform: platform
  };
}

function generateSmartClarification(message, type, hasProject, hasTime, platform = 'webapp') {
  const messageText = String(message || '').toLowerCase();
  
  // Adjust question format based on platform
  const questionPrefix = platform === 'zalo' ? '🤖 ' : '';
  
  // For all types, start with project scope selection
  return {
    question: `${questionPrefix}Chọn phạm vi phân tích:`,
    options: [
      { id: 'scope-all', text: 'Tất cả dự án', action: 'select_timeframe', data: { projectKey: '', projectName: 'tất cả dự án' } },
      { id: 'scope-specific', text: 'Dự án cụ thể', action: 'search_project', data: {} }
    ],
    clarificationType: type,
    step: 'select_scope'
  };
}

async function handleClarificationStep(env, selectedOption, step, data) {
  switch (step) {
    case 'select_timeframe':
      return await showTimeframeOptions(env, data);
    
    case 'search_project':
      // THAY ĐỔI: Hiển thị danh sách dự án ngay thay vì yêu cầu nhập text
      return await showProjectListWithSearch(env, data);
    
    case 'manual_search_project':
      // Case mới: Khi user chọn "Tìm kiếm dự án khác"
      return await initiateProjectSearch(env, data);
    
    case 'project_search_input':
      return await handleProjectSearchInput(env, selectedOption, data);
    
    case 'select_project_from_results':
      return await handleProjectSelection(env, selectedOption, data);
    
    case 'select_time_period':
      return await executeFinalQueryWithTimeframe(env, data, selectedOption);
    
    case 'execute_query':
      return await executeSmartQuery(env, selectedOption, data.originalMessage);
    
    case 'custom_selection':
      return await showCustomOptions(env, data);
    
    case 'select_project':
      return await askTimeFrame(data.originalMessage, data.clarificationType, selectedOption);
    
    case 'select_timeframe':
      return await executeFinalQuery(env, data.originalMessage, data.projectKey || '', selectedOption);
    
    default:
      return { success: false, error: 'Unknown clarification step' };
  }
}

async function executeSmartQuery(env, queryType, originalMessage) {
  try {
    // Map query type to enhanced message
    const enhancedMessage = mapQueryTypeToMessage(queryType, originalMessage);
    const projectKey = extractProjectFromQueryType(queryType);
    
    const jql = await generateJQL(env, enhancedMessage, projectKey);
    const jiraResults = await executeJQL(env, jql);
    
    // Tạo dữ liệu thống kê
    const statusCount = {};
    const priorityCount = {};
    const assigneeCount = {};
    const typeCount = {};
    
    jiraResults.forEach(issue => {
      statusCount[issue.status] = (statusCount[issue.status] || 0) + 1;
      priorityCount[issue.priority] = (priorityCount[issue.priority] || 0) + 1;
      const assignee = issue.assignee || 'Unassigned';
      assigneeCount[assignee] = (assigneeCount[assignee] || 0) + 1;
      const issueType = issue.type || 'Unknown';
      typeCount[issueType] = (typeCount[issueType] || 0) + 1;
    });

    // Tạo prompt thông minh dựa trên query type
    const smartPrompt = generateSmartPrompt(queryType, originalMessage, jiraResults.length, statusCount, priorityCount, assigneeCount);
    const answer = await askGrok(env, smartPrompt);
    
    return { 
      success: true, 
      response: answer, 
      jql: jql, 
      results: jiraResults,
      statistics: {
        status: statusCount,
        priority: priorityCount,
        assignee: assigneeCount,
        type: typeCount
      }
    };
  } catch (error) {
    return { 
      success: false, 
      error: 'Có lỗi khi xử lý yêu cầu của bạn.', 
      details: error.message 
    };
  }
}

function mapQueryTypeToMessage(queryType, originalMessage) {
  const mappings = {
    'progress-all-30d': `${originalMessage} tất cả dự án 30 ngày gần đây`,
    'progress-all-3m': `${originalMessage} tất cả dự án 3 tháng gần nhất`,
    'progress-sprint': `${originalMessage} sprint hiện tại`,
    
    'risk-schedule': `rủi ro chậm tiến độ dự án`,
    'risk-quality': `rủi ro chất lượng bugs lỗi`,
    'risk-resource': `rủi ro tài nguyên nhân lực`,
    'risk-all': `tổng hợp tất cả rủi ro dự án`,
    
    'tasks-overdue': `tasks công việc quá hạn overdue`,
    'tasks-inprogress': `tasks đang thực hiện in progress`,
    'tasks-performance': `hiệu suất performance làm việc nhóm`,
    'tasks-workload': `phân bổ khối lượng công việc workload`,
    
    'quality-bugs': `bugs lỗi cần ưu tiên xử lý`,
    'quality-critical': `lỗi nghiêm trọng critical priority high`,
    'quality-trend': `xu hướng chất lượng 3 tháng gần nhất`,
    'quality-team': `chất lượng theo từng nhóm team`,
    
    'report-summary': `báo cáo tổng quan summary dự án`,
    'report-performance': `báo cáo hiệu suất performance nhóm`,
    'report-timeline': `báo cáo tiến độ timeline`,
    
    'general-progress': `tổng quan tiến độ dự án`,
    'general-issues': `vấn đề cần xử lý issues`,
    'general-team': `hiệu suất nhóm team performance`
  };
  
  return mappings[queryType] || originalMessage;
}

function extractProjectFromQueryType(queryType) {
  // Có thể extend logic này để extract project từ queryType nếu cần
  return '';
}

function generateSmartPrompt(queryType, originalMessage, resultCount, statusCount, priorityCount, assigneeCount) {
  const baseStats = `
THỐNG KÊ:
- Trạng thái: ${Object.entries(statusCount).map(([k,v]) => `${k}(${v})`).join(', ')}
- Ưu tiên: ${Object.entries(priorityCount).map(([k,v]) => `${k}(${v})`).join(', ')}
- Phân công: ${Object.entries(assigneeCount).map(([k,v]) => `${k}(${v})`).join(', ')}`;

  // Tạo prompt đặc biệt cho từng loại query
  const specialPrompts = {
    'risk-schedule': `Phân tích rủi ro chậm tiến độ với ${resultCount} issues:
${baseStats}

Tập trung vào:
▪ Tình hình: Đánh giá các issues có risk chậm deadline
▪ Vấn đề: Nguyên nhân gây chậm tiến độ 
▪ Đề xuất: Giải pháp khắc phục và phòng ngừa`,

    'quality-bugs': `Phân tích chất lượng bugs với ${resultCount} issues:
${baseStats}

Tập trung vào:
▪ Tình hình: Tổng quan về bugs và severity
▪ Vấn đề: Các bugs critical cần ưu tiên
▪ Đề xuất: Kế hoạch fix và improve quality`,

    'tasks-performance': `Phân tích hiệu suất nhóm với ${resultCount} tasks:
${baseStats}

Tập trung vào:
▪ Tình hình: Phân bổ công việc và throughput
▪ Vấn đề: Bottleneck và performance issues
▪ Đề xuất: Optimize workflow và resource allocation`
  };

  return specialPrompts[queryType] || `Phân tích dự án với ${resultCount} issues dựa trên: "${originalMessage}"
${baseStats}

Hãy trả lời ngắn gọn theo format:

▪ Tình hình:
[nội dung tình hình]

▪ Vấn đề:
[nội dung vấn đề]

▪ Đề xuất:
[nội dung đề xuất]

Mỗi đầu mục phải xuống dòng riêng. Không cần viết "Dưới đây là..." hay giới thiệu dài dòng.`;
}

async function showTimeframeOptions(env, data) {
  const questionPrefix = data.platform === 'zalo' ? '🤖 ' : '';
  
  return {
    success: true,
    needsClarification: true,
    clarificationStep: 'select_time_period',
    clarificationData: data,
    response: `${questionPrefix}Chọn khoảng thời gian tạo ticket:`,
    options: [
      { id: 'time-3months', text: '3 tháng gần nhất', action: 'select_time_period' },
      { id: 'time-6months', text: '6 tháng gần nhất', action: 'select_time_period' },
      { id: 'time-sprint', text: 'Active Sprint', action: 'select_time_period' }
    ]
  };
}

// HÀM MỚI: Hiển thị danh sách dự án ngay khi chọn "Dự án cụ thể"
async function showProjectListWithSearch(env, data) {
  try {
    const BASE_JIRA = envJiraBase(env);
    const API_URL = `${BASE_JIRA}/rest/api/3/project`;
    
    const r = await fetch(API_URL, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
      }
    });

    if (!r.ok) {
      throw new Error(`Failed to load projects: ${r.status}`);
    }

    const allProjects = await r.json();
    const questionPrefix = data.platform === 'zalo' ? '🤖 ' : '';
    
    // Bắt đầu với option "Tất cả dự án"
    const projectOptions = [{
      id: 'all-projects',
      text: '🌐 Tất cả dự án',
      action: 'select_project_from_results',
      data: { projectKey: '', projectName: 'Tất cả dự án' }
    }];
    
    // Hiển thị 12 dự án đầu tiên (giảm từ 15 để có chỗ cho "Tất cả dự án")
    const displayLimit = 12;
    const projectsToShow = allProjects.slice(0, displayLimit);
    
    projectsToShow.forEach(project => {
      projectOptions.push({
        id: project.key,
        text: `${project.name} (${project.key})`,
        action: 'select_project_from_results',
        data: { projectKey: project.key, projectName: project.name }
      });
    });
    
    // Thêm option "Tìm kiếm dự án khác" ở cuối
    projectOptions.push({
      id: 'search-more',
      text: '🔍 Tìm kiếm dự án khác',
      action: 'manual_search_project',
      data: {}
    });

    return {
      success: true,
      needsClarification: true,
      clarificationStep: 'select_project_from_results',
      clarificationData: { ...data, searchResults: allProjects },
      response: `${questionPrefix}📋 Chọn dự án bạn muốn phân tích:
      
${allProjects.length > displayLimit ? `(Hiển thị ${displayLimit + 1}/${allProjects.length + 1} tùy chọn. Chọn "🔍 Tìm kiếm" để lọc theo tên)` : ''}`,
      options: projectOptions
    };

  } catch (error) {
    console.error('Error loading projects:', error);
    return { success: false, error: 'Có lỗi khi tải danh sách dự án. Vui lòng thử lại.' };
  }
}

async function initiateProjectSearch(env, data) {
  const questionPrefix = data.platform === 'zalo' ? '🤖 ' : '';
  
  return {
    success: true,
    needsClarification: true,
    clarificationStep: 'project_search_input',
    clarificationData: data,
    response: `${questionPrefix}🔍 Nhập tên dự án để tìm kiếm:`,
    options: [] // No predefined options, waiting for text input
  };
}

async function handleProjectSearchInput(env, searchTerm, data) {
  try {
    const BASE_JIRA = envJiraBase(env);
    const searchTermTrimmed = String(searchTerm || '').trim();
    
    if (!searchTermTrimmed) {
      const questionPrefix = data.platform === 'zalo' ? '🤖 ' : '';
      return {
        success: true,
        needsClarification: true,
        clarificationStep: 'project_search_input',
        clarificationData: data,
        response: `${questionPrefix}❌ Vui lòng nhập tên dự án để tìm kiếm:`,
        options: []
      };
    }
    
    // Use Jira Search API with query parameter
    const API_URL = `${BASE_JIRA}/rest/api/3/project/search?query=${encodeURIComponent(searchTermTrimmed)}`;
    
    const r = await fetch(API_URL, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
      }
    });

    if (!r.ok) {
      throw new Error(`Failed to search projects: ${r.status}`);
    }

    const searchResults = await r.json();
    // API trả về { values: [...], ... }
    const allProjects = searchResults.values || searchResults || [];
    const searchTermLower = searchTermTrimmed.toLowerCase();
    
    // IMPROVED SEARCH: Tìm cả trong name và key với scoring
    const matchingProjects = allProjects
      .map(project => {
        const nameLower = project.name.toLowerCase();
        const keyLower = project.key.toLowerCase();
        
        // Calculate match score for sorting
        let score = 0;
        
        // Exact match gets highest priority
        if (nameLower === searchTermLower || keyLower === searchTermLower) {
          score = 1000;
        }
        // Starts with search term
        else if (nameLower.startsWith(searchTermLower) || keyLower.startsWith(searchTermLower)) {
          score = 500;
        }
        // Contains search term
        else if (nameLower.includes(searchTermLower) || keyLower.includes(searchTermLower)) {
          score = 100;
        }
        // Fuzzy match: check if most characters match (typo tolerance)
        else {
          const fuzzyMatch = calculateFuzzyMatch(searchTermLower, nameLower) || 
                           calculateFuzzyMatch(searchTermLower, keyLower);
          if (fuzzyMatch > 0.6) { // 60% similarity threshold
            score = fuzzyMatch * 50;
          }
        }
        
        return { project, score };
      })
      .filter(item => item.score > 0)
      .sort((a, b) => b.score - a.score)
      .map(item => item.project);

    if (matchingProjects.length === 0) {
      const questionPrefix = data.platform === 'zalo' ? '🤖 ' : '';
      return {
        success: true,
        needsClarification: true,
        clarificationStep: 'project_search_input',
        clarificationData: data,
        response: `${questionPrefix}❌ Không tìm thấy dự án "${searchTerm}". Thử từ khóa khác:`,
        options: []
      };
    }

    // Show first 10 results (increased from 5)
    const pageSize = 10;
    const firstPage = matchingProjects.slice(0, pageSize);
    const hasMore = matchingProjects.length > pageSize;
    
    const projectOptions = firstPage.map((project, index) => ({
      id: project.key,
      text: `${project.name} (${project.key})`,
      action: 'select_project_from_results',
      data: { projectKey: project.key, projectName: project.name }
    }));

    if (hasMore) {
      projectOptions.push({
        id: 'show-more',
        text: `📄 Xem thêm ${matchingProjects.length - pageSize} dự án khác`,
        action: 'show_more_projects',
        data: { searchTerm, allResults: matchingProjects, currentPage: 1 }
      });
    }

    const questionPrefix = data.platform === 'zalo' ? '🤖 ' : '';
    return {
      success: true,
      needsClarification: true,
      clarificationStep: 'select_project_from_results',
      clarificationData: { ...data, searchResults: matchingProjects },
      response: `${questionPrefix}✅ Tìm thấy ${matchingProjects.length} dự án phù hợp với "${searchTerm}":`,
      options: projectOptions
    };

  } catch (error) {
    return { success: false, error: 'Có lỗi khi tìm kiếm dự án. Vui lòng thử lại.' };
  }
}

// Helper function: Calculate fuzzy match score (Levenshtein-based similarity)
function calculateFuzzyMatch(search, target) {
  if (!search || !target) return 0;
  
  // Quick check: if search is much longer than target, unlikely to match
  if (search.length > target.length * 1.5) return 0;
  
  // Calculate Levenshtein distance
  const matrix = [];
  
  for (let i = 0; i <= target.length; i++) {
    matrix[i] = [i];
  }
  
  for (let j = 0; j <= search.length; j++) {
    matrix[0][j] = j;
  }
  
  for (let i = 1; i <= target.length; i++) {
    for (let j = 1; j <= search.length; j++) {
      if (target.charAt(i - 1) === search.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1, // substitution
          matrix[i][j - 1] + 1,     // insertion
          matrix[i - 1][j] + 1      // deletion
        );
      }
    }
  }
  
  const distance = matrix[target.length][search.length];
  const maxLength = Math.max(search.length, target.length);
  
  // Return similarity score (0 to 1)
  return 1 - (distance / maxLength);
}

async function handleProjectSelection(env, selectedOption, data) {
  // Handle "all-projects" option
  if (selectedOption === 'all-projects') {
    return await showTimeframeOptions(env, {
      ...data,
      selectedProject: null,
      projectKey: '',
      projectName: 'Tất cả dự án'
    });
  }
  
  // Extract project info from the selected option
  const selectedProject = data.searchResults?.find(p => p.key === selectedOption);
  
  if (!selectedProject) {
    return { success: false, error: 'Không tìm thấy dự án được chọn' };
  }

  // Proceed to timeframe selection
  return await showTimeframeOptions(env, {
    ...data,
    selectedProject: selectedProject,
    projectKey: selectedProject.key,
    projectName: selectedProject.name
  });
}

async function executeFinalQueryWithTimeframe(env, data, timeframe) {
  try {
    // Build enhanced message with project and timeframe info
    let enhancedMessage = data.originalMessage || 'phân tích dự án';
    
    if (data.projectKey) {
      enhancedMessage += ` dự án ${data.projectName}`;
    } else {
      enhancedMessage += ' tất cả dự án';
    }
    
    // Add timeframe to message for JQL generation
    switch (timeframe) {
      case 'time-3months':
        enhancedMessage += ' 3 tháng gần nhất';
        break;
      case 'time-6months':
        enhancedMessage += ' 6 tháng gần nhất';
        break;
      case 'time-sprint':
        enhancedMessage += ' trong sprint hiện tại';
        break;
    }

    const jql = await generateJQL(env, enhancedMessage, data.projectKey || '');
    const jiraResults = await executeJQL(env, jql);
    
    // Generate statistics
    const statusCount = {};
    const priorityCount = {};
    const assigneeCount = {};
    const typeCount = {};
    
    jiraResults.forEach(issue => {
      statusCount[issue.status] = (statusCount[issue.status] || 0) + 1;
      priorityCount[issue.priority] = (priorityCount[issue.priority] || 0) + 1;
      const assignee = issue.assignee || 'Unassigned';
      assigneeCount[assignee] = (assigneeCount[assignee] || 0) + 1;
      const issueType = issue.type || 'Unknown';
      typeCount[issueType] = (typeCount[issueType] || 0) + 1;
    });

    // Generate smart prompt
    const smartPrompt = generateContextualPrompt(data, enhancedMessage, jiraResults.length, statusCount, priorityCount, assigneeCount);
    const answer = await askGrok(env, smartPrompt);
    
    return { 
      success: true, 
      response: answer, 
      jql: jql, 
      results: jiraResults,
      statistics: {
        status: statusCount,
        priority: priorityCount,
        assignee: assigneeCount,
        type: typeCount
      }
    };
  } catch (error) {
    return { 
      success: false, 
      error: 'Có lỗi khi xử lý yêu cầu của bạn.', 
      details: error.message 
    };
  }
}

function generateContextualPrompt(data, enhancedMessage, resultCount, statusCount, priorityCount, assigneeCount) {
  const baseStats = `
THỐNG KÊ:
- Trạng thái: ${Object.entries(statusCount).map(([k,v]) => `${k}(${v})`).join(', ')}
- Ưu tiên: ${Object.entries(priorityCount).map(([k,v]) => `${k}(${v})`).join(', ')}
- Phân công: ${Object.entries(assigneeCount).map(([k,v]) => `${k}(${v})`).join(', ')}`;

  const projectInfo = data.projectKey ? `dự án ${data.projectName} (${data.projectKey})` : 'tất cả dự án';
  
  return `Phân tích ${projectInfo} với ${resultCount} issues dựa trên: "${enhancedMessage}"
${baseStats}

Hãy trả lời ngắn gọn theo format:

▪ Tình hình:
[nội dung tình hình về ${projectInfo}]

▪ Vấn đề:
[nội dung vấn đề cần chú ý]

▪ Đề xuất:
[nội dung đề xuất cải thiện]

Mỗi đầu mục phải xuống dòng riêng. Không cần viết "Dưới đây là..." hay giới thiệu dài dòng.`;
}

async function showCustomOptions(env, data) {
  try {
    // Lấy danh sách projects cho custom selection
    const BASE_JIRA = envJiraBase(env);
    const API_URL = `${BASE_JIRA}/rest/api/3/project`;
    
    const r = await fetch(API_URL, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
      }
    });

    if (!r.ok) {
      throw new Error(`Failed to load projects: ${r.status}`);
    }

    const projects = await r.json();
    const projectOptions = projects.slice(0, 8).map(project => ({
      id: project.key,
      text: `${project.key} - ${project.name}`,
      action: 'select_project'
    }));

    // Thêm option "Tất cả dự án"
    projectOptions.unshift({
      id: 'all-projects',
      text: 'Tất cả dự án',
      action: 'select_project'
    });

    return {
      success: true,
      needsClarification: true,
      clarificationStep: 'select_project',
      clarificationData: data,
      response: "Chọn dự án bạn muốn phân tích chi tiết:",
      options: projectOptions
    };
  } catch (error) {
    return { success: false, error: 'Không thể tải danh sách dự án' };
  }
}

async function askTimeFrame(originalMessage, type, projectKey) {
  return {
    success: true,
    needsClarification: true,
    clarificationStep: 'select_timeframe',
    clarificationData: { originalMessage, clarificationType: type, projectKey },
    response: "Chọn khoảng thời gian bạn muốn xem:",
    options: [
      { id: '30d', text: '30 ngày gần đây', action: 'select_timeframe' },
      { id: '3months', text: '3 tháng gần nhất', action: 'select_timeframe' },
      { id: '6months', text: '6 tháng gần nhất', action: 'select_timeframe' },
      { id: 'active-sprint', text: 'Active Sprint', action: 'select_timeframe' }
    ]
  };
}

async function executeFinalQuery(env, originalMessage, projectKey, timeframe) {
  try {
    // Tạo message có thời gian để generateJQL có thể phân tích
    let enhancedMessage = originalMessage;
    switch (timeframe) {
      case '3months':
        enhancedMessage += ' 3 tháng gần nhất';
        break;
      case '6months':
        enhancedMessage += ' 6 tháng gần nhất';
        break;
      case 'active-sprint':
        enhancedMessage += ' trong sprint hiện tại';
        break;
      default:
        enhancedMessage += ' 30 ngày gần đây';
    }

    const jql = await generateJQL(env, enhancedMessage, projectKey);
    const jiraResults = await executeJQL(env, jql);
    
    // Tạo dữ liệu thống kê
    const statusCount = {};
    const priorityCount = {};
    const assigneeCount = {};
    const typeCount = {};
    
    jiraResults.forEach(issue => {
      statusCount[issue.status] = (statusCount[issue.status] || 0) + 1;
      priorityCount[issue.priority] = (priorityCount[issue.priority] || 0) + 1;
      const assignee = issue.assignee || 'Unassigned';
      assigneeCount[assignee] = (assigneeCount[assignee] || 0) + 1;
      const issueType = issue.type || 'Unknown';
      typeCount[issueType] = (typeCount[issueType] || 0) + 1;
    });

    // Tạo prompt cho AI với dữ liệu thống kê
    let prompt = `Phân tích dự án với ${jiraResults.length} issues dựa trên câu hỏi: "${originalMessage}"

THỐNG KÊ:
- Trạng thái: ${Object.entries(statusCount).map(([k,v]) => `${k}(${v})`).join(', ')}
- Ưu tiên: ${Object.entries(priorityCount).map(([k,v]) => `${k}(${v})`).join(', ')}
- Phân công: ${Object.entries(assigneeCount).map(([k,v]) => `${k}(${v})`).join(', ')}

Hãy trả lời ngắn gọn theo format:

▪ Tình hình:
[nội dung tình hình]

▪ Vấn đề:
[nội dung vấn đề]

▪ Đề xuất:
[nội dung đề xuất]

Mỗi đầu mục phải xuống dòng riêng. Không cần viết "Dưới đây là..." hay giới thiệu dài dòng.`;

    const answer = await askGrok(env, prompt);
    return { 
      success: true, 
      response: answer, 
      jql: jql, 
      results: jiraResults,
      statistics: {
        status: statusCount,
        priority: priorityCount,
        assignee: assigneeCount,
        type: typeCount
      }
    };
  } catch (error) {
    return { 
      success: false, 
      error: 'Có lỗi khi xử lý yêu cầu của bạn.', 
      details: error.message 
    };
  }
}

// ============================================================================
// 6) CONFLUENCE/JIRA COMMON
// ============================================================================
function envConfluenceBase(env) {
  // trả về https://{site}.atlassian.net/wiki
  let base = (env.ATLASSIAN_BASE || '').trim();
  if (!base) throw new StepError('confluence', 'Missing ATLASSIAN_BASE');
  base = base.replace(/\/+$/, '');
  if (!/\/wiki$/.test(base)) base += '/wiki';
  return base;
}
function confluenceApiV2Url(env, path) {
  // v2 base: {base}/wiki/api/v2
  // envConfluenceBase(env) already ensures trailing /wiki
  return envConfluenceBase(env) + '/api/v2' + (path || '');
}

// Function để set editor property cho page (đảm bảo sử dụng V2 editor)
async function setPageEditorProperty(env, pageId, email, apiToken) {
  const v2Headers = {
    'Content-Type': 'application/json; charset=utf-8',
    'Accept': 'application/json',
    'Authorization': 'Basic ' + btoa(`${email}:${apiToken}`)
  };
  
  try {
    // Kiểm tra xem property editor đã tồn tại chưa
    const checkUrl = confluenceApiV2Url(env, `/pages/${pageId}/properties?key=editor`);
    const checkRes = await fetch(checkUrl, { method: 'GET', headers: v2Headers });
    
    if (checkRes.ok) {
      const checkData = await checkRes.json();
      if (checkData.results && checkData.results.length > 0) {
        // Property đã tồn tại, cập nhật nó
        const propertyId = checkData.results[0].id;
        const updateUrl = confluenceApiV2Url(env, `/pages/${pageId}/properties/${propertyId}`);
        const updateRes = await fetch(updateUrl, {
          method: 'PUT',
          headers: v2Headers,
          body: JSON.stringify({
            key: 'editor',
            value: 'v2',
            version: { number: checkData.results[0].version.number + 1 }
          })
        });
        return updateRes.ok;
      }
    }
    
    // Tạo property mới
    const createUrl = confluenceApiV2Url(env, `/pages/${pageId}/properties`);
    const createRes = await fetch(createUrl, {
      method: 'POST',
      headers: v2Headers,
      body: JSON.stringify({
        key: 'editor',
        value: 'v2'
      })
    });
    return createRes.ok;
  } catch (e) {
    console.warn(`Error setting editor property: ${e.message}`);
    return false;
  }
}
function envJiraBase(env) {
  // trả về https://{site}.atlassian.net (không có /wiki)
  let base = (env.ATLASSIAN_BASE || '').trim();
  if (!base) throw new StepError('jira', 'Missing ATLASSIAN_BASE');
  base = base.replace(/\/+$/, '');
  if (base.endsWith('/wiki')) {
    base = base.substring(0, base.length - 5);
  }
  return base;
}
function atlassianEmail(env) {
  return env.ATLASSIAN_EMAIL;
}
function escapeHtml(s = '') { return String(s).replace(/[&<>"]/g, c => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;' }[c])); }

// Hàm chuyển đổi văn bản thành bullet points
function textToBulletPoints(text) {
  if (!text || typeof text !== 'string') return '';

  let processedText = text.trim();
  processedText = processedText.replace(/^[\-\*\+]\s*/gm, '- ');

  processedText = processedText.replace(/;|,+/g, function (match) {
    return (match === ';' || match.length >= 2) ? '||SPLIT||' : match;
  });

  let points = [];
  let parts = processedText.split('||SPLIT||');

  for (const part of parts) {
    const trimmedPart = part.trim();
    if (!trimmedPart) continue;

    let sentenceParts = trimmedPart.split(/[.!?]+/);

    for (const sentencePart of sentenceParts) {
      const trimmedSentence = sentencePart.trim();
      if (!trimmedSentence) continue;

      if (trimmedSentence.length > 50) {
        let subParts = trimmedSentence.split(/,\s*[A-ZÁÀẢÃẠĂẮẰẲẴẶÂẤẦẨẪẬĐÉÈẺẼẸÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴ]/);

        if (subParts.length > 1) {
          for (const subPart of subParts) {
            const trimmedSub = subPart.trim();
            if (trimmedSub) {
              if (trimmedSub.endsWith(',')) {
                points.push(trimmedSub.substring(0, trimmedSub.length - 1).trim());
              } else {
                points.push(trimmedSub);
              }
            }
          }
        } else {
          points.push(trimmedSentence);
        }
      } else {
        points.push(trimmedSentence);
      }
    }
  }

  if (points.length === 0) {
    return escapeHtml(text);
  }

  let bulletPoints = '';
  for (const point of points) {
    const trimmedPoint = point.trim();
    if (trimmedPoint) {
      bulletPoints += `- ${escapeHtml(trimmedPoint)}<br/>`;
    }
  }

  return bulletPoints;
}
// Function helper để convert accountID thành mention format
function convertPICToMention(picValue, escapeFunction) {
  if (!picValue) return '';
  
  const picStr = String(picValue).trim();
  if (!picStr) return '';
  
  // Kiểm tra xem có phải accountID format không (có dấu : và đủ dài)
  const accountIdPattern = /^[A-Za-z0-9]+:[A-Za-z0-9\-]+$/;
  if (picStr.includes(':') && picStr.length >= 20 && accountIdPattern.test(picStr)) {
    // Đây là accountID, chuyển thành mention
    console.log('Converting PIC to mention:', picStr);
    return '<ac:link><ri:user ri:account-id="' + picStr + '"/></ac:link>';
  } else {
    // Đây là text thông thường, escape như bình thường
    return escapeFunction(picStr);
  }
}

function buildConfluenceTableHTML(obj = {}, templateType = 'mom') {
  const esc = (val) => {
    const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
    return String(val).replace(/[&<>"']/g, m => map[m]);
  };

  // -------- Discussion topics (title outside + table below) --------
  const dt = Array.isArray(obj.discussion_topics) ? obj.discussion_topics : [];
  const dtRows = dt.filter(t => {
    if (!t) return false;
    const c = String(t.content ?? '').trim();
    const p = String(t.pic ?? '').trim();
    const n = String(t.note ?? '').trim();
    return !!(c || p || n);
  });

  const discussionSection = `
<div style="margin-bottom: 40px;">
  <h2 style="
    font-weight: 800; 
    font-size: 2.2em;
    line-height: 1.3;
    color: #fff; 
    background: linear-gradient(135deg, #0052cc 0%, #4299ff 100%);
    margin: 0 0 0 0; 
    padding: 24px 28px;
    border-radius: 12px 12px 0 0;
    border-left: 5px solid #0041a3;
    box-shadow: 0 4px 12px rgba(0, 82, 204, 0.2);
    text-shadow: 0 1px 2px rgba(0,0,0,0.1);
  ">
    <span style="
      display: inline-block;
      vertical-align: middle;
      font-size: 1.8em;
      line-height: 1;
      margin-right: 12px;
    ">💬</span><span style="
      display: inline-block;
      vertical-align: middle;
      line-height: 1.3;
    ">Discussion topics</span>
  </h2>
  <div style="
    background: #fff;
    border-radius: 0 0 12px 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    overflow: hidden;
    border: 1px solid #e8f2ff;
  ">
<table class="confluenceTable" style="
  width:100%;
  border-collapse:collapse;
  margin:0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
">
  <colgroup>
    <col style="width:40px">
    <col style="width:65%">
    <col style="width:70px">
    <col style="width:80px">
  </colgroup>
  <tbody>
    <tr style="background: linear-gradient(135deg, #2c5aa0 0%, #1e4078 100%);">
      <th class="confluenceTh" style="
        padding: 20px 16px;
        font-weight: 600;
        font-size: 1.15em;
        color: #ffffff;
        text-align: center;
        border-bottom: 2px solid #1a365d;
        border-right: 1px solid #2d5a87;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.2);
      ">STT</th>
      <th class="confluenceTh" style="
        padding: 20px 16px;
        font-weight: 600;
        font-size: 1.15em;
        color: #ffffff;
        border-bottom: 2px solid #1a365d;
        border-right: 1px solid #2d5a87;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.2);
      ">Nội dung</th>
      <th class="confluenceTh" style="
        padding: 20px 16px;
        font-weight: 600;
        font-size: 1.15em;
        color: #ffffff;
        border-bottom: 2px solid #1a365d;
        border-right: 1px solid #2d5a87;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.2);
      ">PIC</th>
      <th class="confluenceTh" style="
        padding: 20px 16px;
        font-weight: 600;
        font-size: 1.15em;
        color: #ffffff;
        border-bottom: 2px solid #1a365d;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.2);
      ">Ghi chú</th>
    </tr>
    ${
      dtRows.length ? dtRows.map((t,i)=>`
        <tr style="
          transition: all 0.2s ease;
          background: ${i % 2 === 0 ? '#ffffff' : '#fafbff'};
        " onmouseover="this.style.background='#f0f8ff'; this.style.transform='scale(1.01)'" 
           onmouseout="this.style.background='${i % 2 === 0 ? '#ffffff' : '#fafbff'}'; this.style.transform='scale(1)'">
          <td class="confluenceTd" style="
            text-align:center;
            padding: 20px 16px;
            border-right: 1px solid #f0f4f8;
            border-bottom: 1px solid #f0f4f8;
            font-weight: 600;
            color: #0052cc;
            font-size: 1.2em;
          ">${i+1}</td>
          <td class="confluenceTd" style="
            padding: 20px 16px;
            border-right: 1px solid #f0f4f8;
            border-bottom: 1px solid #f0f4f8;
            line-height: 1.6;
            color: #2c3e50;
            font-size: 1.15em;
          ">${esc(t.content)}</td>
          <td class="confluenceTd" style="
            padding: 20px 16px;
            border-right: 1px solid #f0f4f8;
            border-bottom: 1px solid #f0f4f8;
            font-weight: 500;
            color: #34495e;
            font-size: 1.15em;
            background: ${t.pic ? 'linear-gradient(135deg, #e8f5e8 0%, #f0f9f0 100%)' : 'transparent'};
          ">${convertPICToMention(t.pic, esc)}</td>
          <td class="confluenceTd" style="
            padding: 20px 16px;
            border-bottom: 1px solid #f0f4f8;
            color: #7f8c8d;
            font-style: ${t.note ? 'normal' : 'italic'};
            line-height: 1.5;
            font-size: 1.12em;
          ">${esc(t.note) || '<span style="color: #bdc3c7;">Không có ghi chú</span>'}</td>
        </tr>
      `).join('') : `
      <tr>
        <td class="confluenceTd" colspan="4" style="
          padding: 40px 20px;
          text-align: center;
          color: #7f8c8d;
          font-style: italic;
          background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        ">
          <div style="font-size: 2em; margin-bottom: 10px; opacity: 0.5;">🗨️</div>
          Không có nội dung thảo luận
        </td>
      </tr>
      `
    }
  </tbody>
</table>
  </div>
</div>`.trim();

  // -------- Action items (title outside + table below) --------
  const ai = Array.isArray(obj.action_items) ? obj.action_items : [];
  const aiRows = ai.filter(a => {
    if (!a) return false;
    const c = String(a.content ?? '').trim();
    const d = String(a.deadline ?? '').trim();
    const p = String(a.pic ?? '').trim();
    const n = String(a.note ?? '').trim();
    return !!(c || d || p || n);
  });

  const actionSection = aiRows.length ? `
<div style="margin-bottom: 40px;">
  <h2 style="
    font-weight: 800; 
    font-size: 2.2em;
    line-height: 1.3;
    color: #fff; 
    background: linear-gradient(135deg, #ff6b35 0%, #ff8f65 100%);
    margin: 0 0 0 0; 
    padding: 24px 28px;
    border-radius: 12px 12px 0 0;
    border-left: 5px solid #e55a2b;
    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.25);
    text-shadow: 0 1px 2px rgba(0,0,0,0.1);
  ">
    <span style="
      display: inline-block;
      vertical-align: middle;
      font-size: 1.8em;
      line-height: 1;
      margin-right: 12px;
    ">✅</span><span style="
      display: inline-block;
      vertical-align: middle;
      line-height: 1.3;
    ">Action items</span>
  </h2>
  <div style="
    background: #fff;
    border-radius: 0 0 12px 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    overflow: hidden;
    border: 1px solid #fff0ed;
  ">
<table class="confluenceTable" style="
  width:100%;
  border-collapse:collapse;
  margin:0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
">
  <colgroup>
    <col style="width:65%">
    <col style="width:75px">
    <col style="width:70px">
    <col style="width:80px">
  </colgroup>
  <tbody>
    <tr style="background: linear-gradient(135deg, #d63384 0%, #b02a5b 100%);">
      <th class="confluenceTh" style="
        padding: 20px 16px;
        font-weight: 600;
        font-size: 1.15em;
        color: #ffffff;
        border-bottom: 2px solid #8b1538;
        border-right: 1px solid #c2185b;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.2);
      ">Nội dung</th>
      <th class="confluenceTh" style="
        padding: 20px 16px;
        font-weight: 600;
        font-size: 1.15em;
        color: #ffffff;
        border-bottom: 2px solid #8b1538;
        border-right: 1px solid #c2185b;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        text-align: center;
        text-shadow: 0 1px 2px rgba(0,0,0,0.2);
      ">Deadline</th>
      <th class="confluenceTh" style="
        padding: 20px 16px;
        font-weight: 600;
        font-size: 1.15em;
        color: #ffffff;
        border-bottom: 2px solid #8b1538;
        border-right: 1px solid #c2185b;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.2);
      ">PIC</th>
      <th class="confluenceTh" style="
        padding: 20px 16px;
        font-weight: 600;
        font-size: 1.15em;
        color: #ffffff;
        border-bottom: 2px solid #8b1538;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        text-shadow: 0 1px 2px rgba(0,0,0,0.2);
      ">Ghi chú</th>
    </tr>
    ${aiRows.map((a, i) => `
      <tr style="
        transition: all 0.2s ease;
        background: ${i % 2 === 0 ? '#ffffff' : '#fffaf8'};
      " onmouseover="this.style.background='#fff8f5'; this.style.transform='scale(1.01)'" 
         onmouseout="this.style.background='${i % 2 === 0 ? '#ffffff' : '#fffaf8'}'; this.style.transform='scale(1)'">
        <td class="confluenceTd" style="
          padding: 20px 16px;
          border-right: 1px solid #fdf2ef;
          border-bottom: 1px solid #fdf2ef;
          line-height: 1.6;
          color: #2c3e50;
          font-weight: 500;
          font-size: 1.15em;
        ">${esc(a.content)}</td>
        <td class="confluenceTd" style="
          padding: 20px 16px;
          border-right: 1px solid #fdf2ef;
          border-bottom: 1px solid #fdf2ef;
          text-align: center;
          font-weight: 600;
          color: ${a.deadline ? '#ff6b35' : '#bdc3c7'};
          background: ${a.deadline ? 'linear-gradient(135deg, #fff5f0 0%, #ffebe0 100%)' : 'transparent'};
          border-radius: ${a.deadline ? '6px' : '0'};
          font-size: 1.15em;
        ">${a.deadline ? esc(a.deadline) : '<span style="font-style: italic;">Chưa có</span>'}</td>
        <td class="confluenceTd" style="
          padding: 20px 16px;
          border-right: 1px solid #fdf2ef;
          border-bottom: 1px solid #fdf2ef;
          font-weight: 500;
          color: #34495e;
          font-size: 1.15em;
          background: ${a.pic ? 'linear-gradient(135deg, #e8f5e8 0%, #f0f9f0 100%)' : 'transparent'};
        ">${convertPICToMention(a.pic, esc)}</td>
        <td class="confluenceTd" style="
          padding: 20px 16px;
          border-bottom: 1px solid #fdf2ef;
          color: #7f8c8d;
          font-style: ${a.note ? 'normal' : 'italic'};
          line-height: 1.5;
          font-size: 1.12em;
        ">${esc(a.note) || '<span style="color: #bdc3c7;">Không có ghi chú</span>'}</td>
      </tr>
    `).join('')}
  </tbody>
</table>
  </div>
</div>`.trim() : `
<div style="margin-bottom: 40px;">
  <h2 style="
    font-weight: 800; 
    font-size: 2.2em;
    line-height: 1.3;
    color: #fff; 
    background: linear-gradient(135deg, #ff6b35 0%, #ff8f65 100%);
    margin: 0 0 0 0; 
    padding: 24px 28px;
    border-radius: 12px;
    border-left: 5px solid #e55a2b;
    box-shadow: 0 4px 12px rgba(255, 107, 53, 0.25);
    text-shadow: 0 1px 2px rgba(0,0,0,0.1);
  ">
    <span style="
      display: inline-block;
      vertical-align: middle;
      font-size: 1.8em;
      line-height: 1;
      margin-right: 12px;
    ">✅</span><span style="
      display: inline-block;
      vertical-align: middle;
      line-height: 1.3;
    ">Action items</span>
  </h2>
  <div style="
    background: linear-gradient(135deg, #fff8f5 0%, #fdf2ef 100%);
    border-radius: 12px;
    padding: 30px;
    text-align: center;
    color: #ff6b35;
    font-style: italic;
    border: 2px dashed #ffcab0;
  ">
    <div style="font-size: 3em; margin-bottom: 15px; opacity: 0.6;">📋</div>
    <div style="font-size: 1.1em; font-weight: 500;">Không có hành động nào cần thực hiện</div>
  </div>
</div>`.trim();

  // Trả về cả hai sections xếp dọc
  const allSections = [discussionSection, actionSection].filter(s => s).join('\n\n');
  return allSections || '<div style="color: #666; font-style: italic;">Không có nội dung để hiển thị</div>';
}

// ============================================================================
// 6.1) ZALO CONTACTS STORAGE (D1)
// ============================================================================
function d1(env){
  const db =
    env.D1 ||
    env.Zalo_Contact ||      // tên binding của bạn trong console
    env.zalo_contacts ||
    env.ZALO_CONTACT ||
    env.ZALO_Contact;

  if (!db || (typeof db.prepare !== 'function' && typeof db.exec !== 'function')) {
    throw new StepError('d1', 'Missing D1 binding. Bind D1 là "D1" hoặc "Zalo_Contact".');
  }
  return db;
}

async function ensureContactsTable(env){
  const db = d1(env);
  const createTable = `
    CREATE TABLE IF NOT EXISTS zalo_contacts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      chat_id TEXT NOT NULL UNIQUE,
      display_name TEXT,
      created_at TEXT
    );
  `;
  const createIndex = `
    CREATE INDEX IF NOT EXISTS idx_zalo_contacts_name
    ON zalo_contacts (display_name);
  `;
  await db.prepare(createTable).run();
  await db.prepare(createIndex).run();
}

function normName(s){ return String(s || '').trim().slice(0, 80); }

async function saveContact(env, chatId, displayName){
  if (!chatId) return;
  await ensureContactsTable(env);
  const now = new Date().toISOString();
  const name = normName(displayName || '');
  await d1(env).prepare(`
    INSERT INTO zalo_contacts (chat_id, display_name, created_at)
    VALUES (?1, COALESCE(NULLIF(?2,''), (SELECT display_name FROM zalo_contacts WHERE chat_id=?1)), ?3)
    ON CONFLICT(chat_id) DO UPDATE SET
      display_name = COALESCE(excluded.display_name, zalo_contacts.display_name)
  `).bind(String(chatId), name, now).run();
}


async function getNameByChatId(env, chatId){
  await ensureContactsTable(env);
  const row = await d1(env).prepare(`
    SELECT display_name FROM zalo_contacts WHERE chat_id = ?1 LIMIT 1
  `).bind(String(chatId)).first();
  return row ? (row.display_name || null) : null;
}

async function listContacts(env){
  await ensureContactsTable(env);
  const rs = await d1(env).prepare(`
    SELECT chat_id, COALESCE(display_name, chat_id) AS display_name
    FROM zalo_contacts
    ORDER BY lower(display_name) ASC
  `).all();
  return rs.results || [];
}

async function findChatIdByName(env, displayName){
  await ensureContactsTable(env);
  const row = await d1(env).prepare(`
    SELECT chat_id FROM zalo_contacts
    WHERE lower(display_name)=lower(?1)
    LIMIT 1
  `).bind(normName(displayName)).first();
  return row ? row.chat_id : null;
}


// ============================================================================
// 7) UI HTML (đã cắm sẵn toàn bộ)
// ============================================================================
function homeHTML() {
  return `<!DOCTYPE html>
<html lang="vi">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Công cụ AI cho PMO - BIDV</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<style>
  :root{
    --bg:#f6f8fb;       /* NỀN SÁNG */
    --card:#ffffff;
    --soft:#f1f5f9;
    --text:#111827;
    --muted:#6b7280;
    --line:#e5e7eb;
    --primary:#009639;
    --primary-600:#006b2a;
    --accent:#22c55e;
    --radius:16px;
    --shadow:0 10px 28px rgba(16,24,40,.10);
    --shadow-lg:0 20px 40px rgba(16,24,40,.15);
    --gradient:linear-gradient(135deg, var(--primary), var(--primary-600));
  }
  *{box-sizing:border-box}
  html{height:100%}
  body{margin:0;background:var(--bg);color:var(--text);font:16px/1.6 Inter,system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial;min-height:100vh;display:flex;flex-direction:column}

  /* Header dính với hiệu ứng nâng cấp */
  .top{position:sticky;top:0;z-index:10;background:rgba(255,255,255,.95);backdrop-filter:saturate(1.8) blur(12px);border-bottom:1px solid var(--line);box-shadow:0 4px 12px rgba(0,0,0,.03);transition:all 0.3s ease}
  .top .row{max-width:1240px;margin:0 auto;padding:14px 20px;display:flex;align-items:center;justify-content:space-between;gap:12px}
  .brand{display:flex;align-items:center;gap:12px;position:relative}
  .logo{width:44px;height:44px;border-radius:12px;background:var(--gradient);display:grid;place-items:center;overflow:hidden;box-shadow:0 4px 12px rgba(0,150,57,.2);position:relative;transition:all 0.3s ease}
  .logo::after{content:"";position:absolute;top:0;left:0;width:100%;height:100%;background:linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.3) 50%, transparent 70%);transform:translateX(-100%);transition:transform 0.6s}
  .logo:hover::after{transform:translateX(100%)}
  .logo:hover{transform:scale(1.05);box-shadow:0 6px 16px rgba(0,150,57,.3)}
  .logo img{max-width:100%;max-height:100%;filter:brightness(0) invert(1);position:relative;z-index:1}
  .brand .title{margin:0;font-size:18px;font-weight:800;letter-spacing:.2px;background:var(--gradient);-webkit-background-clip:text;-webkit-text-fill-color:transparent;position:relative}
  .brand .title::after{content:"";position:absolute;bottom:-2px;left:0;width:0;height:2px;background:var(--gradient);transition:width 0.3s ease}
  .brand:hover .title::after{width:100%}
  .nav{display:flex;gap:8px;flex-wrap:wrap}
  .nav a{padding:10px 14px;border-radius:12px;text-decoration:none;color:#0f172a;border:1px solid transparent;font-weight:500;transition:all .3s ease;position:relative;overflow:hidden}
  .nav a::before{content:"";position:absolute;top:0;left:0;width:100%;height:100%;background:linear-gradient(135deg, rgba(0,150,57,0.05), rgba(0,150,57,0.1));opacity:0;transition:opacity 0.3s ease;z-index:-1}
  .nav a:hover::before{opacity:1}
  .nav a:hover{background:#f0fdf4;border-color:#dcfce7;transform:translateY(-2px)}

  .container{max-width:1240px;margin:0 auto;padding:28px 20px;flex:1}

  /* HERO với hiệu ứng nâng cấp cao cấp */
  .hero{
    background:linear-gradient(135deg, var(--card) 0%, #f8fffb 100%);
    border:1px solid var(--line);border-radius:24px;padding:40px 32px;box-shadow:var(--shadow-lg);
    text-align:center;
    position:relative;
    overflow:hidden;
    transform:translateY(0);
    transition:transform 0.5s ease;
  }
  .hero:hover{transform:translateY(-5px)}
  
  /* Hiệu ứng nền động */
  .hero::before, .hero::after {
    content: "";
    position: absolute;
    border-radius: 50%;
    background: linear-gradient(45deg, rgba(0,150,57,0.03), rgba(34,197,94,0.08));
    z-index: 0;
    animation: float 6s ease-in-out infinite;
  }
  
  .hero::before {
    width: 350px;
    height: 350px;
    top: -180px;
    right: -120px;
    animation-delay: 0s;
  }
  
  .hero::after {
    width: 250px;
    height: 250px;
    bottom: -120px;
    left: -80px;
    animation-delay: 3s;
  }
  
  @keyframes float {
    0%, 100% { transform: translate(0, 0) rotate(0deg); }
    33% { transform: translate(30px, -30px) rotate(120deg); }
    66% { transform: translate(-20px, 20px) rotate(240deg); }
  }
  
  .hero-content {
    position: relative;
    z-index: 1;
  }
  
  .hero h2{margin:0 0 16px;font-size:36px;font-weight:800;letter-spacing:-.02em;background:var(--gradient);-webkit-background-clip:text;-webkit-text-fill-color:transparent;position:relative;display:inline-block}
  .hero h2::after{content:"";position:absolute;bottom:-5px;left:10%;width:80%;height:3px;background:var(--gradient);border-radius:2px;transform:scaleX(0);transform-origin:center;transition:transform 0.5s ease}
  .hero:hover h2::after{transform:scaleX(1)}
  .hero p{margin:0 0 28px;color:var(--muted);max-width:700px;margin-left:auto;margin-right:auto;font-size:18px;line-height:1.6;position:relative}
  .cta{display:flex;justify-content:center;gap:16px;flex-wrap:wrap}
  .btn{appearance:none;border:0;border-radius:14px;padding:14px 24px;font-weight:700;cursor:pointer;display:inline-flex;gap:10px;align-items:center;transition:all .3s ease;font-size:16px;position:relative;overflow:hidden}
  .btn::before{content:"";position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(255,255,255,.2);transform:translateX(-100%);transition:transform .3s ease}
  .btn:hover::before{transform:translateX(0)}
  .btn.primary{background:var(--gradient);color:#fff;box-shadow:0 8px 16px rgba(0,150,57,.25);position:relative}
  .btn.primary::after{content:"";position:absolute;top:50%;left:50%;width:0;height:0;border-radius:50%;background:rgba(255,255,255,0.3);transform:translate(-50%, -50%);transition:width 0.6s, height 0.6s}
  .btn.primary:hover::after{width:300px;height:300px}
  .btn.primary:hover{transform:translateY(-3px);box-shadow:0 12px 24px rgba(0,150,57,.35)}
  .btn.ghost{background:#f8fafc;border:1px solid var(--line);color:#0f172a;box-shadow:0 2px 8px rgba(0,0,0,.05)}
  .btn.ghost:hover{background:#f1f5f9;transform:translateY(-2px);box-shadow:0 4px 12px rgba(0,0,0,.08)}

  /* Lưới module với thiết kế nâng cấp cao cấp */
  .grid{margin-top:40px;display:grid;grid-template-columns:repeat(3, 1fr);gap:28px}
  a.module{
    text-decoration:none;color:inherit;background:var(--card);border:1px solid var(--line);
    border-radius:22px;padding:32px 24px;position:relative;display:flex;flex-direction:column;align-items:center;text-align:center;
    transition:all .4s cubic-bezier(0.175, 0.885, 0.32, 1.275);overflow:hidden;
    box-shadow:0 4px 16px rgba(16,24,40,.06);
  }
  a.module:hover{transform:translateY(-8px) scale(1.02);box-shadow:var(--shadow-lg);border-color:rgba(0,150,57,.2)}
  
  /* Hiệu ứng gợn sóng khi click */
  a.module {
    position: relative;
    overflow: hidden;
  }
  
  a.module::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(0,150,57,0.1);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
  }
  
  a.module:active::before {
    width: 300px;
    height: 300px;
  }
  
  /* Icon module với hiệu ứng nâng cấp cao cấp */
  .micon-container{
    width:110px;height:110px;border-radius:50%;background:linear-gradient(135deg, #f0fdf4, #dcfce7);
    margin-bottom:24px;display:grid;place-items:center;position:relative;
    transition:all .4s ease;
    box-shadow:0 4px 12px rgba(0,150,57,0.1);
  }
  a.module:hover .micon-container {
    transform: scale(1.05);
    background:linear-gradient(135deg, rgba(0,150,57,.1), rgba(0,150,57,.05));
    box-shadow:0 8px 20px rgba(0,150,57,0.2);
  }
  .micon-container::before{content:"";position:absolute;width:100%;height:100%;border-radius:50%;background:var(--primary);opacity:0;transform:scale(0.8);z-index:0;transition:all .4s ease}
  a.module:hover .micon-container::before{opacity:0.08;transform:scale(1.1)}
  .micon{position:relative;z-index:1;color:var(--primary);font-size:44px;transition:all .4s ease}
  
  /* Hiệu ứng đặc biệt cho từng icon khi hover */
  a.module:hover .fa-microphone-lines {
    animation: pulse 1.5s infinite;
  }
  
  a.module:hover .fa-triangle-exclamation {
    animation: shake 0.8s infinite;
  }
  
  a.module:hover .fa-robot {
    animation: bounce 1.2s infinite;
  }
  
  @keyframes pulse {
    0% { transform: scale(1); opacity: 1; }
    50% { transform: scale(1.2); opacity: 0.8; }
    100% { transform: scale(1); opacity: 1; }
  }
  
  @keyframes shake {
    0%, 100% { transform: translateX(0) rotate(0); }
    25% { transform: translateX(-5px) rotate(-5deg); }
    75% { transform: translateX(5px) rotate(5deg); }
  }
  
  @keyframes bounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-10px); }
  }
  
  .mtitle{margin:0 0 14px;font-size:22px;font-weight:800;position:relative}
  .mtitle::after{content:"";position:absolute;bottom:-4px;left:50%;width:0;height:2px;background:var(--gradient);transform:translateX(-50%);transition:width 0.3s ease}
  a.module:hover .mtitle::after{width:60%}
  .mdesc{margin:0 0 20px;color:#334155;font-size:15px;line-height:1.5;max-width:90%}
  
  /* Tags với thiết kế nâng cấp cao cấp */
  .tags{display:flex;gap:8px;flex-wrap:wrap;justify-content:center;margin-top:auto}
  .tag{background:#f1f5f9;border:1px solid var(--line);padding:5px 12px;border-radius:999px;font-size:12px;font-weight:600;color:#0f172a;transition:all .2s ease;position:relative}
  .tag::before{content:"";position:absolute;top:0;left:0;width:100%;height:100%;background:var(--gradient);border-radius:999px;opacity:0;transition:opacity 0.3s ease;z-index:-1}
  a.module:hover .tag {
    background:linear-gradient(135deg, #f0fdf4, #dcfce7);
    border-color: rgba(0,150,57,.2);
    transform:translateY(-2px);
  }
  a.module:hover .tag::before{opacity:0.1}
  
  /* Button ở góc phải với hiệu ứng nâng cấp cao cấp */
  .go-btn{
    position:absolute;right:16px;top:16px;
    width:44px;height:44px;
    border-radius:50%;
    background:var(--soft);
    border:1px solid var(--line);
    display:flex;align-items:center;justify-content:center;
    transition:all .4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    box-shadow:0 2px 8px rgba(0,0,0,.05);
    overflow:hidden;
  }
  .go-btn::before{content:"";position:absolute;top:50%;left:50%;width:0;height:0;border-radius:50%;background:rgba(0,150,57,0.1);transform:translate(-50%, -50%);transition:width 0.4s, height 0.4s}
  .go-btn:hover::before{width:60px;height:60px}
  .go-btn i{color:var(--primary);font-size:16px;transition:all .4s ease;position:relative;z-index:1}
  a.module:hover .go-btn{
    background:var(--gradient);
    border-color:var(--primary);
    transform:rotate(45deg) scale(1.1);
    box-shadow:0 4px 12px rgba(0,150,57,.3);
  }
  a.module:hover .go-btn i{color:#fff}

  /* Hiệu ứng nền khi hover */
  a.module::after{
    content:"";
    position:absolute;top:0;left:0;width:100%;height:100%;
    background:radial-gradient(circle at center, rgba(0,150,57,0.05) 0%, transparent 70%);
    opacity:0;
    transition:opacity .4s ease;
    pointer-events:none;
  }
  a.module:hover::after{opacity:1}

  /* Footer với thiết kế nâng cấp cao cấp */
  .footer{padding:12px 10px;margin-top:20px;text-align:center;color:var(--muted);background:var(--card);box-shadow:0 -4px 20px rgba(0,0,0,.03);position:relative;overflow:hidden}
  .footer::before{content:"";position:absolute;top:0;left:0;width:100%;height:1px;background:var(--gradient);opacity:0.3}
  .footer::after{content:"";position:absolute;bottom:0;left:0;width:100%;height:1px;background:var(--gradient);opacity:0.3}

  /* Hiệu ứng loading cho trang */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .hero, .grid {
    animation: fadeIn 0.8s ease-out;
  }
  
  .grid {
    animation-delay: 0.2s;
    animation-fill-mode: both;
  }

  @media (max-width:1100px){
    .grid{grid-template-columns:repeat(2, 1fr);gap:24px}
  }
  @media (max-width:720px){
    .grid{grid-template-columns:1fr;gap:24px}
    .hero{padding:32px 24px}
    .hero h2{font-size:32px}
    .micon-container{width:90px;height:90px}
    .micon{font-size:36px}
  }
</style>
</head>
<body>
  <header class="top">
    <div class="row">
      <div class="brand">
        <div class="logo">
          <img src="https://z-cdn-media.chatglm.cn/files/1a1ab789-5429-451f-bb53-65e73a39e4bd_pasted_image_1758225809744.png"
               alt="BIDV" onerror="this.style.display='none'">
        </div>
        <h1 class="title">Công cụ AI cho PMO</h1>
      </div>
      <nav class="nav">
        <a href="/meetingnote"><i class="fa-solid fa-microphone-lines"></i>&nbsp;Meeting Note</a>
        <a href="/risk"><i class="fa-solid fa-triangle-exclamation"></i>&nbsp;Risk Management</a>
        <a href="/chatbot"><i class="fa-solid fa-robot"></i>&nbsp;Chat Bot</a>
      </nav>
    </div>
  </header>

  <main class="container">
    <!-- HERO -->
    <section class="hero">
      <div class="hero-content">
        <h2>Tối ưu quản lý dự án với AI</h2>
        <p>Tự động hóa quy trình làm việc, nâng cao hiệu suất và giảm thiểu rủi ro cho dự án của bạn</p>
        <div class="cta">
          <a href="/meetingnote" class="btn primary"><i class="fa-solid fa-bolt"></i>Bắt đầu ngay</a>
          <a href="/chatbot" class="btn ghost"><i class="fa-solid fa-robot"></i>Trải nghiệm AI</a>
        </div>
      </div>
    </section>

    <!-- MODULE GRID -->
    <section class="grid">
      <a class="module" href="/meetingnote">
        <div class="go-btn"><i class="fa-solid fa-arrow-right"></i></div>
        <div class="micon-container">
          <i class="micon fa-solid fa-microphone-lines"></i>
        </div>
        <div class="mtitle">AI Meeting Insights</div>
        <p class="mdesc">Ghi âm, chuyển đổi thành văn bản và trích xuất thông tin quan trọng từ cuộc họp</p>
        <div class="tags"><span class="tag">Deepgram</span><span class="tag">Grok 3 Mini</span></div>
      </a>

      <a class="module" href="/risk">
        <div class="go-btn"><i class="fa-solid fa-arrow-right"></i></div>
        <div class="micon-container">
          <i class="micon fa-solid fa-triangle-exclamation"></i>
        </div>
        <div class="mtitle">AI Risk Management</div>
        <p class="mdesc">Phát hiện sớm rủi ro, cảnh báo và đề xuất giải pháp xử lý kịp thời</p>
        <div class="tags"><span class="tag">Cảnh báo</span><span class="tag">Sprint</span></div>
      </a>

      <a class="module" href="/chatbot">
        <div class="go-btn"><i class="fa-solid fa-arrow-right"></i></div>
        <div class="micon-container">
          <i class="micon fa-solid fa-robot"></i>
        </div>
        <div class="mtitle">AI Chat Bot</div>
        <p class="mdesc">Trợ lý ảo thông minh, hỗ trợ truy vấn và tương tác 24/7</p>
        <div class="tags"><span class="tag">JQL</span><span class="tag">Zalo Bot</span></div>
      </a>
    </section>
  </main>

  <footer class="footer">© 2025 BIDV — Công cụ AI cho PMO</footer>
</body>
</html>`;
}

function meetingNoteHTML() {
  return `<!doctype html>
<html lang="vi">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>AI Meeting Insights — PMO</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<style>
  /* ====== Palette & tokens đồng bộ trang chủ ====== */
  :root{
    --bg:#f6f8fb;
    --card:#ffffff;
    --soft:#f1f5f9;
    --text:#111827;
    --muted:#6b7280;
    --line:#e5e7eb;
    --primary:#009639;
    --primary-600:#006b2a;
    --accent:#22c55e;
    --radius:16px;
    --shadow:0 10px 28px rgba(16,24,40,.10);
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{margin:0;background:var(--bg);color:var(--text);font:16px/1.6 "Inter",system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}

  /* ====== Header dính giống trang chủ ====== */
  .top{position:sticky;top:0;z-index:10;background:rgba(255,255,255,.88);backdrop-filter:saturate(1.05) blur(10px);border-bottom:1px solid var(--line)}
  .top .row{max-width:1240px;margin:0 auto;padding:12px 20px;display:flex;align-items:center;justify-content:space-between;gap:12px}
  
  /* Header Section - Cập nhật để hiển thị ngang hàng và căn giữa */
  .header-section{display:flex;justify-content:space-between;align-items:center;margin-bottom:0;gap:20px;width:100%}
  .back-btn{display:flex;align-items:center;gap:8px;padding:10px 16px;background:var(--card);color:var(--primary);text-decoration:none;font-weight:600;border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,0.08);transition:all 0.2s ease;white-space:nowrap}
  .back-btn:hover{background:var(--primary);color:#fff;transform:translateY(-2px)}
  .page-title{font-size:18px;font-weight:800;color:#172B4D;margin:0;display:flex;justify-content:center;align-items:center;flex-grow:1}
  .header-logo{display:flex;align-items:center;gap:10px;color:var(--primary)}
  
  .brand{display:flex;align-items:center;gap:10px}
  .logo{width:42px;height:42px;border-radius:10px;background:#e7f6ee;display:grid;place-items:center;overflow:hidden}
  .logo img{max-width:100%;max-height:100%}
  .title{margin:0;font-size:18px;font-weight:800;letter-spacing:.2px}
  .nav{display:flex;gap:8px;flex-wrap:wrap}
  .nav a{padding:8px 12px;border-radius:10px;text-decoration:none;color:#0f172a;border:1px solid transparent}
  .nav a:hover{background:#f0fdf4;border-color:#dcfce7}

  /* ====== Container ====== */
  .container{max-width:1240px;margin:0 auto;padding:22px 20px}

  /* ====== STEP WIZARD ====== */
  .step-wizard {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 30px;
    padding: 20px;
    background: var(--card);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
  }

  .step-item {
    display: flex;
    align-items: center;
    position: relative;
    padding: 0 20px;
  }

  .step-number {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: var(--soft);
    color: var(--muted);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    margin-right: 12px;
    transition: all 0.3s;
  }

  .step-item.active .step-number {
    background: var(--primary);
    color: white;
  }

  .step-item.completed .step-number {
    background: var(--accent);
    color: white;
  }

  .step-content {
    display: flex;
    flex-direction: column;
  }

  .step-title {
    font-weight: 700;
    color: var(--text);
    margin: 0;
  }

  .step-desc {
    font-size: 12px;
    color: var(--muted);
    margin: 2px 0 0 0;
  }

  .step-item.active .step-title {
    color: var(--primary);
  }

  .step-connector {
    flex: 1;
    height: 2px;
    background: var(--line);
    margin: 0 15px;
  }

  .step-item.completed + .step-item .step-connector {
    background: var(--accent);
  }

  /* ====== STEP CONTENT AREAS ====== */
  .step-content-area {
    display: none;
    background: var(--card);
    border-radius: var(--radius);
    padding: 24px;
    box-shadow: var(--shadow);
    margin-bottom: 20px;
  }

  .step-content-area.active {
    display: block;
  }

  .step-navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 32px;
    padding: 24px 28px;
    border-top: 1px solid rgba(0, 150, 57, 0.1);
    background: 
      linear-gradient(135deg, rgba(0,150,57,0.02) 0%, rgba(0,150,57,0.05) 50%, rgba(0,150,57,0.02) 100%),
      linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.8) 50%, transparent 100%);
    border-radius: 0 0 16px 16px;
    backdrop-filter: blur(8px);
    box-shadow: 
      0 -2px 12px rgba(0,0,0,0.04),
      inset 0 1px 0 rgba(255,255,255,0.6);
    position: relative;
  }

  .step-navigation::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(0,150,57,0.2), transparent);
  }

  .btn-nav {
    display: inline-flex;
    align-items: center;
    gap: 10px;
    padding: 14px 28px;
    border-radius: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    border: none;
    font-size: 15px;
    position: relative;
    overflow: hidden;
    backdrop-filter: blur(10px);
    user-select: none;
  }

  .btn-nav::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.5), transparent);
    transition: left 0.6s ease;
  }

  .btn-nav:hover::before {
    left: 100%;
  }

  .btn-nav::after {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    padding: 1px;
    background: linear-gradient(135deg, rgba(255,255,255,0.2), transparent, rgba(255,255,255,0.1));
    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    mask-composite: exclude;
  }

  .btn-nav:active {
    transform: scale(0.98);
  }

  .btn-nav.secondary {
    background: linear-gradient(135deg, #f8fafc, #e2e8f0);
    color: #475569;
    border: 1px solid rgba(203, 213, 225, 0.7);
    box-shadow: 
      0 4px 12px rgba(0,0,0,0.05),
      0 2px 4px rgba(0,0,0,0.08),
      inset 0 1px 0 rgba(255,255,255,0.8);
  }

  .btn-nav.secondary:hover {
    background: linear-gradient(135deg, #e2e8f0, #cbd5e1);
    transform: translateX(-4px);
    box-shadow: 
      -4px 0 16px rgba(0,0,0,0.12),
      -2px 0 8px rgba(0,0,0,0.08),
      inset 0 1px 0 rgba(255,255,255,0.9);
    border-color: rgba(148, 163, 184, 0.8);
  }

  .btn-nav.success {
    background: linear-gradient(135deg, var(--primary), var(--accent), #059669);
    color: white;
    box-shadow: 
      0 6px 20px rgba(16, 185, 129, 0.25),
      0 3px 8px rgba(16, 185, 129, 0.15),
      inset 0 1px 0 rgba(255,255,255,0.2);
  }

  .btn-nav.success:hover {
    background: linear-gradient(135deg, var(--accent), #059669, var(--primary));
    transform: translateX(4px) translateY(-1px);
    box-shadow: 
      4px -1px 24px rgba(16, 185, 129, 0.35),
      2px -1px 12px rgba(16, 185, 129, 0.2),
      inset 0 1px 0 rgba(255,255,255,0.25);
  }

  .nav-actions {
    display: flex;
    gap: 16px;
    align-items: center;
  }

  @media (max-width: 768px) {
    .step-navigation {
      flex-direction: column;
      gap: 16px;
      padding: 20px 16px;
    }
    
    .nav-actions {
      width: 100%;
      justify-content: center;
    }
    
    .btn-nav {
      padding: 12px 20px;
      font-size: 14px;
    }
  }

  /* ====== Lưới nội dung chính ====== */
  .grid{margin-top:20px;display:grid;grid-template-columns:repeat(12,1fr);gap:16px}

  .panel{background:var(--card);border:1px solid var(--line);border-radius:18px;padding:18px;box-shadow:var(--shadow)}
  .panel h3{margin:0 0 10px;font-size:18px}

  /* Upload card (dropzone) */
  .drop{border:2px dashed #C1C7D0;border-radius:12px;padding:22px;text-align:center;background:#FAFBFC;transition:.2s}
  .drop.dragover{border-color:var(--primary);background:#F0F7FF}
  .progress{height:8px;background:#EBECF0;border-radius:999px;overflow:hidden;margin-top:12px}
  .bar{height:100%;width:0;background:var(--primary)}

  .row{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
  input[type="file"]{display:block;width:100%;max-width:420px;border:1px dashed var(--line);border-radius:12px;padding:10px;background:#fff}

  textarea{width:100%;min-height:160px;border-radius:12px;border:1px solid #DFE1E6;padding:12px;font:14px/1.4 ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas}
  pre.status{background:#f8fafc;border:1px solid var(--line);border-radius:12px;padding:12px;overflow:auto;max-height:320px}

  .spinner{width:18px;height:18px;border:3px solid #C1C7D0;border-top-color:var(--primary);border-radius:50%;display:none;animation:spin 1s linear infinite}
  @keyframes spin{to{transform:rotate(360deg)}}

  /* NEW: Processing Progress UI Styles */
  .processing-progress{margin-top:16px;padding:0;background:#f8fafc;border-radius:12px;border:1px solid #e2e8f0;overflow:hidden}
  
  /* Collapsible Header */
  .processing-header{display:flex;align-items:center;justify-content:space-between;padding:12px 16px;background:#fff;cursor:pointer;transition:all 0.2s;user-select:none}
  .processing-header:hover{background:#f8fafc}
  .processing-header-left{display:flex;align-items:center;gap:10px}
  .processing-header-right{display:flex;align-items:center;gap:12px}
  .processing-title{font-weight:600;font-size:14px;color:#0f172a}
  .processing-summary{font-size:13px;color:#64748b;padding:4px 10px;background:#f1f5f9;border-radius:12px}
  #processingIcon{color:#3b82f6;font-size:16px}
  #processingToggle{color:#64748b;font-size:12px;transition:transform 0.3s}
  .processing-header.expanded #processingToggle{transform:rotate(180deg)}
  
  /* Collapsible Details */
  .processing-details{max-height:0;overflow:hidden;transition:max-height 0.3s ease-out;padding:0 16px}
  .processing-details.expanded{max-height:500px;padding:12px 16px}
  
  .processing-steps{display:flex;flex-direction:column;gap:12px}
  .processing-step{display:flex;align-items:center;gap:12px;padding:12px;background:#fff;border-radius:8px;border:1px solid #e2e8f0;transition:all 0.3s}
  .processing-step.active{background:#eff6ff;border-color:#3b82f6}
  .processing-step.completed{background:#f0fdf4;border-color:#22c55e}
  .processing-step.error{background:#fef2f2;border-color:#ef4444}
  .step-icon{width:36px;height:36px;display:flex;align-items:center;justify-content:center;border-radius:50%;background:#f1f5f9;color:#64748b;font-size:16px}
  .processing-step.active .step-icon{background:#dbeafe;color:#3b82f6;animation:pulse 2s ease-in-out infinite}
  .processing-step.completed .step-icon{background:#dcfce7;color:#22c55e}
  .processing-step.error .step-icon{background:#fee2e2;color:#ef4444}
  .step-info{flex:1}
  .step-name{font-weight:600;font-size:14px;color:#0f172a;margin-bottom:4px}
  .step-status{font-size:12px;color:#64748b}
  .processing-step.active .step-status{color:#3b82f6}
  .processing-step.completed .step-status{color:#22c55e}
  .processing-step.error .step-status{color:#ef4444}
  .step-check{width:24px;height:24px;display:flex;align-items:center;justify-content:center;font-size:16px;color:#94a3b8}
  .processing-step.active .step-check{color:#3b82f6}
  .processing-step.completed .step-check{color:#22c55e}
  .processing-step.error .step-check{color:#ef4444}
  .processing-timeline{margin-top:12px;height:4px;background:#e2e8f0;border-radius:999px;overflow:hidden}
  .timeline-bar{height:100%;background:linear-gradient(90deg,#3b82f6,#06b6d4);width:0;transition:width 0.5s ease-out}
  @keyframes pulse{0%,100%{transform:scale(1)}50%{transform:scale(1.1)}}

  /* Tabs (giữ IDs JS, style mới) */
  .tab-container{margin-top:16px}
  .tab-buttons{display:flex;gap:8px;border-bottom:1px solid var(--line)}
  .tab-button{padding:10px 14px;cursor:pointer;background:transparent;border:none;border-bottom:2px solid transparent;font-weight:700;color:#334155}
  .tab-button.active{border-bottom-color:var(--primary);color:#0f172a}
  .tab-content{display:none;padding:16px 0}
  .tab-content.active{display:block}

  /* Title modes (auto/manual) */
  .title-modes{display:flex;flex-direction:column;gap:12px;align-items:flex-start}
  .title-input{border:1px solid #DFE1E6;border-radius:12px;padding:10px;font-size:14px;min-width:280px;background:#fff}



  /* Email OCR - combined panel */
  .email-ocr{display:flex;flex-direction:column;gap:16px}
  .email-upload-section{display:flex;flex-direction:column;gap:10px}
  .email-upload{border:2px dashed #C1C7D0;border-radius:12px;padding:16px;text-align:center;background:#FAFBFC;position:relative;transition:.2s}
  .email-upload.dragover{border-color:var(--primary);background:#F0F7FF}
  .email-upload.has-image{border-style:solid;border-color:#22c55e;background:#f0fdf4}
  .email-paste-area{min-height:120px;display:flex;flex-direction:column;align-items:center;justify-content:center;cursor:pointer;transition:all .3s}
  .email-paste-area i{font-size:24px;color:#94a3b8;margin-bottom:8px}
  .email-paste-area p{margin:0;color:#64748b;font-size:14px}
  .email-paste-area.has-image{min-height:0}
  .email-preview{margin-top:10px;text-align:center;position:relative}
  .email-preview img{max-width:100%;max-height:200px;border-radius:8px;border:1px solid var(--line)}
  .email-preview-actions{position:absolute;top:8px;right:8px;display:flex;gap:6px}
  .email-preview-actions button{width:32px;height:32px;border-radius:50%;background:rgba(255,255,255,0.9);border:1px solid var(--line);display:flex;align-items:center;justify-content:center;cursor:pointer;font-size:12px}
  .email-preview-actions button:hover{background:#fff}
  .email-status{margin-top:8px;padding:6px;border-radius:6px;display:none;font-size:13px}
  .email-status.success{background:#E6F4EA;color:#006644}
  .email-status.error{background:#FFEBE6;color:#BF2600}
  .email-status.processing{background:#E3F2FD;color:#0277bd}
  .email-paste-hint{position:absolute;top:6px;right:6px;background:#f1f5f9;border:1px solid var(--line);border-radius:6px;padding:4px 8px;font-size:11px;color:#64748b}

  /* Email OCR - combined panel */
  .email-ocr{display:flex;flex-direction:column;gap:12px}
  .email-input-row{display:grid;grid-template-columns:1fr 1fr;gap:12px;align-items:stretch}
  .email-upload-section{display:flex;flex-direction:column;gap:8px;height:100%}
  .email-upload{border:2px dashed #C1C7D0;border-radius:8px;padding:12px;text-align:center;background:#FAFBFC;position:relative;transition:.2s;height:140px;display:flex;flex-direction:column;justify-content:center}
  .email-upload.dragover{border-color:var(--primary);background:#F0F7FF}
  .email-upload.has-image{border-style:solid;border-color:#22c55e;background:#f0fdf4;height:auto;min-height:140px}
  .email-paste-area{min-height:80px;display:flex;flex-direction:column;align-items:center;justify-content:center;cursor:pointer;transition:all .3s;flex:1}
  .email-paste-area i{font-size:20px;color:#94a3b8;margin-bottom:6px}
  .email-paste-area p{margin:0;color:#64748b;font-size:13px}
  .email-paste-area.has-image{min-height:0;flex:none}
  .email-preview{margin-top:8px;text-align:center;position:relative}
  .email-preview img{max-width:100%;max-height:150px;border-radius:6px;border:1px solid var(--line)}
  .email-preview-actions{position:absolute;top:6px;right:6px;display:flex;gap:4px}
  .email-preview-actions button{width:28px;height:28px;border-radius:50%;background:rgba(255,255,255,0.9);border:1px solid var(--line);display:flex;align-items:center;justify-content:center;cursor:pointer;font-size:11px}
  .email-preview-actions button:hover{background:#fff}
  .email-status{margin-top:6px;padding:4px 8px;border-radius:4px;display:none;font-size:12px}
  .email-status.success{background:#E6F4EA;color:#006644}
  .email-status.error{background:#FFEBE6;color:#BF2600}
  .email-status.processing{background:#E3F2FD;color:#0277bd}
  .email-paste-hint{position:absolute;top:4px;right:4px;background:#f1f5f9;border:1px solid var(--line);border-radius:4px;padding:2px 6px;font-size:10px;color:#64748b}

  .email-actions{display:flex;gap:8px;flex-wrap:wrap}
  .email-actions button{flex:1;min-width:100px;font-size:13px;padding:8px 12px}

  .email-results{display:grid;grid-template-columns:1fr 1fr;gap:8px}
  .email-result-group{display:flex;flex-direction:column;gap:4px}
  .email-result-group label{font-weight:600;font-size:13px;color:#0f172a}
  .email-result-group textarea{min-height:80px;font-size:12px}

  /* Email text input section */
  .email-text-section{display:flex;flex-direction:column;gap:8px;height:140px}
  .email-text-upload{border:2px dashed #C1C7D0;border-radius:8px;padding:12px;background:#FAFBFC;position:relative;transition:.2s;height:100%;display:flex;flex-direction:column;justify-content:center;text-align:center}
  .email-text-upload:hover{border-color:var(--primary);background:#F0F7FF}
  .email-text-upload.has-text{border-style:solid;border-color:#3b82f6;background:#eff6ff}
  .email-text-area{display:flex;flex-direction:column;align-items:center;justify-content:center;cursor:text;transition:all .3s;position:relative;height:100%;overflow:hidden}
  .email-text-area i{font-size:20px;color:#94a3b8;margin-bottom:6px}
  .email-text-area p{margin:0 0 8px 0;color:#64748b;font-size:13px}
  .email-text-area textarea{position:absolute;top:0;left:0;width:100%;height:100%;border:none;background:transparent;resize:none;padding:8px;font-size:13px;color:#374151;outline:none;overflow-y:auto;max-height:100%}
  .email-text-area textarea::placeholder{color:transparent}
  .email-text-area textarea:focus{background:rgba(255,255,255,0.8);border-radius:4px}
  .email-text-area textarea:focus::placeholder{color:#9ca3af;text-align:left}
  .email-text-area textarea::-webkit-scrollbar{width:6px}
  .email-text-area textarea::-webkit-scrollbar-track{background:#f1f1f1;border-radius:3px}
  .email-text-area textarea::-webkit-scrollbar-thumb{background:#c1c7d0;border-radius:3px}
  .email-text-area textarea::-webkit-scrollbar-thumb:hover{background:#94a3b8}
  .email-text-hint{position:absolute;top:4px;right:4px;background:#f1f5f9;border:1px solid var(--line);border-radius:4px;padding:2px 6px;font-size:10px;color:#64748b}

  /* Responsive cho mobile */
  @media (max-width: 768px) {
    .email-input-row{grid-template-columns:1fr;gap:8px}
  }

  /* Confluence settings panel - redesigned */
  .confluence-settings{display:grid;grid-template-columns:repeat(2,1fr);gap:16px;margin-bottom:16px}
  .setting-group{display:flex;flex-direction:column;gap:6px}
  .setting-label{font-weight:600;color:#0f172a;font-size:14px}
  .setting-control{width:100%;border:1px solid #DFE1E6;border-radius:10px;padding:10px;font-family:inherit;font-size:14px;background:#fff}

  /* Confluence output panel */
  .confluence-output{display:flex;flex-direction:column;gap:16px}
  .output-actions{display:flex;justify-content:flex-end;align-items:center;padding:16px;background:linear-gradient(135deg, var(--soft), #ffffff);border-radius:12px;border:1px solid var(--line);margin-bottom:16px}
  .output-actions-right{display:flex;gap:12px;align-items:center}

  /* Footer nhỏ */
  .footer{padding:18px 10px;text-align:center;color:var(--muted)}

  /* ====== NEW STYLES FOR DISCUSSION AND ACTION TABLES ====== */
  .section-title {
    font-weight: 700;
    margin: 20px 0 10px;
    color: #0f172a;
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 16px;
  }

  .table-container {
    margin-bottom: 20px;
    border-radius: 10px;
    overflow: hidden;
    border: 1px solid var(--line);
  }

  .data-table {
    width: 100%;
    border-collapse: collapse;
    background: var(--card);
    table-layout: fixed; /* Để kiểm soát width tốt hơn */
  }

  .data-table th {
    background: #E6F4EA;
    color: #0b5a2b;
    text-align: left;
    padding: 12px;
    font-weight: 700;
    font-size: 14px;
  }

  .data-table td {
    padding: 10px 12px;
    border-bottom: 1px solid var(--line);
    vertical-align: top;
  }

  .data-table tr:last-child td {
    border-bottom: none;
  }

  .table-input {
    width: 100%;
    border: 1px solid #DFE1E6;
    border-radius: 6px;
    padding: 8px;
    font-size: 14px;
    transition: border-color 0.2s;
    min-height: 20px;
    resize: vertical;
    font-family: inherit;
    line-height: 1.4;
  }

  .table-input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(0, 150, 57, 0.1);
  }

  /* Special styling for textarea inputs */
  textarea.table-input {
    min-height: 40px;
    resize: vertical;
    overflow-y: auto;
  }

  .content-cell textarea.table-input {
    min-height: 60px;
  }

  /* Special styling for content columns */
  .data-table th:nth-child(2),
  .data-table td:nth-child(2) {
    width: 45%; /* Tăng cột nội dung lên 45% */
    min-width: 300px; /* Đảm bảo width tối thiểu */
  }

  .data-table .content-cell .table-input {
    min-height: 80px;
    word-wrap: break-word;
    white-space: pre-wrap;
    max-width: 100%;
    word-break: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
  }

  /* Responsive table for better content display */
  .table-container {
    overflow-x: auto;
    margin-bottom: 20px;
    border-radius: 10px;
    border: 1px solid var(--line);
    max-width: 100%;
  }

  /* Better table layout for content focus */
  .data-table {
    min-width: 1000px; /* Đảm bảo table có width tối thiểu */
  }

  /* Các cột khác thu nhỏ để nhường chỗ cho cột nội dung */
  .data-table th:first-child,
  .data-table td:first-child {
    width: 60px; /* STT */
  }

  .data-table th:last-child,
  .data-table td:last-child {
    width: 80px; /* Hành động */
    text-align: center;
  }

  /* Specific styling for Action Items table */
  #actionTable th:nth-child(3) { width: 120px; } /* Deadline */
  #actionTable th:nth-child(4) { width: 140px; } /* PIC */
  #actionTable th:nth-child(5) { width: 200px; min-width: 180px; } /* Ghi chú */
  #actionTable th:nth-child(6) { width: 120px; } /* Hành động - Tăng lên để chứa 2 nút */
  
  #actionTable td:nth-child(3) { width: 120px; }
  #actionTable td:nth-child(4) { width: 140px; }
  #actionTable td:nth-child(5) { width: 200px; min-width: 180px; }
  #actionTable td:nth-child(6) { width: 120px; text-align: center; }

  /* Style for action buttons container */
  #actionTable td:nth-child(6) {
    text-align: center;
    white-space: nowrap;
  }

  #actionTable td:nth-child(6) .btn-icon {
    display: inline-flex;
    margin: 0 3px;
    vertical-align: middle;
  }

  /* Action buttons row styling */
  .action-buttons {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 6px;
  }

  .btn-icon {
    background: transparent;
    border: none;
    color: #64748b;
    cursor: pointer;
    padding: 6px;
    border-radius: 6px;
    transition: all 0.2s;
  }

  .btn-icon:hover {
    background: #f1f5f9;
    color: #0f172a;
  }

  .delete-row:hover {
    color: #ef4444;
  }

  .create-jira-ticket {
    color: #0052cc;
  }

  .create-jira-ticket:hover {
    color: #0065ff;
    background: #deebff;
  }

  .table-actions {
    padding: 16px;
    background: linear-gradient(135deg, var(--soft), #ffffff);
    display: flex;
    justify-content: center;
    border-top: 1px solid var(--line);
  }

  /* Table actions với btn-nav sẽ tự động có styling từ btn-nav success */
  .table-actions .btn-nav {
    min-width: 140px;
  }

  /* Special hover effect for add row buttons */
  .table-actions .btn-nav i {
    transition: transform 0.3s ease;
  }

  .table-actions .btn-nav:hover i {
    transform: rotate(90deg);
  }

  /* New stylish "Add Row" button */
  .btn.small.line {
    padding: 12px 20px;
    font-size: 14px;
    font-weight: 600;
    background: linear-gradient(135deg, #ffffff, #f8fafc);
    border: 2px dashed var(--primary);
    color: var(--primary);
    border-radius: 12px;
    transition: all 0.3s ease;
    position: relative;
    overflow: visible;
  }

  .btn.small.line:hover {
    background: linear-gradient(135deg, var(--primary), var(--primary-600));
    color: white;
    border-style: solid;
    transform: translateY(-2px);
    box-shadow: 0 8px 16px rgba(0, 150, 57, 0.25);
  }

  .btn.small.line i {
    transition: all 0.3s ease;
  }

  .btn.small.line:hover i {
    transform: rotate(90deg) scale(1.1);
  }


  /* Popup Editor Styles */
  .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    z-index: 1000;
    align-items: center;
    justify-content: center;
  }

  .popup-editor {
    background: var(--card);
    border-radius: 16px;
    padding: 24px;
    max-width: 600px;
    width: 90%;
    max-height: 80vh;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    border: 1px solid var(--line);
  }

  .popup-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
    padding-bottom: 12px;
    border-bottom: 1px solid var(--line);
  }

  .popup-title {
    font-size: 18px;
    font-weight: 700;
    color: var(--text);
    margin: 0;
  }

  .popup-close {
    background: none;
    border: none;
    font-size: 24px;
    color: var(--muted);
    cursor: pointer;
    padding: 4px;
    border-radius: 6px;
    transition: all 0.2s;
  }

  .popup-close:hover {
    background: var(--soft);
    color: var(--text);
  }

  .popup-textarea {
    width: 100%;
    min-height: 200px;
    border: 1px solid var(--line);
    border-radius: 12px;
    padding: 16px;
    font-size: 14px;
    line-height: 1.5;
    resize: vertical;
    font-family: inherit;
    background: var(--card);
    color: var(--text);
  }

  .popup-textarea:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(0, 150, 57, 0.1);
  }

  .popup-actions {
    display: flex;
    gap: 12px;
    justify-content: flex-end;
    margin-top: 16px;
    padding-top: 16px;
    border-top: 1px solid var(--line);
  }

  .popup-btn {
    padding: 10px 20px;
    border-radius: 10px;
    font-weight: 600;
    cursor: pointer;
    border: none;
    transition: all 0.2s;
  }

  .popup-btn-primary {
    background: var(--primary);
    color: white;
  }

  .popup-btn-primary:hover {
    background: var(--primary-600);
  }

  .popup-btn-secondary {
    background: var(--soft);
    color: var(--text);
    border: 1px solid var(--line);
  }

  .popup-btn-secondary:hover {
    background: #eef2f7;
  }

  /* Jira Form Styles */
  .jira-form {
    padding: 0;
  }

  .form-group {
    margin-bottom: 16px;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 16px;
  }

  .form-label {
    display: block;
    font-weight: 600;
    color: var(--text);
    margin-bottom: 6px;
    font-size: 14px;
  }

  .form-input,
  .form-textarea {
    width: 100%;
    border: 1px solid var(--line);
    border-radius: 8px;
    padding: 10px;
    font-size: 14px;
    background: var(--card);
    color: var(--text);
    font-family: inherit;
  }

  .form-input:focus,
  .form-textarea:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(0, 150, 57, 0.1);
  }

  .form-input[readonly],
  .form-textarea[readonly] {
    background: #f8fafc;
    color: #64748b;
  }

  .form-textarea {
    resize: vertical;
    min-height: 80px;
  }

  /* Jira Ticket Popup Styling */
  .jira-ticket-popup {
    max-width: 750px;
    max-height: 85vh;
    overflow: hidden;
    margin: 2.5vh auto;
    box-shadow: 
      0 15px 50px rgba(0, 150, 57, 0.1),
      0 5px 15px rgba(0, 0, 0, 0.08);
    border: none;
    border-radius: 12px;
    backdrop-filter: blur(10px);
    background: rgba(255, 255, 255, 0.98);
    display: flex;
    flex-direction: column;
  }

  .jira-ticket-popup .popup-header {
    padding: 16px 20px;
    background: linear-gradient(135deg, #009639 0%, #006b2a 100%);
    color: white;
    position: relative;
    border-radius: 12px 12px 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-shrink: 0;
  }

  .jira-ticket-popup .popup-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
    opacity: 0.3;
  }

  .jira-ticket-popup .popup-header h3 {
    margin: 0;
    font-size: 20px;
    font-weight: 600;
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .jira-ticket-popup .popup-header .jira-icon {
    width: 28px;
    height: 28px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
  }

  .jira-ticket-popup .popup-close {
    background: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
    font-size: 24px;
    width: 36px;
    height: 36px;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    z-index: 10;
    position: relative;
  }

  .jira-ticket-popup .popup-close:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
  }

  .jira-ticket-popup .jira-form {
    padding: 20px;
    background: #ffffff;
    overflow-y: auto;
    flex: 1;
    min-height: 0;
  }

  .jira-ticket-popup .form-group {
    margin-bottom: 16px;
  }
  
  .jira-ticket-popup .form-group:last-child {
    margin-bottom: 0;
  }

  .jira-ticket-popup .form-group label {
    display: block;
    margin-bottom: 4px;
    font-weight: 600;
    color: #2c3e50;
    font-size: 13px;
  }

  .jira-ticket-popup .form-input,
  .jira-ticket-popup .form-select,
  .jira-ticket-popup .form-textarea {
    width: 100%;
    padding: 10px 14px;
    border: 2px solid #e1e8ed;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.2s ease;
    background: #ffffff;
    font-family: inherit;
  }

  .jira-ticket-popup .form-input:focus,
  .jira-ticket-popup .form-select:focus,
  .jira-ticket-popup .form-textarea:focus {
    outline: none;
    border-color: #009639;
    box-shadow: 0 0 0 4px rgba(0, 150, 57, 0.1);
    transform: translateY(-1px);
  }

  .jira-ticket-popup .form-textarea {
    resize: vertical;
    min-height: 80px;
  }

  .jira-ticket-popup .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 16px;
    margin-bottom: 16px;
  }
  
  .jira-ticket-popup .form-row:last-child {
    margin-bottom: 0;
  }

  .jira-ticket-popup .popup-actions {
    padding: 14px 20px;
    background: #f8fafc;
    border-top: 1px solid rgba(0, 150, 57, 0.1);
    gap: 8px;
    display: flex;
    justify-content: flex-end;
    border-radius: 0 0 12px 12px;
    flex-shrink: 0;
  }

  .jira-ticket-popup .popup-btn {
    padding: 8px 16px;
    border-radius: 8px;
    font-weight: 600;
    font-size: 13px;
    transition: all 0.2s ease;
    border: 1px solid transparent;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 5px;
    min-width: 100px;
    justify-content: center;
  }

  .jira-ticket-popup .popup-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .jira-ticket-popup .popup-btn-secondary {
    background: #ffffff;
    color: #6c757d;
    border-color: #dee2e6;
  }

  .jira-ticket-popup .popup-btn-secondary:hover {
    background: #f8f9fa;
    color: #5a6268;
    border-color: #adb5bd;
  }

  .jira-ticket-popup .popup-btn-accent {
    background: linear-gradient(135deg, #ff8c00 0%, #ff7300 100%);
    color: white;
    border-color: #ff8c00;
  }

  .jira-ticket-popup .popup-btn-accent:hover {
    background: linear-gradient(135deg, #ff7300 0%, #e65c00 100%);
  }

  .jira-ticket-popup .popup-btn-primary {
    background: linear-gradient(135deg, #009639 0%, #006b2a 100%);
    color: white;
    border-color: #009639;
  }

  .jira-ticket-popup .popup-btn-primary:hover {
    background: linear-gradient(135deg, #006b2a 0%, #004d1f 100%);
  }

  @media (max-width: 768px) {
    .jira-ticket-popup {
      max-width: 95%;
      margin: 1vh;
      max-height: 90vh;
    }
    
    .jira-ticket-popup .popup-header {
      padding: 12px 16px;
    }
    
    .jira-ticket-popup .jira-form {
      padding: 16px;
    }
    
    .jira-ticket-popup .popup-actions {
      padding: 12px 16px;
    }
    
    .jira-ticket-popup .form-row {
      grid-template-columns: 1fr;
      gap: 12px;
    }
    
    .jira-ticket-popup .popup-btn {
      min-width: 90px;
      padding: 8px 14px;
    }
  }

  /* Success popup styles */
  .success-popup {
    background: var(--card);
    border-radius: 16px;
    padding: 24px;
    max-width: 500px;
    width: 90%;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    border: 1px solid var(--line);
    text-align: center;
  }

  .success-icon {
    width: 64px;
    height: 64px;
    background: linear-gradient(135deg, #22c55e, #16a34a);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 16px;
    color: white;
    font-size: 28px;
  }

  .success-title {
    font-size: 20px;
    font-weight: 700;
    color: var(--text);
    margin: 0 0 8px;
  }

  .success-message {
    color: var(--muted);
    margin: 0 0 20px;
    line-height: 1.5;
  }

  .ticket-info {
    background: var(--soft);
    border-radius: 12px;
    padding: 16px;
    margin: 20px 0;
    text-align: left;
  }

  .ticket-key {
    font-weight: 700;
    color: var(--primary);
    font-size: 16px;
    margin-bottom: 8px;
  }

  .ticket-url {
    font-size: 14px;
    color: var(--muted);
    word-break: break-all;
  }

  .success-actions {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 12px;
    margin-top: 24px;
  }

  .success-actions .popup-btn {
    margin: 0;
  }

  /* Bulk tickets success specific styles */
  .bulk-tickets-info {
    max-height: 300px;
    overflow-y: auto;
    margin: 20px 0;
    padding: 16px;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #e9ecef;
  }

  .bulk-ticket-item {
    display: flex;
    align-items: center;
    padding: 8px 0;
    border-bottom: 1px solid #e9ecef;
    font-size: 14px;
  }

  .bulk-ticket-item:last-child {
    border-bottom: none;
  }

  .bulk-ticket-key {
    font-weight: 600;
    color: var(--primary);
    margin-right: 12px;
    min-width: 80px;
  }

  .bulk-ticket-summary {
    flex: 1;
    color: var(--text);
  }

  .bulk-ticket-status {
    margin-left: 8px;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
  }

  .bulk-ticket-success {
    background: #d4edda;
    color: #155724;
  }

  .bulk-ticket-error {
    background: #f8d7da;
    color: #721c24;
  }

  .edit-icon {
    position: absolute;
    top: 4px;
    right: 4px;
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 6px;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 12px;
    opacity: 0;
    transition: all 0.2s;
    z-index: 10;
  }

  .table-input-container {
    position: relative;
  }

  .table-input-container:hover .edit-icon {
    opacity: 1;
  }

  .table-input-container .table-input {
    padding-right: 32px;
  }

  /* AI Insights Tab Interface */
  .insight-tabs {
    display: flex;
    justify-content: center;
    gap: 16px;
    margin: 20px 0;
  }

  .insight-tab-btn {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    padding: 20px 24px;
    background: white;
    border: 2px solid #e5e7eb;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
    min-width: 200px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }

  .insight-tab-btn:hover:not(:disabled) {
    border-color: var(--primary);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  }

  .insight-tab-btn.active {
    background: var(--primary);
    border-color: var(--primary);
    color: white;
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .insight-tab-btn:disabled {
    background: #f9fafb;
    border-color: #e5e7eb;
    color: #9ca3af;
    cursor: not-allowed;
    opacity: 0.6;
  }

  .insight-tab-btn i {
    font-size: 24px;
  }

  .insight-tab-btn span {
    font-weight: 600;
    font-size: 16px;
  }

  .insight-tab-btn small {
    font-size: 12px;
    opacity: 0.8;
    margin-top: 4px;
  }

  .insight-tab-content {
    display: none;
  }

  .insight-tab-content.active {
    display: block;
  }

  /* Animation for gradient */
  @keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  /* Structured Analysis Table Styling */
  #structuredAnalysisTable {
    min-width: 900px;
    border-collapse: collapse;
  }

  #structuredAnalysisTable th,
  #structuredAnalysisTable td {
    border: 1px solid #e5e7eb;
    padding: 12px 8px;
    vertical-align: top;
  }

  #structuredAnalysisTable th {
    background: var(--soft);
    font-weight: 600;
    text-align: center;
    font-size: 13px;
  }

  #structuredAnalysisTable td {
    font-size: 14px;
  }

  #structuredAnalysisTable tbody tr:hover {
    background: #f8fafc;
  }

  .structured-bulk-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
    gap: 16px;
  }

  .structured-bulk-card {
    background: linear-gradient(180deg, #ffffff 0%, #f8fafc 100%);
    border: 1px solid #e2e8f0;
    border-radius: 16px;
    padding: 16px;
    box-shadow: 0 12px 32px rgba(15, 23, 42, 0.08);
    display: flex;
    flex-direction: column;
    gap: 12px;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    position: relative;
    overflow: hidden;
  }

  .structured-bulk-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at top right, rgba(0, 82, 204, 0.12), transparent 55%);
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  .structured-bulk-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 16px 36px rgba(15, 23, 42, 0.12);
  }

  .structured-bulk-card:hover::before {
    opacity: 1;
  }

  .structured-bulk-header {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .structured-bulk-number {
    width: 36px;
    height: 36px;
    border-radius: 12px;
    background: linear-gradient(135deg, #e0f2fe 0%, #bfdbfe 100%);
    color: #1d4ed8;
    font-weight: 700;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .structured-bulk-summary {
    font-weight: 600;
    color: #0f172a;
    line-height: 1.45;
    font-size: 14px;
  }

  .structured-bulk-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    margin-top: 4px;
  }

  .structured-bulk-chip {
    display: inline-flex;
    align-items: center;
    gap: 4px;
    padding: 4px 10px;
    border-radius: 999px;
    font-size: 12px;
    font-weight: 600;
    background: #f1f5f9;
    color: #475569;
  }

  .structured-bulk-chip.deadline {
    background: rgba(14, 165, 233, 0.12);
    color: #0ea5e9;
  }

  .structured-bulk-chip.assignee {
    background: rgba(147, 51, 234, 0.12);
    color: #9333ea;
  }

  .structured-bulk-chip.notes {
    background: rgba(16, 185, 129, 0.12);
    color: #10b981;
  }

  .structured-bulk-controls {
    display: grid;
    gap: 6px;
  }

  .structured-bulk-controls label {
    font-size: 12px;
    font-weight: 600;
    color: #475569;
    letter-spacing: 0.01em;
  }

  .structured-bulk-component,
  .structured-bulk-parent {
    width: 100%;
    border-radius: 12px;
    border: 1px solid #e2e8f0;
    padding: 10px 12px;
    font-size: 13px;
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
    background: white;
  }

  .structured-bulk-component:focus,
  .structured-bulk-parent:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
  }

  .structured-bulk-status {
    margin-top: 16px;
    font-size: 13px;
    padding: 12px 16px;
    border-radius: 12px;
    background: rgba(59, 130, 246, 0.08);
    border: 1px solid rgba(59, 130, 246, 0.18);
    color: #1d4ed8;
  }

  .structured-bulk-empty {
    padding: 24px;
    border-radius: 16px;
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 1px dashed #cbd5f5;
    text-align: center;
    color: #64748b;
    font-size: 14px;
    font-weight: 500;
  }

  /* Editable content cell styling */
  .editable-content-cell .content-text {
    transition: all 0.2s ease;
  }

  .editable-content-cell .content-text:hover {
    background: #f0f9ff !important;
    border-left: 3px solid #0052cc !important;
    padding-left: 8px;
    cursor: text;
    box-shadow: 0 2px 8px rgba(0, 82, 204, 0.1);
  }

  .editable-content-cell .content-input {
    font-family: inherit;
    line-height: 1.4;
    outline: none;
  }

  .editable-content-cell .content-input:focus {
    border-color: #0052cc;
    box-shadow: 0 0 0 3px rgba(0, 82, 204, 0.1);
  }

  /* Responsive for structured table */
  @media (max-width: 1200px) {
    #structuredAnalysisTable {
      min-width: 800px;
    }
    
    #structuredAnalysisTable th,
    #structuredAnalysisTable td {
      padding: 8px 6px;
      font-size: 12px;
    }
  }

  @media (max-width:1100px){
    .hero{grid-template-columns:1fr}
    .grid{grid-template-columns:repeat(12,1fr)}
    .confluence-settings{grid-template-columns:1fr}
    .email-results{grid-template-columns:1fr}
    
    /* Responsive tables */
    .data-table th:nth-child(2),
    .data-table td:nth-child(2) {
      width: 50%; /* Tăng width cho content trên mobile */
      min-width: 250px;
    }
    
    .data-table {
      min-width: 800px; /* Giảm min-width trên mobile */
    }
    
    .data-table th,
    .data-table td {
      padding: 8px 6px;
      font-size: 13px;
    }
    
    .table-input {
      font-size: 13px;
      padding: 6px;
    }

    /* Mobile specific adjustments */
    #actionTable th:nth-child(5),
    #actionTable td:nth-child(5) {
      width: 150px;
      min-width: 120px;
    }

    /* Responsive tabs */
    .insight-tabs {
      flex-direction: column;
      gap: 12px;
    }

    .insight-tab-btn {
      min-width: auto;
      padding: 16px 20px;
    }

    .insight-tab-btn span {
      font-size: 14px;
    }

    .insight-tab-btn small {
      font-size: 11px;
    }
  }

  /* ====== Page ID Help Popup ====== */
  .pageid-help-popup {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(5px);
    z-index: 10000;
    animation: fadeIn 0.3s ease;
  }
  
  .pageid-help-popup.show {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  .pageid-help-content {
    background: var(--card);
    border-radius: 20px;
    max-width: 700px;
    width: 90%;
    max-height: 85vh;
    overflow-y: auto;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
    animation: slideUp 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    position: relative;
  }
  
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(50px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  .pageid-help-header {
    background: linear-gradient(135deg, var(--primary), var(--primary-600));
    color: white;
    padding: 24px 28px;
    border-radius: 20px 20px 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .pageid-help-header h3 {
    margin: 0;
    font-size: 20px;
    font-weight: 700;
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .pageid-help-close {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border: none;
    background: rgba(255, 255, 255, 0.2);
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    font-size: 18px;
  }
  
  .pageid-help-close:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: rotate(90deg);
  }
  
  .pageid-help-body {
    padding: 28px;
  }
  
  .help-step {
    background: var(--soft);
    border: 1px solid var(--line);
    border-radius: 14px;
    padding: 20px;
    margin-bottom: 20px;
    transition: all 0.3s ease;
    animation: fadeInStep 0.5s ease backwards;
  }
  
  .help-step:nth-child(1) { animation-delay: 0.1s; }
  .help-step:nth-child(2) { animation-delay: 0.2s; }
  .help-step:nth-child(3) { animation-delay: 0.3s; }
  
  @keyframes fadeInStep {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  .help-step:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }
  
  .help-step-number {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--primary), var(--primary-600));
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    font-size: 18px;
    margin-bottom: 12px;
    box-shadow: 0 4px 12px rgba(0, 150, 57, 0.3);
  }
  
  .help-step-title {
    font-weight: 700;
    font-size: 16px;
    color: var(--primary);
    margin-bottom: 8px;
  }
  
  .help-step-desc {
    color: var(--muted);
    font-size: 14px;
    line-height: 1.6;
    margin-bottom: 12px;
  }
  
  .help-url-example {
    background: var(--card);
    border: 1px solid var(--primary);
    border-radius: 8px;
    padding: 12px;
    font-family: 'Courier New', monospace;
    font-size: 13px;
    color: var(--text);
    overflow-x: auto;
    position: relative;
  }
  
  .help-url-example .highlight {
    background: rgba(0, 150, 57, 0.2);
    color: var(--primary);
    font-weight: 700;
    padding: 2px 4px;
    border-radius: 4px;
    animation: pulse 2s ease-in-out infinite;
  }
  
  @keyframes pulse {
    0%, 100% { background: rgba(0, 150, 57, 0.2); }
    50% { background: rgba(0, 150, 57, 0.4); }
  }
  
  .help-icon {
    transition: all 0.3s ease;
  }
  
  .help-icon:hover {
    transform: scale(1.2) rotate(15deg);
    color: var(--primary-600);
  }
  
  .help-note {
    background: linear-gradient(135deg, #fff7ed 0%, #ffedd5 100%);
    border-left: 4px solid #f59e0b;
    padding: 16px;
    border-radius: 8px;
    margin-top: 20px;
  }
  
  .help-note-title {
    display: flex;
    align-items: center;
    gap: 8px;
    font-weight: 700;
    color: #ea580c;
    margin-bottom: 8px;
  }
  
  .help-note-content {
    color: #9a3412;
    font-size: 14px;
    line-height: 1.6;
  }
</style>
</head>
<body>
  <!-- Header đồng bộ -->
  <header class="top">
    <div class="row">
      <!-- Header Section - Cập nhật để hiển thị ngang hàng và căn giữa -->
      <div class="header-section">
        <a class="back-btn" href="/">
          <i class="fas fa-arrow-left"></i>
          <span>Về menu PMO</span>
        </a>
        
        <div class="page-title">
          <div class="header-logo">
          </div>
        </div>
        
        <!-- Navigation -->
        <nav class="nav">
          <a href="/meetingnote"><i class="fa-solid fa-microphone-lines"></i>&nbsp;Meeting Note</a>
          <a href="/risk"><i class="fa-solid fa-triangle-exclamation"></i>&nbsp;Risk Management</a>
          <a href="/chatbot"><i class="fa-solid fa-robot"></i>&nbsp;Chat Bot</a>
        </nav>
      </div>
    </div>
  </header>

  <main class="container">
    <!-- HEADER -->
    <div style="text-align: center; margin-bottom: 30px;">
      <h1 style="font-size: 32px; font-weight: 800; margin: 0 0 8px; color: var(--primary);"><i class="fas fa-microphone-lines"></i> AI Meeting Insights</h1>
      <p style="color: var(--muted); margin: 0 0 20px;">Tạo biên bản họp và báo cáo tiến độ tự động từ file ghi âm</p>
      
      <!-- Tab Navigation -->
      <div class="insight-tabs">
        <button class="insight-tab-btn" id="structuredTab" data-tab="structured">
          <i class="fa-solid fa-chart-line"></i>
          <span>AI Structured Insight</span>
          <small>Phân tích nội dung Confluence có cấu trúc</small>
        </button>
        <button class="insight-tab-btn active" id="conversationalTab" data-tab="conversational">
          <i class="fa-solid fa-comments"></i>
          <span>AI Conversational Insight</span>
          <small>Xử lý cuộc hội thoại & meeting</small>
        </button>
      </div>
    </div>

    <!-- Tab Content Containers -->
    <div class="insight-tab-content active" id="conversationalInsight">
      <!-- AI Conversational Insight Content -->
      
      <!-- STEP WIZARD -->
    <div class="step-wizard">
      <div class="step-item active" id="step1">
        <div class="step-number">1</div>
        <div class="step-content">
          <div class="step-title">Cấu hình</div>
          <div class="step-desc">Space, Template, Naming</div>
        </div>
      </div>
      <div class="step-connector"></div>
      <div class="step-item" id="step2">
        <div class="step-number">2</div>
        <div class="step-content">
          <div class="step-title">Dữ liệu</div>
          <div class="step-desc">Audio, OCR</div>
        </div>
      </div>
      <div class="step-connector"></div>
      <div class="step-item" id="step3">
        <div class="step-number">3</div>
        <div class="step-content">
          <div class="step-title">Nội dung</div>
          <div class="step-desc">Thảo luận & Hành động</div>
        </div>
      </div>
    </div>

    <!-- STEP 1: Configuration (Space, Template, Naming) -->
    <div class="step-content-area active" id="stepContent1">
      <h2 style="margin: 0 0 20px; display: flex; align-items: center; gap: 10px;">
        <i class="fa-solid fa-cog"></i> Bước 1: Cấu hình Confluence
      </h2>
      
      <div class="grid">
        <!-- Space & Template Settings -->
        <div class="panel" style="grid-column: span 6;">
          <h3><i class="fa-solid fa-folder"></i> Chọn Space & Template</h3>
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
            <div class="setting-group">
              <label class="setting-label">Confluence Space:</label>
              <select id="spaceSelect" class="setting-control">
                <option value="">Loading spaces...</option>
              </select>
            </div>
            <div class="setting-group">
              <label class="setting-label">
                Parent Page ID:
                <i class="fa-solid fa-circle-question help-icon" id="helpParentPageId" title="Hướng dẫn lấy Page ID" style="cursor: pointer; color: var(--primary); margin-left: 6px; font-size: 14px;"></i>
              </label>
              <input id="parentIdInput" class="setting-control" type="text" placeholder="ID của page cha (tùy chọn)">
            </div>
          </div>
          
          <div class="setting-group" style="margin-top: 16px;">
            <label class="setting-label">AI Model để xử lý:</label>
            <select id="aiModelSelect" class="setting-control">
              <option value="grok4">Grok 4</option>
              <option value="gemini2.5pro">Gemini 2.5 Pro</option>
              <option value="gpt5nano">GPT-5 Nano</option>
            </select>
            <small style="color: var(--muted); font-size: 12px; margin-top: 4px; display: block;">
              <i class="fa-solid fa-info-circle"></i> Chọn AI model để phân tích transcript và xử lý văn bản
            </small>
          </div>
        </div>

        <!-- Naming Strategy -->
        <div class="panel" style="grid-column: span 6;">
          <h3><i class="fa-solid fa-tag"></i> Cách đặt tên trang</h3>
          <div class="title-modes">
            <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
              <input type="radio" name="titleMode" id="modeAuto" checked style="margin: 0;"> 
              <span>Tự động đánh số (từ template & ngày)</span>
            </label>
            <label style="display: flex; align-items: center; gap: 8px; cursor: pointer;">
              <input type="radio" name="titleMode" id="modeManual" style="margin: 0;"> 
              <span>Tự đặt tiêu đề</span>
            </label>
          </div>
          <input id="pageTitle" class="title-input" type="text" placeholder="Nhập tiêu đề trang Confluence" style="display:none; margin-top: 12px; width: 100%;">
          
          <div style="margin-top: 16px; padding: 12px; background: var(--soft); border-radius: 8px; font-size: 14px; color: var(--muted);">
            <i class="fa-solid fa-info-circle"></i> 
            <strong>Tự động:</strong> Sẽ tạo tiêu đề dạng "[MOM] Họp dự án AI - 06/10/2025"
          </div>
        </div>
      </div>

      <div class="step-navigation">
        <div></div>
        <button class="btn-nav success" onclick="nextStep(2)">
          <i class="fa-solid fa-arrow-right"></i>
          <span>Tiếp theo</span>
        </button>
      </div>
    </div>

    <!-- STEP 2: Data Input (Audio, OCR) -->
    <div class="step-content-area" id="stepContent2">
      <h2 style="margin: 0 0 20px; display: flex; align-items: center; gap: 10px;">
        <i class="fa-solid fa-database"></i> Bước 2: Nhập dữ liệu
      </h2>

      <div class="grid">
        <!-- Audio Upload -->
        <div class="panel" style="grid-column: span 6">
          <h3><i class="fa-solid fa-file-audio"></i> Tải & xử lý ghi âm</h3>
          <div id="drop" class="drop" style="cursor: pointer;">
          <input id="file" type="file" accept="audio/*,video/*" style="position:absolute;left:-9999px;width:0;height:0;opacity:0"/>
            <p><strong>Kéo thả</strong> tệp vào đây hoặc <span style="color: var(--primary); font-weight: 600;">click bất kỳ đâu</span> để chọn MP3/MP4.</p>
            <p class="muted" id="sel">Chưa chọn tệp</p>
            <div class="progress"><div id="bar" class="bar"></div></div>
            
            <!-- NEW: Processing Progress UI -->
            <div id="processingProgress" class="processing-progress" style="display:none;">
              <!-- Header - Always visible, clickable to expand/collapse -->
              <div class="processing-header" id="processingHeader">
                <div class="processing-header-left">
                  <i class="fa-solid fa-cog fa-spin" id="processingIcon"></i>
                  <span class="processing-title" id="processingTitle">Đang xử lý...</span>
                </div>
                <div class="processing-header-right">
                  <span class="processing-summary" id="processingSummary">Bước 1/3</span>
                  <i class="fa-solid fa-chevron-down" id="processingToggle"></i>
                </div>
              </div>
              
              <!-- Detailed Steps - Collapsible -->
              <div class="processing-details" id="processingDetails" style="display:none;">
                <div class="processing-steps">
                  <div class="processing-step" id="step-upload">
                    <div class="step-icon"><i class="fa-solid fa-cloud-arrow-up"></i></div>
                    <div class="step-info">
                      <div class="step-name">Upload file</div>
                      <div class="step-status">Đang chờ...</div>
                    </div>
                    <div class="step-check"><i class="fa-solid fa-circle-notch fa-spin"></i></div>
                  </div>
                  <div class="processing-step" id="step-deepgram">
                    <div class="step-icon"><i class="fa-solid fa-waveform-lines"></i></div>
                    <div class="step-info">
                      <div class="step-name">Deepgram STT</div>
                      <div class="step-status">Đang chờ...</div>
                    </div>
                    <div class="step-check"><i class="fa-solid fa-circle-notch fa-spin"></i></div>
                  </div>
                  <div class="processing-step" id="step-ai">
                    <div class="step-icon"><i class="fa-solid fa-robot"></i></div>
                    <div class="step-info">
                      <div class="step-name">AI Processing</div>
                      <div class="step-status">Đang chờ...</div>
                    </div>
                    <div class="step-check"><i class="fa-solid fa-circle-notch fa-spin"></i></div>
                  </div>
                </div>
                <div class="processing-timeline">
                  <div class="timeline-bar" id="timelineBar"></div>
                </div>
              </div>
            </div>
            
            <div class="row" style="margin-top:12px">
              <button id="btnUpload" class="btn-nav success"><i class="fa-solid fa-bolt"></i><span>Upload & chạy pipeline</span></button>
              <button id="btnCancel" class="btn-nav secondary"><i class="fa-solid fa-xmark"></i><span>Hủy</span></button>
              <span id="state" class="muted">Trạng thái</span>
              <span id="spin" class="spinner" aria-hidden="true"></span>
            </div>
          </div>
        </div>

        <!-- Email OCR -->
        <div class="panel" style="grid-column: span 6">
          <h3><i class="fa-solid fa-envelope"></i> Chèn ảnh email (OCR)</h3>
          <div class="email-ocr">
            <!-- Upload và Text Input cùng hàng -->
            <div class="email-input-row">
              <div class="email-upload-section">
                <div id="emailDrop" class="email-upload">
                  <div class="email-paste-hint"><i class="fa-solid fa-paste"></i> Ctrl+V để dán</div>
                  <div id="emailPasteArea" class="email-paste-area" style="cursor:pointer" tabindex="0" role="button" aria-label="Chọn ảnh từ máy">
                    <i class="fa-solid fa-image"></i>
                    <p>Kéo thả hoặc dán ảnh từ clipboard</p>
                  </div>
                  <input id="emailImage" type="file" accept="image/*" style="position:absolute;left:-9999px;width:0;height:0;opacity:0"/>
                  <div class="email-preview" id="emailPreview" style="display:none">
                    <img id="emailImgPreview" src="" alt="Email preview">
                    <div class="email-preview-actions">
                      <button id="btnRemoveImage" title="Xóa"><i class="fa-solid fa-trash"></i></button>
                      <button id="btnProcessImage" style="display:none" title="Upload" class="primary"><i class="fa-solid fa-upload"></i></button>
                    </div>
                  </div>
                  <div id="emailStatus" class="email-status"></div>
                </div>
              </div>

              <!-- Text Input Section -->
              <div class="email-text-section">
                <div class="email-text-upload">
                  <div class="email-text-hint"><i class="fa-solid fa-keyboard"></i> Chèn văn bản vào đây</div>
                  <div class="email-text-area" tabindex="0">
                    <i class="fa-solid fa-file-text"></i>
                    <p>Dán văn bản chứa email vào đây</p>
                    <textarea id="emailTextInput" class="field-textarea" placeholder="Dán văn bản chứa email vào đây..." rows="3"></textarea>
                  </div>
                </div>
              </div>
            </div>

            <div class="email-actions">
              <button id="btnExtractEmails" class="btn-nav secondary"><i class="fa-solid fa-envelope-open-text"></i><span>Trích xuất email</span></button>
              <button id="btnProcessText" class="btn-nav primary"><i class="fa-solid fa-robot"></i><span>Xử lý văn bản</span></button>
              <button id="btnGetJiraIds" class="btn-nav success"><i class="fa-solid fa-id-badge"></i><span>Lấy Jira IDs</span></button>
            </div>

            <div class="email-results">
              <div class="email-result-group">
                <label>Danh sách email:</label>
                <textarea id="ocrEmails" class="field-textarea" placeholder="Danh sách email được trích xuất, cách nhau bằng dấu ;"></textarea>
              </div>
              <div class="email-result-group">
                <label>Jira Account IDs:</label>
                <textarea id="ocrJiraIds" class="field-textarea" placeholder="Jira Account IDs sẽ hiển thị ở đây" readonly></textarea>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="step-navigation">
        <button class="btn-nav secondary" onclick="prevStep(1)">
          <i class="fa-solid fa-arrow-left"></i>
          <span>Trở lại</span>
        </button>
        <button class="btn-nav success" onclick="nextStep(3)" id="step2NextBtn" disabled>
          <i class="fa-solid fa-arrow-right"></i>
          <span>Tiếp theo</span>
        </button>
      </div>
    </div>

    <!-- STEP 3: Content Tables -->
    <div class="step-content-area" id="stepContent3">
      <h2 style="margin: 0 0 20px; display: flex; align-items: center; gap: 10px;">
        <i class="fa-solid fa-table"></i> Bước 3: Chỉnh sửa nội dung
      </h2>

      <div class="grid">
        <!-- Discussion Topics Table -->
        <div class="panel" style="grid-column: span 12;">
          <div class="section-title">
            <i class="fa-solid fa-comments"></i> Discussion topics (Chủ đề thảo luận)
          </div>
          <div class="table-container" style="margin-top:12px">
            <table class="data-table" id="discussionTable">
              <thead>
                <tr>
                  <th style="width: 50px">STT</th>
                  <th>Nội dung</th>
                  <th style="width: 150px">PIC</th>
                  <th>Ghi chú</th>
                  <th style="width: 50px">Hành động</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>1</td>
                  <td class="content-cell">
                    <div class="table-input-container">
                      <textarea class="table-input" placeholder="Nội dung thảo luận" rows="3"></textarea>
                      <button class="edit-icon" title="Chỉnh sửa nội dung"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td>
                    <select class="table-input pic-dropdown">
                      <option value="">-- Chọn người phụ trách --</option>
                    </select>
                  </td>
                  <td>
                    <div class="table-input-container">
                      <textarea class="table-input" placeholder="Ghi chú" rows="2"></textarea>
                      <button class="edit-icon" title="Chỉnh sửa ghi chú"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td><button class="btn-icon delete-row" title="Xóa"><i class="fa-solid fa-trash"></i></button></td>
                </tr>
              </tbody>
            </table>
            <div class="table-actions">
              <button id="addDiscussionRow" class="btn-nav success">
                <i class="fa-solid fa-plus"></i><span>Thêm dòng</span>
              </button>
            </div>
          </div>
        </div>

        <!-- Action Items Table -->
        <div class="panel" style="grid-column: span 12; margin-top: 20px;">
          <div class="section-title">
            <i class="fa-solid fa-list-check"></i> Action items (Hành động cần thực hiện)
          </div>
          <div class="table-container" style="margin-top:12px">
            <table class="data-table" id="actionTable">
              <thead>
                <tr>
                  <th style="width: 50px">STT</th>
                  <th>Nội dung</th>
                  <th style="width: 120px">Deadline</th>
                  <th style="width: 150px">PIC</th>
                  <th>Ghi chú</th>
                  <th style="width: 120px">Hành động</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>1</td>
                  <td class="content-cell">
                    <div class="table-input-container">
                      <textarea class="table-input" placeholder="Hành động cần thực hiện" rows="3"></textarea>
                      <button class="edit-icon" title="Chỉnh sửa nội dung"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td><input type="date" class="table-input"></td>
                  <td>
                    <select class="table-input pic-dropdown">
                      <option value="">-- Chọn người phụ trách --</option>
                    </select>
                  </td>
                  <td>
                    <div class="table-input-container">
                      <textarea class="table-input" placeholder="Ghi chú" rows="2"></textarea>
                      <button class="edit-icon" title="Chỉnh sửa ghi chú"><i class="fa-solid fa-edit"></i></button>
                    </div>
                  </td>
                  <td>
                    <div class="action-buttons">
                      <button class="btn-icon create-jira-ticket" title="Tạo Jira ticket"><i class="fa-brands fa-jira"></i></button>
                      <button class="btn-icon delete-row" title="Xóa"><i class="fa-solid fa-trash"></i></button>
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
            <div class="table-actions">
              <button id="addActionRow" class="btn-nav primary">
                <i class="fa-solid fa-plus"></i><span>Thêm dòng</span>
              </button>
              <button id="createAllTickets" class="btn-nav success" style="margin-left: 10px;">
                <i class="fa-brands fa-jira"></i><span>Tạo tất cả ticket</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Output & Results Section -->
      <div class="panel" style="margin-top: 20px;">
        <h3><i class="fa-solid fa-square-poll-horizontal"></i> Kết quả & Tạo Confluence</h3>
        
        <!-- Output Actions -->
        <div class="output-actions">
          <div class="output-actions-right">
            <button id="btnCreate" class="btn-nav success" disabled>
              <i class="fa-solid fa-file-circle-plus"></i>
              <span>Tạo page Confluence</span>
            </button>
          </div>
        </div>

        <!-- Output Area -->
        <div class="confluence-output">
          <textarea id="out" placeholder="Thông báo tiến trình sẽ hiển thị ở đây..." readonly style="min-height: 120px;"></textarea>
          <pre id="log" class="status" style="display:none"></pre>

          <div id="pageLinkContainer" class="panel" style="display:none; padding:12px;">
            <div class="row" style="justify-content:space-between;width:100%">
              <span><i class="fa-solid fa-circle-check" style="color:var(--primary)"></i> Page Confluence đã được tạo thành công!</span>
              <a id="pageLink" href="#" target="_blank" class="btn ghost">
                <i class="fas fa-external-link-alt"></i> Mở page
              </a>
            </div>
          </div>
        </div>
      </div>

      <div class="step-navigation">
        <button class="btn-nav secondary" onclick="prevStep(2)">
          <i class="fa-solid fa-arrow-left"></i>
          <span>Trở lại</span>
        </button>
        <div></div>
      </div>
    </div>
    </div> <!-- End conversationalInsight -->

    <!-- AI Structured Insight Tab Content -->
    <div class="insight-tab-content" id="structuredInsight">
      <div style="padding: 20px;">
        <h2 style="margin: 0 0 20px; display: flex; align-items: center; gap: 10px; color: var(--primary);">
          <i class="fa-solid fa-chart-line"></i> AI Structured Insight
        </h2>
        <p style="color: var(--muted); margin: 0 0 30px;">Phân tích và trích xuất Action Items từ Confluence page có cấu trúc</p>

        <!-- Configuration Section -->
        <div class="panel" style="margin-bottom: 20px;">
          <h3><i class="fa-solid fa-cog"></i> Cấu hình phân tích</h3>
          
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 16px;">
            <div class="setting-group">
              <label class="setting-label">Chọn dự án:</label>
              <select id="structuredSpaceSelect" class="setting-control">
                <option value="">Loading spaces...</option>
              </select>
            </div>
            
            <div class="setting-group">
              <label class="setting-label">
                Page ID Confluence:
                <i class="fa-solid fa-circle-question help-icon" id="helpStructuredPageId" title="Hướng dẫn lấy Page ID" style="cursor: pointer; color: var(--primary); margin-left: 6px; font-size: 14px;"></i>
              </label>
              <input id="structuredPageId" class="setting-control" type="text" placeholder="Nhập Page ID (vd: 123456789)">
              <small style="color: var(--muted); font-size: 12px; margin-top: 4px; display: block;">
                Page ID có thể tìm trong URL hoặc page info của Confluence
              </small>
            </div>
          </div>

          <div style="margin-top: 20px; display: flex; gap: 12px;">
            <button id="btnAnalyzePage" class="btn-nav success" disabled>
              <i class="fa-solid fa-search"></i>
              <span>Trích xuất Action Items</span>
            </button>
            <button id="btnClearAnalysis" class="btn-nav secondary" style="display: none;">
              <i class="fa-solid fa-trash"></i>
              <span>Xóa kết quả</span>
            </button>
          </div>
        </div>

        <!-- Analysis Status -->
        <div id="analysisStatus" class="panel" style="display: none;">
          <h3><i class="fa-solid fa-info-circle"></i> Trạng thái phân tích</h3>
          <div id="statusContent" style="margin-top: 12px;">
            <!-- Status messages will appear here -->
          </div>
        </div>

        <!-- Results Section -->
        <div id="analysisResults" class="panel" style="display: none;">
          
          <!-- Participants Table -->
          <div id="participantsSection" style="margin-bottom: 32px;">
            <div id="participantsHeader" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px; cursor: pointer; padding: 12px; background: #f8fafc; border-radius: 8px; transition: all 0.2s;" 
                 onmouseover="this.style.background='#f1f5f9'" 
                 onmouseout="this.style.background='#f8fafc'">
              <h3 style="margin: 0; display: flex; align-items: center; gap: 8px;">
                <i id="participantsToggleIcon" class="fa-solid fa-chevron-right" style="font-size: 14px; color: #64748b; transition: transform 0.3s;"></i>
                <i class="fa-solid fa-users" style="color: #10b981;"></i>
                <span>Thành phần tham dự</span>
                <span id="participantsCount" style="font-size: 14px; color: #10b981; font-weight: 500; background: #dcfce7; padding: 2px 8px; border-radius: 12px;">(0)</span>
              </h3>
              <div style="font-size: 12px; color: var(--muted);">
                <i class="fa-solid fa-info-circle" style="color: #10b981;"></i>
                <span>Click để mở rộng/thu gọn</span>
              </div>
            </div>
            
            <div id="participantsTableContainer" class="table-container" style="margin-top: 16px; display: none; overflow: hidden; transition: all 0.3s ease-in-out;">
              <table class="data-table" id="participantsTable">
                <thead>
                  <tr>
                    <th style="width: 60px">STT</th>
                    <th style="width: 40%">Tên hiển thị</th>
                    <th style="width: 60%">Account ID</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- Participants will appear here -->
                </tbody>
              </table>
            </div>
          </div>

          <!-- Action Items Table -->
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;">
            <h3 style="margin: 0;"><i class="fa-solid fa-table"></i> Action Items được trích xuất</h3>
            <div style="font-size: 12px; color: var(--muted); display: flex; align-items: center; gap: 6px;">
              <i class="fa-solid fa-info-circle" style="color: #3b82f6;"></i>
              <span><strong>Tip:</strong> Nháy đúp vào cột "Nội dung" hoặc "Ghi chú" để chỉnh sửa, Click vào Assignee để chọn người</span>
            </div>
          </div>
          
          <div class="table-container" style="margin-top: 16px;">
            <table class="data-table" id="structuredAnalysisTable">
              <thead>
                <tr>
                  <th style="width: 50px">STT</th>
                  <th style="width: 40%; min-width: 300px">Nội dung <i class="fa-solid fa-hand-pointer" style="font-size: 10px; color: #3b82f6;" title="Double-click để chỉnh sửa"></i></th>
                  <th style="width: 120px">Deadline</th>
                  <th style="width: 150px">Assignee</th>
                  <th style="width: 25%; min-width: 200px">Ghi chú <i class="fa-solid fa-hand-pointer" style="font-size: 10px; color: #3b82f6;" title="Double-click để chỉnh sửa"></i></th>
                  <th style="width: 80px">Hành động</th>
                </tr>
              </thead>
              <tbody>
                <!-- Analysis results will appear here -->
              </tbody>
            </table>
          </div>

          <div class="table-actions" style="margin-top: 16px; display: flex; justify-content: center;">
            <button id="btnCreateJiraFromStructured" class="btn-nav success" style="font-size: 15px; padding: 10px 24px;">
              <i class="fa-brands fa-jira"></i>
              <span>Tạo tất cả Jira Ticket</span>
            </button>
          </div>
        </div>

        <!-- Info Section -->
        <div style="margin-top: 40px; padding: 20px; background: var(--soft); border-radius: 12px;">
          <h3 style="margin: 0 0 16px; color: var(--primary); display: flex; align-items: center; gap: 8px;">
            <i class="fa-solid fa-lightbulb"></i>
            Cách sử dụng
          </h3>
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px;">
            <div style="padding: 16px; background: white; border-radius: 8px; border-left: 4px solid #3b82f6;">
              <h4 style="margin: 0 0 8px; color: #1e40af;">� Chọn dự án</h4>
              <p style="margin: 0; color: var(--muted); font-size: 14px;">Chọn Confluence space chứa page cần phân tích</p>
            </div>
            <div style="padding: 16px; background: white; border-radius: 8px; border-left: 4px solid #10b981;">
              <h4 style="margin: 0 0 8px; color: #059669;">🎯 Nhập Page ID</h4>
              <p style="margin: 0; color: var(--muted); font-size: 14px;">Page ID có thể lấy từ URL hoặc page properties</p>
            </div>
            <div style="padding: 16px; background: white; border-radius: 8px; border-left: 4px solid #f59e0b;">
              <h4 style="margin: 0 0 8px; color: #d97706;">🚀 AI trích xuất</h4>
              <p style="margin: 0; color: var(--muted); font-size: 14px;">AI sẽ tìm và trích xuất chỉ các Action Items từ page</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <footer class="footer">© 2025 BIDV — Công cụ AI cho PMO</footer>

  <!-- Page ID Help Popup -->
  <div id="pageidHelpPopup" class="pageid-help-popup">
    <div class="pageid-help-content">
      <div class="pageid-help-header">
        <h3>
          <i class="fa-solid fa-circle-info"></i>
          Hướng dẫn lấy Page ID từ Confluence
        </h3>
        <button class="pageid-help-close" onclick="closePageIdHelp()">
          <i class="fa-solid fa-times"></i>
        </button>
      </div>
      <div class="pageid-help-body">
        <div class="help-step">
          <div class="help-step-number">1</div>
          <div class="help-step-title">Mở trang Confluence cần lấy ID</div>
          <div class="help-step-desc">
            Truy cập vào trang Confluence mà bạn muốn lấy Page ID. Đây có thể là bất kỳ trang nào trong workspace của bạn.
          </div>
        </div>

        <div class="help-step">
          <div class="help-step-number">2</div>
          <div class="help-step-title">Kiểm tra URL của trang</div>
          <div class="help-step-desc">
            Nhìn vào thanh địa chỉ (URL) trên trình duyệt. Page ID có thể xuất hiện ở một trong các định dạng sau:
          </div>
          
          <div style="margin-top: 12px;">
            <strong style="color: var(--primary); font-size: 13px;">📌 Định dạng 1: URL dạng /pages/</strong>
            <div class="help-url-example" style="margin-top: 8px;">
              https://your-domain.atlassian.net/wiki/spaces/DEMO/pages/<span class="highlight">123456789</span>/Page+Title
            </div>
          </div>

          <div style="margin-top: 16px;">
            <strong style="color: var(--primary); font-size: 13px;">📌 Định dạng 2: URL dạng viewpage.action</strong>
            <div class="help-url-example" style="margin-top: 8px;">
              https://your-domain.atlassian.net/wiki/spaces/DEMO/pages/viewpage.action?pageId=<span class="highlight">123456789</span>
            </div>
          </div>
        </div>

        <div class="help-step">
          <div class="help-step-number">3</div>
          <div class="help-step-title">Copy Page ID</div>
          <div class="help-step-desc">
            Phần số được highlight (ví dụ: <code style="color: var(--primary); font-weight: 700;">123456789</code>) chính là <strong>Page ID</strong> bạn cần. Copy số này và paste vào ô input.
          </div>
        </div>

        <div class="help-note">
          <div class="help-note-title">
            <i class="fa-solid fa-lightbulb"></i>
            Mẹo hữu ích
          </div>
          <div class="help-note-content">
            • Nếu không tìm thấy Page ID trong URL, hãy thử click vào menu <strong>⋯ (More actions)</strong> → <strong>Page Information</strong> để xem chi tiết.<br>
            • Page ID là một dãy số duy nhất, thường có 9 chữ số trở lên.<br>
            • Đảm bảo bạn có quyền truy cập vào trang Confluence đó để AI có thể phân tích.
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Jira Ticket Creation Popup -->
  <div id="jiraPopup" class="popup-overlay">
    <div class="popup-editor jira-ticket-popup">
      <div class="popup-header">
        <h3>
          <span class="jira-icon">
            <i class="fa-brands fa-jira"></i>
          </span>
          Tạo Jira Ticket
        </h3>
        <button class="popup-close" onclick="closeJiraPopup()">&times;</button>
      </div>
      
      <div class="jira-form">
        <div class="form-group">
          <label>📝 Summary *</label>
          <input type="text" id="jiraSummary" class="form-input" readonly>
        </div>
        
        <div class="form-group">
          <label>📄 Description</label>
          <textarea id="jiraDescription" class="form-textarea" rows="4" readonly></textarea>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label>📅 Due Date</label>
            <input type="date" id="jiraDueDate" class="form-input" readonly>
          </div>
          
          <div class="form-group">
            <label>🎯 Issue Type *</label>
            <select id="jiraIssueType" class="form-select">
              <option value="Task">📝 Task</option>
              <option value="Story">📚 Story</option>
              <option value="Bug">🐛 Bug</option>
              <option value="Risk">⚠️ Risk</option>
              <option value="Sub-task">🎯 Sub-task</option>
            </select>
          </div>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label>👤 Assignee</label>
            <input type="text" id="jiraAssignee" class="form-input" readonly>
          </div>
          
          <div class="form-group">
            <label>🔑 Project Key</label>
            <input type="text" id="jiraProjectKey" class="form-input" readonly>
          </div>
        </div>
        
        <div class="form-group">
          <label>🏷️ Component</label>
          <select id="jiraComponent" class="form-select">
            <option value="">-- Chọn component --</option>
          </select>
        </div>
        
        <div class="form-group">
          <label>🔗 Parent Key</label>
          <input type="text" id="jiraParentKey" class="form-input" placeholder="VD: ABC-123 (để trống nếu không có parent)">
          <small style="color: #64748b; font-size: 11px; margin-top: 3px; display: block; line-height: 1.3;">💡 Nhập key của ticket cha để tạo sub-task hoặc liên kết</small>
        </div>
      </div>
      
      <div class="popup-actions">
        <button class="popup-btn popup-btn-secondary" onclick="closeJiraPopup()">
          <i class="fa-solid fa-xmark"></i> Hủy
        </button>
        <button class="popup-btn popup-btn-accent" onclick="saveJiraConfig()">
          <i class="fa-solid fa-save"></i> Lưu tạm
        </button>
        <button class="popup-btn popup-btn-primary" onclick="createJiraTicket()">
          <i class="fa-solid fa-plus"></i> Tạo Ticket
        </button>
      </div>
    </div>
  </div>

  <!-- Success Popup for Jira Ticket -->
  <div id="jiraSuccessPopup" class="popup-overlay">
    <div class="success-popup">
      <div class="success-icon">
        <i class="fa-solid fa-check"></i>
      </div>
      
      <h3 class="success-title">Ticket đã được tạo thành công!</h3>
      <p class="success-message">Jira ticket của bạn đã được tạo và sẵn sàng để sử dụng.</p>
      
      <div class="ticket-info">
        <div class="ticket-key" id="ticketKey">-</div>
        <div class="ticket-url" id="ticketUrl">-</div>
      </div>
      
      <div class="success-actions">
        <button class="popup-btn popup-btn-secondary" onclick="copyTicketLink(this)">
          <i class="fa-solid fa-copy"></i> Copy Link
        </button>
        <button class="popup-btn popup-btn-primary" onclick="openTicketInNewTab()">
          <i class="fa-solid fa-external-link-alt"></i> Mở Ticket
        </button>
      </div>
      
      <div style="margin-top: 16px;">
        <button class="popup-btn popup-btn-secondary" onclick="closeSuccessPopup()" style="width: 100%;">
          Đóng
        </button>
      </div>
    </div>
  </div>

  <!-- Bulk Tickets Success Popup -->
  <div id="bulkTicketsSuccessPopup" class="popup-overlay">
    <div class="success-popup">
      <div class="success-icon">
        <i class="fa-solid fa-check"></i>
      </div>
      
      <h3 class="success-title">Tickets đã được tạo thành công!</h3>
      <p class="success-message" id="bulkSuccessMessage">Tất cả Jira tickets đã được tạo và sẵn sàng để sử dụng.</p>
      
      <div class="bulk-tickets-info" id="bulkTicketsInfo">
        <!-- Danh sách tickets được tạo sẽ được thêm vào đây -->
      </div>
      
      <div class="success-actions" style="margin-top: 16px;">
        <button class="popup-btn popup-btn-secondary" onclick="openAllTicketsInNewTabs()" id="openAllTicketsBtn" style="margin-right: 8px;">
          <i class="fa-solid fa-external-link-alt"></i> Mở tất cả tickets
        </button>
        <button class="popup-btn popup-btn-primary" onclick="closeBulkSuccessPopup()">
          <i class="fa-solid fa-check"></i> Hoàn tất
        </button>
      </div>
  </div>
</div>

  <!-- Structured Bulk Review Popup -->
  <div id="structuredBulkPopup" class="popup-overlay">
    <div class="popup-editor" style="max-width: 720px; max-height: 90vh; overflow-y: auto;">
      <div class="popup-header">
        <h3 class="popup-title">
          <i class="fa-brands fa-jira" style="color: #0052cc;"></i> Rà soát Jira Tickets
        </h3>
        <button class="popup-close" id="structuredBulkClose">&times;</button>
      </div>

      <div style="padding: 20px;">
        <p style="margin: 0 0 16px; color: var(--muted); font-size: 13px;">
          Kiểm tra lại nội dung trước khi tạo. Bạn có thể chọn Component và nhập Parent Key cho từng ticket.
        </p>
        <div id="structuredBulkList">
          <!-- Ticket review table will be rendered here -->
        </div>
        <div id="structuredBulkStatus" class="structured-bulk-status" style="display: none;"></div>
      </div>

      <div class="popup-actions">
        <button class="popup-btn popup-btn-secondary" id="structuredBulkCancel">Hủy</button>
        <button class="popup-btn popup-btn-primary" id="structuredBulkCreateBtn">
          <i class="fa-solid fa-rocket"></i> Tạo tickets
        </button>
      </div>
    </div>
  </div>

  <!-- Advanced Bulk Jira Ticket Creation Popup -->
  <div id="bulkJiraPopup" class="popup-overlay">
    <div class="popup-editor" style="max-width: 700px;">
      <div class="popup-header">
        <h3 class="popup-title">
          <i class="fa-brands fa-jira" style="color: #0052cc;"></i> Cấu hình tạo tất cả Jira Tickets
        </h3>
        <button class="popup-close" onclick="closeBulkJiraPopup()">&times;</button>
      </div>
      
      <div class="jira-form">
        <p style="margin-bottom: 20px; color: #666; font-size: 14px;">
          <i class="fa-solid fa-info-circle" style="color: #0052cc;"></i>
          Sẽ tạo <span id="bulkTicketCount" style="font-weight: bold; color: #0052cc;">0</span> tickets từ Action Items. 
          Cấu hình các thuộc tính chung cho tất cả tickets:
        </p>
        
        <div class="form-row">
          <div class="form-group">
            <label class="form-label">Issue Type *</label>
            <select id="bulkJiraIssueType" class="form-input">
              <option value="Task">Task</option>
              <option value="Story">Story</option>
              <option value="Bug">Bug</option>
              <option value="Risk">Risk</option>
              <option value="Epic">Epic</option>
            </select>
          </div>
          
          <div class="form-group">
            <label class="form-label">Component</label>
            <select id="bulkJiraComponent" class="form-input">
              <option value="">-- Chọn component --</option>
            </select>
          </div>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label class="form-label">Due Date chung</label>
            <input type="date" id="bulkJiraDueDate" class="form-input">
            <small style="color: #666; font-size: 12px;">Áp dụng cho tất cả tickets (có thể override từng ticket)</small>
          </div>
          
          <div class="form-group">
            <label class="form-label">Parent Key</label>
            <input type="text" id="bulkJiraParentKey" class="form-input" placeholder="VD: ABC-123">
            <small style="color: #666; font-size: 12px;">Tất cả tickets sẽ là con của ticket này</small>
          </div>
        </div>
        
        <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-top: 15px;">
          <h4 style="margin: 0 0 10px 0; color: #495057; font-size: 14px;">
            <i class="fa-solid fa-list-check"></i> Danh sách tickets sẽ tạo:
          </h4>
          <div id="bulkTicketPreview" style="max-height: 200px; overflow-y: auto;">
            <!-- Preview tickets list -->
          </div>
        </div>
      </div>
      
      <div class="popup-actions">
        <button class="popup-btn popup-btn-secondary" onclick="closeBulkJiraPopup()">Hủy</button>
        <button class="popup-btn popup-btn-primary" onclick="confirmBulkCreateJiraTickets()">
          <i class="fa-solid fa-rocket"></i> Tạo tất cả tickets
        </button>
      </div>
    </div>
  </div>

  <!-- Configuration Analysis Popup -->
  <div id="configAnalysisPopup" class="popup-overlay">
    <div class="popup-editor" style="max-width: 900px; max-height: 90vh; overflow-y: auto;">
      <div class="popup-header">
        <h3 class="popup-title">
          <i class="fa-solid fa-search-plus" style="color: #f59e0b;"></i> Phân tích cấu hình Tickets
        </h3>
        <button class="popup-close" onclick="closeConfigAnalysisPopup()">&times;</button>
      </div>
      
      <div style="padding: 24px;">
        <div id="configAnalysisContent">
          <!-- Content will be dynamically generated -->
        </div>
      </div>
      
      <div class="popup-actions">
        <button class="popup-btn popup-btn-secondary" onclick="closeConfigAnalysisPopup()">Hủy</button>
        <button class="popup-btn popup-btn-primary" onclick="proceedWithBulkCreation()">
          <i class="fa-solid fa-rocket"></i> Tiến hành tạo tickets
        </button>
      </div>
    </div>
  </div>

<script>
document.addEventListener("DOMContentLoaded", function(){
// Global error handler to prevent UI freeze
window.addEventListener('error', function(e) {
  console.error('Global error:', e.error);
  return false; // Don't prevent default error handling
});

window.addEventListener('unhandledrejection', function(e) {
  console.error('Unhandled promise rejection:', e.reason);
  return false; // Don't prevent default error handling
});

// AI Insights Tab Functionality
function initializeInsightTabs() {
  const structuredTab = document.getElementById('structuredTab');
  const conversationalTab = document.getElementById('conversationalTab');
  const structuredContent = document.getElementById('structuredInsight');
  const conversationalContent = document.getElementById('conversationalInsight');

  // Tab switching function
  function switchTab(targetTab) {
    // Remove active from all tabs and contents
    document.querySelectorAll('.insight-tab-btn').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('.insight-tab-content').forEach(content => content.classList.remove('active'));
    
    // Add active to target
    if (targetTab === 'structured') {
      structuredTab.classList.add('active');
      structuredContent.classList.add('active');
      
      // Load spaces for structured insight when tab becomes active
      setTimeout(() => {
        try {
          if (typeof loadStructuredSpaces === 'function') {
            loadStructuredSpaces();
          }
        } catch (e) {
          console.warn('loadStructuredSpaces not ready yet:', e);
        }
      }, 100);
    } else {
      conversationalTab.classList.add('active');
      conversationalContent.classList.add('active');
      
      // Re-initialize any functionality that might be needed when switching back to conversational
      setTimeout(() => {
        // Ensure buttons and functionality work after tab switch
        try {
          if (typeof extractFromTables === 'function') {
            extractFromTables();
          }
        } catch (e) {
          console.warn('extractFromTables not ready yet:', e);
        }
      }, 100);
    }
  }

  // Event listeners for tab buttons
  if (conversationalTab) {
    conversationalTab.addEventListener('click', () => {
      if (!conversationalTab.disabled) {
        switchTab('conversational');
      }
    });
  }

  if (structuredTab) {
    structuredTab.addEventListener('click', () => {
      if (!structuredTab.disabled) {
        switchTab('structured');
      }
    });
  }

  // Initialize with conversational tab active
  switchTab('conversational');
}

// Initialize tabs when DOM is ready
initializeInsightTabs();

var $=id=>document.getElementById(id);
  var drop=$('drop'), input=$('file'), bar=$('bar'), out=$('out'), log=$('log'), state=$('state');
  var btnUpload=$('btnUpload'), btnCancel=$('btnCancel'), btnCopy=$('btnCopy'), sel=$('sel'), spin=$('spin'), btnCreate=$('btnCreate');
  var modeAuto=$('modeAuto'), modeManual=$('modeManual'), pageTitleEl=$('pageTitle');

  // New elements for space, parent ID, template, and AI model
  var spaceSelect=$('spaceSelect');
  var parentIdInput=$('parentIdInput');
  var templateSelect=$('templateSelect');
  var aiModelSelect=$('aiModelSelect');

  // Step navigation variables
  var currentStep = 1;
  var totalSteps = 3;

  // Step navigation functions
  function updateStepWizard(step) {
    for (let i = 1; i <= totalSteps; i++) {
      const stepEl = $('step' + i);
      const contentEl = $('stepContent' + i);
      
      if (stepEl) {
        stepEl.classList.remove('active', 'completed');
        if (i < step) stepEl.classList.add('completed');
        else if (i === step) stepEl.classList.add('active');
      }
      
      if (contentEl) {
        contentEl.classList.remove('active');
        if (i === step) contentEl.classList.add('active');
      }
    }
    currentStep = step;
  }

  function nextStep(step) {
    if (step <= totalSteps) {
      updateStepWizard(step);
      
      // When moving to step 3, refresh PIC dropdowns with latest user data
      if (step === 3) {
        setTimeout(async () => {
          await refreshAllPicDropdowns();
        }, 100);
      }
    }
  }

  async function refreshAllPicDropdowns() {
    // Refresh all PIC dropdowns in discussion table
    const discussionTableBody = discussionTable ? discussionTable.querySelector('tbody') : null;
    if (discussionTableBody) {
      const rows = discussionTableBody.querySelectorAll('tr');
      for (const row of rows) {
        const picCell = row.cells[2]; // PIC column in discussion table
        if (picCell) {
          const currentSelect = picCell.querySelector('select');
          const currentValue = currentSelect ? currentSelect.value : '';
          
          // Recreate dropdown with updated options
          const newDropdownHtml = await createPicDropdown(currentValue);
          picCell.innerHTML = newDropdownHtml;
        }
      }
    }
    
    // Refresh all PIC dropdowns in action table with current values
    const actionTableBody = actionTable ? actionTable.querySelector('tbody') : null;
    if (!actionTableBody) return;
    
    const rows = actionTableBody.querySelectorAll('tr');
    for (const row of rows) {
      const picCell = row.cells[3]; // PIC column in action table
      if (picCell) {
        const currentSelect = picCell.querySelector('select');
        const currentValue = currentSelect ? currentSelect.value : '';
        
        // Recreate dropdown with updated options
        const newDropdownHtml = await createPicDropdown(currentValue);
        picCell.innerHTML = newDropdownHtml;
      }
    }
  }

  function prevStep(step) {
    if (step >= 1) {
      updateStepWizard(step);
    }
  }

  function completeFlow() {
    // Complete the flow - could add final validation or summary
    if (lastLLMJson) {
      alert('✅ Flow hoàn tất! Bạn có thể tạo page Confluence hoặc chỉnh sửa dữ liệu thêm.');
    } else {
      alert('⚠️ Vui lòng hoàn tất bước 2 (upload audio) trước khi kết thúc.');
    }
  }

  // Make functions global
  window.nextStep = nextStep;
  window.prevStep = prevStep;
  window.completeFlow = completeFlow;
  window.initializeInsightTabs = initializeInsightTabs;

  // Email upload elements
  var emailDrop=$('emailDrop'), emailInput=$('emailImage'), emailSel=$('emailSel');
  var emailPasteArea=$('emailPasteArea'), emailPreview=$('emailPreview');

  try{ emailPasteArea.onclick = function(){ emailInput.click(); }; }catch(_e){}
var emailImgPreview=$('emailImgPreview'), emailStatus=$('emailStatus');
  var btnRemoveImage=$('btnRemoveImage'), btnProcessImage=$('btnProcessImage');

  // OCR results elements
  var btnExtractEmails=$('btnExtractEmails'), btnGetJiraIds=$('btnGetJiraIds'), btnProcessText=$('btnProcessText');
  var ocrEmails=$('ocrEmails'), ocrJiraIds=$('ocrJiraIds'), emailTextInput=$('emailTextInput');

  // Table elements
  var discussionTable = $('discussionTable');
  var actionTable = $('actionTable');
  var addDiscussionRow = $('addDiscussionRow');
  var addActionRow = $('addActionRow');
  var createAllTickets = $('createAllTickets');

  var currentFile=null, uploadXhr=null, transcribeAbort=null, lastLLMJson=null, lastTranscriptUrl=null, lastGrokResponse=null, lastPreviewHtml=null, lastPageUrl=null;
  var emailImageKey = null; // Lưu object key trên R2
  var emailImageBlob = null; // Blob gốc của ảnh (từ paste/drag/file)
  var isUploadingEmailImage = false;
  var isEmailOcrBusy = false; // guard: tránh duplicate khi upload/OCR
  var isGettingJiraIds = false; // guard: tránh lặp khi lấy account IDs

  // Lưu cấu hình Jira ticket tạm thời
  var lastJiraConfig = {
    issueType: 'Task',
    componentId: '',
    parentKey: ''
  };

  // Header tabs
  var tabButtons = document.querySelectorAll('.tab-button');
  var tabContents = document.querySelectorAll('.tab-content');
  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      var tabId = button.getAttribute('data-tab');
      tabButtons.forEach(btn => btn.classList.remove('active'));
      tabContents.forEach(content => content.classList.remove('active'));
      button.classList.add('active');
      document.getElementById(tabId + '-tab').classList.add('active');
    });
  });

  // Toggle hiển thị ô tiêu đề
  function syncTitleInput(){
    if(modeManual.checked){
      pageTitleEl.style.display='';
      if(!pageTitleEl.value) pageTitleEl.value='BÁO CÁO TIẾN ĐỘ DỰ ÁN';
    }else{
      pageTitleEl.style.display='none';
    }
  }
  modeAuto.addEventListener('change', syncTitleInput);
  modeManual.addEventListener('change', syncTitleInput);
  syncTitleInput();

  function setState(s){ state.textContent=s; }
  function setProgress(p){ bar.style.width=(p*100).toFixed(1)+'%'; }
  function logJson(o){ log.textContent=JSON.stringify(o,null,2); }

  function updateDataDisplay(data) {
    if (!data) return;

    // Meeting note template
    if (data.discussion_topics && Array.isArray(data.discussion_topics)) {
      updateDiscussionTable(data.discussion_topics);
    }

    if (data.action_items && Array.isArray(data.action_items)) {
      updateActionTable(data.action_items);
    }

    updateJiraOptions(data);
  }

  function updateDiscussionTable(topics) {
    const tbody = discussionTable.querySelector('tbody');
    tbody.innerHTML = '';

    topics.forEach((topic, index) => {
      const row = tbody.insertRow();
      row.innerHTML = 
        '<td>' + (index + 1) + '</td>' +
        '<td class="content-cell">' +
          '<div class="table-input-container">' +
            '<textarea class="table-input" rows="3" placeholder="Nội dung thảo luận">' + escapeHtml(topic.content || '') + '</textarea>' +
            '<button class="edit-icon" title="Chỉnh sửa nội dung"><i class="fa-solid fa-edit"></i></button>' +
          '</div>' +
        '</td>' +
        '<td><input type="text" class="table-input" value="' + escapeHtml(topic.pic || '') + '" placeholder="Người phụ trách"></td>' +
        '<td>' +
          '<div class="table-input-container">' +
            '<textarea class="table-input" rows="2" placeholder="Ghi chú">' + escapeHtml(topic.note || '') + '</textarea>' +
            '<button class="edit-icon" title="Chỉnh sửa ghi chú"><i class="fa-solid fa-edit"></i></button>' +
          '</div>' +
        '</td>' +
        '<td><button class="btn-icon delete-row" title="Xóa"><i class="fa-solid fa-trash"></i></button></td>';

      // Add delete event listener
      row.querySelector('.delete-row').addEventListener('click', function() {
        tbody.removeChild(row);
        updateRowNumbers('discussionTable');
      });
    });

    // Re-add edit icon listeners for the updated rows
    window.addEditIconListeners();

    // Add at least one empty row if no data
    if (topics.length === 0) {
      const row = tbody.insertRow();
      row.innerHTML = \`
        <td>1</td>
        <td class="content-cell">
          <div class="table-input-container">
            <textarea class="table-input" rows="3" placeholder="Nội dung thảo luận"></textarea>
            <button class="edit-icon" title="Chỉnh sửa nội dung"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><input type="text" class="table-input" placeholder="Người phụ trách"></td>
        <td>
          <div class="table-input-container">
            <textarea class="table-input" rows="2" placeholder="Ghi chú"></textarea>
            <button class="edit-icon" title="Chỉnh sửa ghi chú"><i class="fa-solid fa-edit"></i></button>
          </div>
        </td>
        <td><button class="btn-icon delete-row" title="Xóa"><i class="fa-solid fa-trash"></i></button></td>
      \`;

      row.querySelector('.delete-row').addEventListener('click', function() {
        tbody.removeChild(row);
        updateRowNumbers('discussionTable');
      });

      // Add edit icon listeners for empty row
      window.addEditIconListeners();
    }
  }

  async function updateActionTable(actions) {
    const tbody = actionTable.querySelector('tbody');
    tbody.innerHTML = '';
    
    // ===== THÊM LOGIC: Thu thập tất cả accountIDs từ action_items =====
    const detectedAccountIds = new Set();
    const accountIdPattern = /([a-f0-9]{24}|[A-Za-z0-9_-]+:[a-f0-9-]{36})/;
    
    for (const action of actions) {
      if (action.pic && accountIdPattern.test(String(action.pic).trim())) {
        const accountId = String(action.pic).trim();
        detectedAccountIds.add(accountId);
        console.log('Detected accountID in action_items:', accountId);
      }
    }
    
    // Tự động cập nhật ocrJiraIds nếu phát hiện accountIDs mới
    if (detectedAccountIds.size > 0) {
      const currentJiraIds = new Set(
        ocrJiraIds.value.split(/[\s;,]+/).map(s=>s.trim()).filter(Boolean)
      );
      
      // Thêm các accountIDs mới vào danh sách
      detectedAccountIds.forEach(id => {
        if (!currentJiraIds.has(id)) {
          currentJiraIds.add(id);
          console.log('Auto-adding accountID to ocrJiraIds:', id);
        }
      });
      
      // Cập nhật ocrJiraIds
      ocrJiraIds.value = Array.from(currentJiraIds).join(';');
    }
    // ===== KẾT THÚC LOGIC THU THẬP =====

    for (let index = 0; index < actions.length; index++) {
      const action = actions[index];
      const row = tbody.insertRow();
      
      // ===== THAY ĐỔI: Xử lý PIC để hiển thị displayName =====
      // Nếu action.pic có định dạng accountID, tự động lấy displayName
      let picValue = action.pic || '';
      
      if (picValue && accountIdPattern.test(picValue)) {
        // Đây là accountID, cần lấy displayName
        console.log('Processing accountID in action.pic:', picValue);
        
        // Thử lấy từ cache trước
        let displayName = getDisplayNameFromAccountId(picValue);
        
        if (!displayName) {
          // Chưa có trong cache, fetch từ API
          console.log('Fetching displayName for accountID:', picValue);
          const userInfo = await getUserInfoFromAccountId(picValue);
          if (userInfo && userInfo.displayName) {
            displayName = userInfo.displayName;
            console.log('Fetched displayName:', displayName);
          }
        }
        
        // Nếu đã có displayName, sử dụng nó để hiển thị
        if (displayName) {
          picValue = displayName;
          console.log('Using displayName for dropdown:', displayName);
        }
      }
      // ===== KẾT THÚC THAY ĐỔI =====
      
      // Create PIC dropdown với giá trị đã xử lý
      const picDropdownHtml = await createPicDropdown(picValue);
      
      row.innerHTML = 
        '<td>' + (index + 1) + '</td>' +
        '<td class="content-cell">' +
          '<div class="table-input-container">' +
            '<textarea class="table-input" rows="3" placeholder="Hành động cần thực hiện">' + escapeHtml(action.content || '') + '</textarea>' +
            '<button class="edit-icon" title="Chỉnh sửa nội dung"><i class="fa-solid fa-edit"></i></button>' +
          '</div>' +
        '</td>' +
        '<td><input type="date" class="table-input" value="' + escapeHtml(action.deadline || '') + '"></td>' +
        '<td>' + picDropdownHtml + '</td>' +
        '<td>' +
          '<div class="table-input-container">' +
            '<textarea class="table-input" rows="2" placeholder="Ghi chú">' + escapeHtml(action.note || '') + '</textarea>' +
            '<button class="edit-icon" title="Chỉnh sửa ghi chú"><i class="fa-solid fa-edit"></i></button>' +
          '</div>' +
        '</td>' +
        '<td>' +
          '<div class="action-buttons">' +
            '<button class="btn-icon create-jira-ticket" title="Tạo Jira ticket"><i class="fa-brands fa-jira"></i></button>' +
            '<button class="btn-icon delete-row" title="Xóa"><i class="fa-solid fa-trash"></i></button>' +
          '</div>' +
        '</td>';

      // Add delete event listener
      row.querySelector('.delete-row').addEventListener('click', function() {
        tbody.removeChild(row);
        updateRowNumbers('actionTable');
      });

      // Add Jira ticket event listener
      const jiraBtn = row.querySelector('.create-jira-ticket');
      if (jiraBtn) {
        jiraBtn.addEventListener('click', async function() {
          try {
            await openJiraPopup(row);
          } catch (error) {
            console.error('Error opening Jira popup:', error);
            alert('Lỗi mở popup tạo ticket. Vui lòng thử lại!');
          }
        });
      }
    }

    // Re-add edit icon listeners for the updated rows
    window.addEditIconListeners();

    // Add at least one empty row if no data
    if (actions.length === 0) {
      const row = tbody.insertRow();
      const emptyPicDropdownHtml = await createPicDropdown('');
      
      row.innerHTML = 
        '<td>1</td>' +
        '<td class="content-cell">' +
          '<div class="table-input-container">' +
            '<textarea class="table-input" rows="3" placeholder="Hành động cần thực hiện"></textarea>' +
            '<button class="edit-icon" title="Chỉnh sửa nội dung"><i class="fa-solid fa-edit"></i></button>' +
          '</div>' +
        '</td>' +
        '<td><input type="date" class="table-input"></td>' +
        '<td>' + emptyPicDropdownHtml + '</td>' +
        '<td>' +
          '<div class="table-input-container">' +
            '<textarea class="table-input" rows="2" placeholder="Ghi chú"></textarea>' +
            '<button class="edit-icon" title="Chỉnh sửa ghi chú"><i class="fa-solid fa-edit"></i></button>' +
          '</div>' +
        '</td>' +
        '<td>' +
          '<div class="action-buttons">' +
            '<button class="btn-icon create-jira-ticket" title="Tạo Jira ticket"><i class="fa-brands fa-jira"></i></button>' +
            '<button class="btn-icon delete-row" title="Xóa"><i class="fa-solid fa-trash"></i></button>' +
          '</div>' +
        '</td>';

      row.querySelector('.delete-row').addEventListener('click', function() {
        tbody.removeChild(row);
        updateRowNumbers('actionTable');
      });

      // Add Jira ticket event listener for empty row
      const jiraBtn = row.querySelector('.create-jira-ticket');
      if (jiraBtn) {
        jiraBtn.addEventListener('click', async function() {
          try {
            await openJiraPopup(row);
          } catch (error) {
            console.error('Error opening Jira popup:', error);
            alert('Lỗi mở popup tạo ticket. Vui lòng thử lại!');
          }
        });
      }

      // Add edit icon listeners for empty row
      window.addEditIconListeners();
    }
  }

  function updateJiraOptions(data) {
    // Simplified - no longer needed for Jira tickets
    // Keep for potential future features
    return;
  }

  // PIC Dropdown Functions
  let cachedUserData = new Map(); // Cache user data to avoid duplicate API calls

  async function getUserInfoFromAccountId(accountId) {
    if (cachedUserData.has(accountId)) {
      return cachedUserData.get(accountId);
    }

    try {
      const response = await fetch('/jira-get-user-info', {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ accountId })
      });

      if (!response.ok) {
        throw new Error('HTTP ' + response.status);
      }

      const result = await response.json();
      if (result.ok) {
        cachedUserData.set(accountId, result);
        return result;
      } else {
        throw new Error(result.error || 'Unknown error');
      }
    } catch (error) {
      console.error('Error getting user info:', error);
      return null;
    }
  }

  // Find accountId by displayName from cached user data
  function findAccountIdByDisplayName(displayName) {
    if (!displayName || !displayName.trim()) return null;
    
    const searchName = displayName.trim().toLowerCase();
    
    // Search in cached user data
    for (const [accountId, userInfo] of cachedUserData.entries()) {
      if (userInfo && userInfo.displayName) {
        if (userInfo.displayName.toLowerCase() === searchName) {
          console.log('Found accountId for', displayName, ':', accountId);
          return accountId;
        }
      }
    }
    
    console.warn('No accountId found for displayName:', displayName);
    return null;
  }

  // Find displayName by accountId from cached user data
  function getDisplayNameFromAccountId(accountId) {
    if (!accountId || !accountId.trim()) return null;
    
    const searchId = accountId.trim();
    
    // Search in cached user data
    if (cachedUserData.has(searchId)) {
      const userInfo = cachedUserData.get(searchId);
      if (userInfo && userInfo.displayName) {
        console.log('Found displayName for accountId', searchId, ':', userInfo.displayName);
        return userInfo.displayName;
      }
    }
    
    console.warn('No displayName found for accountId:', searchId);
    return null;
  }

  async function createPicDropdown(currentValue = '') {
    const jiraIdsText = ocrJiraIds.value.trim();
    const options = [];
    
    // Parse Jira IDs to extract accountIds - sử dụng dấu ; làm separator
    if (jiraIdsText) {
      const accountIds = jiraIdsText.split(/[\s;,]+/).map(s=>s.trim()).filter(Boolean);
      console.log('Found account IDs for dropdown:', accountIds);
      
      for (const accountId of accountIds) {
        // Kiểm tra format accountId hợp lệ
        if (accountId.match(/([a-f0-9]{24}|[A-Za-z0-9_-]+:[a-f0-9-]{36})/)) {
          const userInfo = await getUserInfoFromAccountId(accountId);
          if (userInfo && userInfo.displayName) {
            options.push({
              value: accountId,
              text: userInfo.displayName,
              email: userInfo.emailAddress
            });
            console.log('Added PIC option:', userInfo.displayName, '('+accountId+')');
          } else {
            console.warn('Could not get user info for accountID:', accountId);
          }
        }
      }
    }
    
    console.log('Total PIC options created:', options.length);

    // Create dropdown HTML
    let dropdownHtml = '<select class="table-input pic-dropdown">';
    dropdownHtml += '<option value="">-- Chọn người phụ trách --</option>';
    
    for (const option of options) {
      // So sánh cả accountID (value) và displayName (text)
      const selected = (currentValue === option.value || currentValue === option.text) ? 'selected' : '';
      dropdownHtml += '<option value="' + escapeHtml(option.value) + '" title="' + escapeHtml(option.email) + '" ' + selected + '>' + escapeHtml(option.text) + '</option>';
      
      if (selected) {
        console.log('Selected PIC option:', option.text, '(matched with currentValue:', currentValue + ')');
      }
    }
    
    dropdownHtml += '</select>';
    
    return dropdownHtml;
  }

  // Jira Ticket Functions
  let currentJiraRow = null;

  async function openJiraPopup(row) {
    if (!row || !row.cells) {
      alert('Lỗi: Hàng không hợp lệ!');
      return;
    }
    
    currentJiraRow = row;
    const cells = row.cells;
    
    // Get values from table row
    const summary = getInputValue(cells[1]); // Nội dung
    const dueDate = getInputValue(cells[2]); // Deadline
    const picSelect = cells[3].querySelector('select'); // PIC dropdown
    const picValue = picSelect ? picSelect.value : '';
    const picText = picSelect ? picSelect.options[picSelect.selectedIndex].text : '';
    const description = getInputValue(cells[4]); // Ghi chú
    
    // Get project key from step 1 (space select)
    const spaceSelect = document.getElementById('spaceSelect');
    const projectKey = spaceSelect ? spaceSelect.value : 'AIG';
    
    // Populate form
    document.getElementById('jiraSummary').value = summary || 'New Task';
    document.getElementById('jiraDescription').value = description || '';
    document.getElementById('jiraDueDate').value = dueDate || '';
    document.getElementById('jiraAssignee').value = picText || 'Chưa chọn PIC';
    document.getElementById('jiraProjectKey').value = projectKey;
    document.getElementById('jiraParentKey').value = ''; // Reset parent key
    
    // Store PIC accountId for later use
    if (currentJiraRow) {
      currentJiraRow.dataset.picAccountId = picValue;
    }
    
    // Load and populate components dropdown
    try {
      await loadComponentsDropdown(projectKey);
    } catch (error) {
      console.error('Error loading components in popup:', error);
      // Don't block the popup from showing if components fail to load
    }
    
    // Show popup
    document.getElementById('jiraPopup').style.display = 'flex';
  }

  function closeJiraPopup() {
    document.getElementById('jiraPopup').style.display = 'none';
    currentJiraRow = null;
    structuredCurrentTicketIndex = null;
    structuredTicketButton = null;
  }

  function saveJiraConfig() {
    if (!currentJiraRow) return;
    
    const issueType = document.getElementById('jiraIssueType').value;
    const componentId = document.getElementById('jiraComponent').value;
    const parentKey = document.getElementById('jiraParentKey').value.trim();
    
    // Lấy tên component từ dropdown
    const componentSelect = document.getElementById('jiraComponent');
    const componentName = componentSelect.options[componentSelect.selectedIndex]?.text || '';
    
    // Lấy tên issue type từ dropdown
    const issueTypeSelect = document.getElementById('jiraIssueType');
    const issueTypeName = issueTypeSelect.options[issueTypeSelect.selectedIndex]?.text || '';
    
    // Cập nhật dữ liệu vào row
    const cells = currentJiraRow.cells;
    if (cells.length >= 8) {
      // Issue Type column (index 4)
      cells[4].textContent = issueTypeName;
      cells[4].setAttribute('data-issue-type-id', issueType);
      
      // Component column (index 5) 
      cells[5].textContent = componentName;
      cells[5].setAttribute('data-component-id', componentId);
      
      // Parent Key - lưu vào data attribute của row
      currentJiraRow.setAttribute('data-parent-key', parentKey);
      
      // Hiển thị thông báo thành công
      showNotification('Đã lưu cấu hình tạm thời', 'success');
    }
    
    closeJiraPopup();
  }

  async function loadComponentsDropdown(projectKey) {
    const componentSelect = document.getElementById('jiraComponent');
    if (!componentSelect || !projectKey) return;

    try {
      // Reset dropdown
      componentSelect.innerHTML = '<option value="">-- Đang tải components... --</option>';
      componentSelect.disabled = true;

      const response = await fetch('/jira-get-components', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ projectKey: projectKey })
      });

      if (!response.ok) {
        throw new Error('HTTP ' + response.status);
      }

      const result = await response.json();

      if (result.ok && result.components) {
        // Clear loading option
        componentSelect.innerHTML = '<option value="">-- Chọn component --</option>';
        
        // Add components to dropdown
        result.components.forEach(component => {
          const option = document.createElement('option');
          option.value = component.id;
          option.textContent = component.name;
          if (component.description) {
            option.title = component.description;
          }
          componentSelect.appendChild(option);
        });
        
        componentSelect.disabled = false;
      } else {
        throw new Error(result.error || 'Failed to load components');
      }

    } catch (error) {
      console.error('Error loading components:', error);
      componentSelect.innerHTML = '<option value="">-- Lỗi tải components --</option>';
      componentSelect.disabled = false;
    }
  }

  function getInputValue(cell) {
    if (!cell) return '';
    
    const input = cell.querySelector('input, textarea');
    if (input) {
      return input.value.trim();
    }
    
    return cell.textContent.trim();
  }

  async function createJiraTicket() {
    // Detect if this is a structured insight ticket or regular ticket
    const isStructuredTicket = structuredCurrentTicketIndex !== null;
    
    if (!isStructuredTicket && !currentJiraRow) {
      alert('Lỗi hệ thống: Không xác định được nguồn ticket!');
      return;
    }
    
    const summary = document.getElementById('jiraSummary').value;
    const description = document.getElementById('jiraDescription').value;
    const dueDate = document.getElementById('jiraDueDate').value;
    const issueType = document.getElementById('jiraIssueType').value;
    const projectKey = document.getElementById('jiraProjectKey').value;
    const componentId = document.getElementById('jiraComponent').value;
    const parentKey = document.getElementById('jiraParentKey').value.trim();
    
    // Lưu cấu hình để sử dụng cho bulk creation
    lastJiraConfig = {
      issueType: issueType,
      componentId: componentId,
      parentKey: parentKey
    };
    
    if (!summary || !projectKey) {
      alert('Vui lòng điền đầy đủ thông tin bắt buộc (Summary, Project Key)');
      return;
    }
    
    // Confirm creation
    const confirmed = confirm('Bạn có chắc chắn muốn tạo ' + issueType + ' ticket với tiêu đề: "' + summary + '"?');
    if (!confirmed) return;
    
    try {
      // Get PIC accountId from stored data
      let picAccountId = null;
      
      if (isStructuredTicket) {
        // For structured tickets, use the stored assigneeAccountId
        if (structuredAnalysisData && structuredAnalysisData[structuredCurrentTicketIndex]) {
          const item = structuredAnalysisData[structuredCurrentTicketIndex];
          
          // Use the pre-processed assigneeAccountId from displayAnalysisResults
          if (item.assigneeAccountId) {
            picAccountId = item.assigneeAccountId;
            console.log('Structured ticket - Using assigneeAccountId:', picAccountId);
          } else {
            console.log('Structured ticket - No assignee accountId available');
          }
        }
      } else {
        // For regular tickets, get from row data
        if (currentJiraRow && currentJiraRow.dataset.picAccountId) {
          picAccountId = currentJiraRow.dataset.picAccountId;
        }
      }
      
      // Prepare request body according to Jira API v3
      const requestBody = {
        fields: {
          project: {
            key: projectKey
          },
          summary: summary,
          description: {
            type: 'doc',
            version: 1,
            content: [
              {
                type: 'paragraph',
                content: [
                  {
                    type: 'text',
                    text: description || summary
                  }
                ]
              }
            ]
          },
          issuetype: {
            name: issueType
          }
        }
      };
      
      // Add assignee from PIC if provided
      if (picAccountId) {
        requestBody.fields.assignee = { accountId: picAccountId };
      }
      
      // Add due date if provided
      if (dueDate) {
        requestBody.fields.duedate = dueDate;
      }
      
      // Add component if provided
      if (componentId) {
        requestBody.fields.components = [{ id: componentId }];
      }
      
      // Add Start Date custom field (customFieldId=10035) with today's date
      const today = new Date().toISOString().split('T')[0]; // Format: YYYY-MM-DD
      requestBody.fields['customfield_10035'] = today;
      
      // Add parent key if provided
      if (parentKey) {
        requestBody.parentKey = parentKey;
      }
      
      // Send to server
      const response = await fetch('/create-jira-ticket', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });
      
      const result = await response.json();
      
      if (response.ok && result.success) {
        // Update button state if it's a structured ticket
        if (isStructuredTicket && structuredTicketButton) {
          structuredTicketButton.innerHTML = '<i class="fas fa-check"></i>';
          structuredTicketButton.style.background = '#22c55e';
          structuredTicketButton.disabled = true;
        }
        
        // Show success popup
        showSuccessPopup(result.key, result.self);
        closeJiraPopup();
        
        // Reset structured ticket context
        structuredCurrentTicketIndex = null;
        structuredTicketButton = null;
      } else {
        throw new Error(result.error || 'Unknown error');
      }
      
    } catch (error) {
      console.error('Error creating Jira ticket:', error);
      alert('❌ Lỗi tạo ticket: ' + error.message);
    }
  }

  // Success popup functions
  let currentTicketUrl = '';

  function showSuccessPopup(ticketKey, ticketSelf) {
    // Construct the browse URL from self URL
    // self URL format: https://domain.atlassian.net/rest/api/3/issue/12345
    // browse URL format: https://domain.atlassian.net/browse/TICKET-KEY
    const baseUrl = ticketSelf.split('/rest/api/')[0];
    const browseUrl = baseUrl + '/browse/' + ticketKey;
    
    currentTicketUrl = browseUrl;
    
    document.getElementById('ticketKey').textContent = ticketKey;
    document.getElementById('ticketUrl').textContent = browseUrl;
    document.getElementById('jiraSuccessPopup').style.display = 'flex';
  }

  function closeSuccessPopup() {
    document.getElementById('jiraSuccessPopup').style.display = 'none';
    currentTicketUrl = '';
  }

  // Tạo URL Jira ticket từ ticket key
  function getJiraTicketUrl(ticketKey) {
    try {
      // Sử dụng ATLASSIAN_BASE để tạo URL browse
      // ATLASSIAN_BASE có thể là https://domain.atlassian.net hoặc https://domain.atlassian.net/wiki
      // Chúng ta cần lấy base domain và thêm /browse/TICKET-KEY
      const spaceSelect = document.getElementById('spaceSelect');
      const atlassianBase = spaceSelect ? spaceSelect.getAttribute('data-atlassian-base') : '';
      
      if (atlassianBase) {
        const baseUrl = atlassianBase.replace('/wiki', ''); // Remove /wiki if exists
        return baseUrl + '/browse/' + ticketKey;
      }
      
      // Fallback: try to get from any existing Jira URL in the page
      const existingLinks = document.querySelectorAll('a[href*="atlassian.net"]');
      if (existingLinks.length > 0) {
        const sampleUrl = existingLinks[0].href;
        const baseUrl = sampleUrl.split('/browse/')[0].split('/rest/')[0];
        return baseUrl + '/browse/' + ticketKey;
      }
      
      // Final fallback: construct generic URL
      return 'https://bidv-vn.atlassian.net/browse/' + ticketKey;
    } catch (error) {
      console.error('Error generating Jira ticket URL:', error);
      // Final fallback
      return 'https://bidv-vn.atlassian.net/browse/' + ticketKey;
    }
  }

  // Bulk tickets success popup functions
  let currentBulkSuccessTickets = []; // Lưu trữ danh sách tickets thành công để mở sau

  function showBulkSuccessPopup(successCount, totalCount, successTickets, errors) {
    // Lưu danh sách tickets thành công
    currentBulkSuccessTickets = successTickets.slice(); // Copy array
    
    const popup = document.getElementById('bulkTicketsSuccessPopup');
    const messageEl = document.getElementById('bulkSuccessMessage');
    const infoEl = document.getElementById('bulkTicketsInfo');
    
    // Update message
    if (successCount === totalCount) {
      messageEl.textContent = 'Tất cả ' + totalCount + ' tickets đã được tạo thành công!';
    } else {
      messageEl.textContent = 'Đã tạo thành công ' + successCount + '/' + totalCount + ' tickets.';
    }
    
    // Show/hide "Mở tất cả tickets" button based on success count
    const openAllBtn = document.getElementById('openAllTicketsBtn');
    if (openAllBtn) {
      openAllBtn.style.display = successCount > 0 ? 'inline-block' : 'none';
    }
    
    // Update message
    if (successCount === totalCount) {
      messageEl.textContent = 'Tất cả ' + totalCount + ' tickets đã được tạo thành công!';
    } else {
      messageEl.textContent = 'Đã tạo thành công ' + successCount + '/' + totalCount + ' tickets.';
    }
    
    // Build tickets info HTML
    let infoHTML = '';
    
    // Show successful tickets
    successTickets.forEach(ticket => {
      // Tạo URL đến ticket Jira
      const ticketUrl = getJiraTicketUrl(ticket.key);
      
      infoHTML += '<div class="bulk-ticket-item">' +
        '<div class="bulk-ticket-key">' +
          '<a href="' + ticketUrl + '" target="_blank" style="color: #0052cc; text-decoration: none; font-weight: bold;">' + 
          ticket.key + ' <i class="fa-solid fa-external-link-alt" style="font-size: 10px; margin-left: 4px;"></i></a>' +
        '</div>' +
        '<div class="bulk-ticket-summary">' + ticket.summary + '</div>' +
        '<div class="bulk-ticket-status bulk-ticket-success">Thành công</div>' +
        '</div>';
    });
    
    // Show failed tickets
    errors.forEach(error => {
      const ticketName = error.includes(':') ? error.split(':')[0] : 'Ticket';
      const errorMessage = error.includes(':') ? error.split(':')[1].trim() : error;
      infoHTML += '<div class="bulk-ticket-item">' +
        '<div class="bulk-ticket-key">❌</div>' +
        '<div class="bulk-ticket-summary">' + ticketName + '</div>' +
        '<div class="bulk-ticket-status bulk-ticket-error" title="' + errorMessage + '">Lỗi</div>' +
        '</div>';
    });
    
    infoEl.innerHTML = infoHTML;
    popup.style.display = 'flex';
  }

  function closeBulkSuccessPopup() {
    document.getElementById('bulkTicketsSuccessPopup').style.display = 'none';
    currentBulkSuccessTickets = []; // Clear stored tickets
  }

  function openAllTicketsInNewTabs() {
    try {
      if (currentBulkSuccessTickets.length === 0) {
        alert('Không có tickets nào để mở!');
        return;
      }
      
      if (currentBulkSuccessTickets.length > 10) {
        if (!confirm('Bạn có chắc muốn mở ' + currentBulkSuccessTickets.length + ' tabs không? Điều này có thể làm chậm trình duyệt.')) {
          return;
        }
      }
      
      // Mở từng ticket trong tab mới với delay nhỏ để tránh popup blocker
      currentBulkSuccessTickets.forEach((ticket, index) => {
        setTimeout(() => {
          try {
            const ticketUrl = getJiraTicketUrl(ticket.key);
            window.open(ticketUrl, '_blank');
          } catch (error) {
            console.error('Error opening ticket ' + ticket.key + ':', error);
          }
        }, index * 200); // 200ms delay between each tab
      });
    } catch (error) {
      console.error('Error in openAllTicketsInNewTabs:', error);
      alert('Có lỗi xảy ra khi mở tickets. Vui lòng thử lại.');
    }
  }

  function copyTicketLink(buttonElement) {
    if (currentTicketUrl) {
      navigator.clipboard.writeText(currentTicketUrl).then(() => {
        // Change button text temporarily
        const originalText = buttonElement.innerHTML;
        buttonElement.innerHTML = '<i class="fa-solid fa-check"></i> Đã copy!';
        setTimeout(() => {
          buttonElement.innerHTML = originalText;
        }, 2000);
      }).catch(err => {
        console.error('Failed to copy: ', err);
        alert('Không thể copy link. URL: ' + currentTicketUrl);
      });
    } else {
      alert('Không có link để copy!');
    }
  }

  function openTicketInNewTab() {
    if (currentTicketUrl) {
      window.open(currentTicketUrl, '_blank');
    }
  }

  // Save Jira configuration to session
  function saveJiraConfig() {
    if (!currentJiraRow) {
      alert('Lỗi: Không xác định được action item để lưu cấu hình!');
      return;
    }
    
    const issueType = document.getElementById('jiraIssueType').value;
    const componentId = document.getElementById('jiraComponent').value;
    const parentKey = document.getElementById('jiraParentKey').value.trim();
    
    // Store configuration in row's data attributes
    const config = {
      issueType: issueType,
      componentId: componentId,
      parentKey: parentKey,
      timestamp: Date.now()
    };
    
    // Save to row data attribute
    currentJiraRow.setAttribute('data-jira-config', JSON.stringify(config));
    
    // Also save as global config for fallback (most recent)
    sessionStorage.setItem('jiraConfig', JSON.stringify(config));
    
    // Show success message
    showTempSaveNotification();
  }
  
  // Show temporary save notification
  function showTempSaveNotification() {
    // Create notification element
    const notification = document.createElement('div');
    notification.style.position = 'fixed';
    notification.style.top = '20px';
    notification.style.right = '20px';
    notification.style.background = '#10b981';
    notification.style.color = 'white';
    notification.style.padding = '12px 20px';
    notification.style.borderRadius = '8px';
    notification.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
    notification.style.zIndex = '10001';
    notification.style.fontSize = '14px';
    notification.style.fontWeight = '500';
    notification.style.display = 'flex';
    notification.style.alignItems = 'center';
    notification.style.gap = '8px';
    notification.style.transform = 'translateX(100%)';
    notification.style.transition = 'transform 0.3s ease';
    
    notification.innerHTML = '<i class="fa-solid fa-check-circle"></i> Đã lưu tạm cấu hình thành công!';
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
      notification.style.transform = 'translateX(0)';
    }, 100);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
      notification.style.transform = 'translateX(100%)';
      setTimeout(() => {
        if (notification.parentNode) {
          document.body.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }

  // Make functions global
  window.openJiraPopup = openJiraPopup;
  window.closeJiraPopup = closeJiraPopup;
  window.createJiraTicket = createJiraTicket;
  window.saveJiraConfig = saveJiraConfig;
  window.showSuccessPopup = showSuccessPopup;
  window.closeSuccessPopup = closeSuccessPopup;
  window.copyTicketLink = copyTicketLink;
  window.openTicketInNewTab = openTicketInNewTab;
  window.closeBulkJiraPopup = closeBulkJiraPopup;
  window.confirmBulkCreateJiraTickets = confirmBulkCreateJiraTickets;
  window.closeConfigAnalysisPopup = closeConfigAnalysisPopup;
  window.proceedWithBulkCreation = proceedWithBulkCreation;
  window.showBulkSuccessPopup = showBulkSuccessPopup;
  window.closeBulkSuccessPopup = closeBulkSuccessPopup;
  window.openAllTicketsInNewTabs = openAllTicketsInNewTabs;







  function escapeHtml(text) {
    const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
    return String(text).replace(/[&<>"']/g, m => map[m]);
  }

  // Table functions
  async function addTableRow(tableId) {
    const table = document.getElementById(tableId);
    const tbody = table.querySelector('tbody');
    const rowCount = tbody.rows.length;
    const newRow = tbody.insertRow();

    if (tableId === 'discussionTable') {
      // Create PIC dropdown for discussion table
      const picDropdownHtml = await createPicDropdown('');
      
      newRow.innerHTML = 
        '<td>' + (rowCount + 1) + '</td>' +
        '<td class="content-cell">' +
          '<div class="table-input-container">' +
            '<textarea class="table-input" placeholder="Nội dung thảo luận" rows="3"></textarea>' +
            '<button class="edit-icon" title="Chỉnh sửa nội dung"><i class="fa-solid fa-edit"></i></button>' +
          '</div>' +
        '</td>' +
        '<td>' + picDropdownHtml + '</td>' +
        '<td>' +
          '<div class="table-input-container">' +
            '<textarea class="table-input" placeholder="Ghi chú" rows="2"></textarea>' +
            '<button class="edit-icon" title="Chỉnh sửa ghi chú"><i class="fa-solid fa-edit"></i></button>' +
          '</div>' +
        '</td>' +
        '<td><button class="btn-icon delete-row" title="Xóa"><i class="fa-solid fa-trash"></i></button></td>';
    } else if (tableId === 'actionTable') {
      // Create PIC dropdown for new row
      const picDropdownHtml = await createPicDropdown('');
      
      newRow.innerHTML = 
        '<td>' + (rowCount + 1) + '</td>' +
        '<td class="content-cell">' +
          '<div class="table-input-container">' +
            '<textarea class="table-input" placeholder="Hành động cần thực hiện" rows="3"></textarea>' +
            '<button class="edit-icon" title="Chỉnh sửa nội dung"><i class="fa-solid fa-edit"></i></button>' +
          '</div>' +
        '</td>' +
        '<td><input type="date" class="table-input"></td>' +
        '<td>' + picDropdownHtml + '</td>' +
        '<td>' +
          '<div class="table-input-container">' +
            '<textarea class="table-input" placeholder="Ghi chú" rows="2"></textarea>' +
            '<button class="edit-icon" title="Chỉnh sửa ghi chú"><i class="fa-solid fa-edit"></i></button>' +
          '</div>' +
        '</td>' +
        '<td>' +
          '<div class="action-buttons">' +
            '<button class="btn-icon create-jira-ticket" title="Tạo Jira ticket"><i class="fa-brands fa-jira"></i></button>' +
            '<button class="btn-icon delete-row" title="Xóa"><i class="fa-solid fa-trash"></i></button>' +
          '</div>' +
        '</td>';
    }

    // Add delete event listener
    newRow.querySelector('.delete-row').addEventListener('click', function() {
      tbody.removeChild(newRow);
      updateRowNumbers(tableId);
    });

    // Add Jira ticket listener for action table
    if (tableId === 'actionTable') {
      const jiraBtn = newRow.querySelector('.create-jira-ticket');
      if (jiraBtn) {
        jiraBtn.addEventListener('click', async function() {
          try {
            await openJiraPopup(newRow);
          } catch (error) {
            console.error('Error opening Jira popup:', error);
            alert('Lỗi mở popup tạo ticket. Vui lòng thử lại!');
          }
        });
      }
    }
  }

  function updateRowNumbers(tableId) {
    const table = document.getElementById(tableId);
    const rows = table.querySelectorAll('tbody tr');
    rows.forEach((row, index) => {
      row.cells[0].textContent = index + 1;
    });
  }

  async function createAllJiraTickets() {
    if (!actionTable) {
      alert('Lỗi: Không tìm thấy bảng action items!');
      return;
    }
    
    const tbody = actionTable.querySelector('tbody');
    if (!tbody) {
      alert('Lỗi: Không tìm thấy nội dung bảng action items!');
      return;
    }
    
    const rows = Array.from(tbody.rows);
    
    if (rows.length === 0) {
      alert('Không có action items nào để tạo ticket!');
      return;
    }

    // Collect valid tickets and build preview
    const validTickets = [];
    for (const row of rows) {
      const cells = row.cells;
      const content = cells[1].querySelector('textarea').value.trim();
      const deadline = cells[2].querySelector('input').value.trim();
      const picSelect = cells[3].querySelector('select');
      const picText = picSelect ? (picSelect.selectedOptions[0]?.text || 'Không giao').trim() : 'Không giao';
      
      if (content) {
        validTickets.push({
          content: content,
          deadline: deadline,
          pic: picText
        });
      }
    }

    if (validTickets.length === 0) {
      alert('Không có action items hợp lệ nào (cần có nội dung) để tạo ticket!');
      return;
    }

    // Update ticket count
    document.getElementById('bulkTicketCount').textContent = validTickets.length;
    
    // Build preview HTML
    let previewHTML = '';
    validTickets.forEach((ticket, index) => {
      const ticketHtml = '<div style="display: flex; align-items: center; padding: 8px; border-bottom: 1px solid #e9ecef; font-size: 13px;">' +
        '<span style="background: #0052cc; color: white; width: 20px; height: 20px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 10px; margin-right: 10px;">' + (index + 1) + '</span>' +
        '<div style="flex: 1;">' +
          '<div style="font-weight: 600; margin-bottom: 2px;">' + ticket.content + '</div>' +
          '<div style="color: #6c757d; font-size: 11px;">' +
            (ticket.deadline ? '📅 ' + ticket.deadline : '📅 Không có deadline') + ' • ' +
            (ticket.pic ? '👤 ' + ticket.pic : '👤 Chưa giao') +
          '</div>' +
        '</div>' +
      '</div>';
      previewHTML += ticketHtml;
    });
    document.getElementById('bulkTicketPreview').innerHTML = previewHTML;
    
    // Load components for bulk creation
    const spaceSelect = document.getElementById('spaceSelect');
    const projectKey = spaceSelect ? spaceSelect.value : 'AIG';
    try {
      await loadBulkComponentsDropdown(projectKey);
    } catch (error) {
      console.error('Error loading bulk components:', error);
      // Don't block the popup from showing if components fail to load
    }
    
    // Analyze configurations first
    const analysis = analyzeTicketConfigurations();
    
    if (!analysis) {
      alert('Lỗi: Không thể phân tích cấu hình tickets!');
      return;
    }
    
    currentTicketAnalysis = analysis;
    
    // Generate and show analysis content
    const analysisContent = generateConfigAnalysisContent(analysis);
    document.getElementById('configAnalysisContent').innerHTML = analysisContent;
    document.getElementById('configAnalysisPopup').style.display = 'flex';
    
    // Load components cho các dropdown sau khi hiển thị popup
    setTimeout(async () => {
      const spaceSelect = document.getElementById('spaceSelect');
      const projectKey = spaceSelect ? spaceSelect.value : 'AIG';
      await loadComponentsForAnalysisPopup(projectKey, analysis.tickets);
    }, 100);
  }

  async function loadBulkComponentsDropdown(projectKey) {
    const componentSelect = document.getElementById('bulkJiraComponent');
    if (!componentSelect || !projectKey) return;

    try {
      // Reset dropdown
      componentSelect.innerHTML = '<option value="">-- Đang tải components... --</option>';
      componentSelect.disabled = true;

      const response = await fetch('/jira-get-components', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ projectKey: projectKey })
      });

      if (!response.ok) {
        throw new Error('HTTP ' + response.status);
      }

      const result = await response.json();

      if (result.ok && result.components) {
        // Clear loading option
        componentSelect.innerHTML = '<option value="">-- Chọn component --</option>';
        
        // Add components to dropdown
        result.components.forEach(component => {
          const option = document.createElement('option');
          option.value = component.id;
          option.textContent = component.name;
          if (component.description) {
            option.title = component.description;
          }
          componentSelect.appendChild(option);
        });
        
        componentSelect.disabled = false;
      } else {
        throw new Error(result.error || 'Failed to load components');
      }

    } catch (error) {
      console.error('Error loading bulk components:', error);
      componentSelect.innerHTML = '<option value="">-- Lỗi tải components --</option>';
      componentSelect.disabled = false;
    }
  }

  function closeBulkJiraPopup() {
    document.getElementById('bulkJiraPopup').style.display = 'none';
  }

  function closeConfigAnalysisPopup() {
    document.getElementById('configAnalysisPopup').style.display = 'none';
  }

  // Helper function to get component name from ID
  function getComponentNameById(componentId) {
    if (!componentId) return null;
    
    // Try to get from individual popup dropdown first
    const componentSelect = document.getElementById('jiraComponent');
    if (componentSelect) {
      for (let i = 0; i < componentSelect.options.length; i++) {
        const option = componentSelect.options[i];
        if (option.value === componentId) {
          return option.textContent;
        }
      }
    }
    
    // Try to get from bulk popup dropdown
    const bulkComponentSelect = document.getElementById('bulkJiraComponent');
    if (bulkComponentSelect) {
      for (let i = 0; i < bulkComponentSelect.options.length; i++) {
        const option = bulkComponentSelect.options[i];
        if (option.value === componentId) {
          return option.textContent;
        }
      }
    }
    
    return null;
  }

  // Phân tích cấu hình của tất cả tickets
  function analyzeTicketConfigurations() {
    const tbody = actionTable.querySelector('tbody');
    if (!tbody) return null;
    
    // Load saved configuration from session
    let savedConfig = {};
    try {
      const savedConfigStr = sessionStorage.getItem('jiraConfig');
      if (savedConfigStr) {
        savedConfig = JSON.parse(savedConfigStr);
      }
    } catch (error) {
      console.error('Error loading saved config:', error);
    }
    
    const rows = Array.from(tbody.rows);
    const tickets = [];
    const issueTypeCount = {};
    const componentCount = {};
    const dueDateCount = {};
    const dueDates = [];
    
    for (const row of rows) {
      const cells = row.cells;
      
      const contentElement = cells[1]?.querySelector('textarea');
      if (!contentElement) {
        continue;
      }
      
      const content = contentElement.value.trim();
      
      if (content) {
        // Try to get config from row's data attribute first, fallback to global saved config
        let rowConfig = {};
        try {
          const rowConfigStr = row.getAttribute('data-jira-config');
          if (rowConfigStr) {
            rowConfig = JSON.parse(rowConfigStr);
          }
        } catch (error) {
          console.error('Error parsing row config:', error);
        }
        
        // Use row-specific config if available
        // Only fallback to global saved config for tickets that haven't been configured yet
        let issueType, componentId, parentKey;
        
        if (rowConfig.issueType || rowConfig.componentId || rowConfig.parentKey) {
          // This ticket has specific configuration, use it exclusively
          issueType = rowConfig.issueType || 'Task';
          componentId = rowConfig.componentId || '';
          parentKey = rowConfig.parentKey || '';
        } else {
          // This ticket has no specific configuration, use global saved config as fallback
          issueType = savedConfig.issueType || 'Task';
          componentId = savedConfig.componentId || '';
          parentKey = savedConfig.parentKey || '';
        }
        
        // Get component name from ID by checking available dropdowns
        let componentText = 'Không có';
        let configSource = '';
        
        if (componentId) {
          const componentName = getComponentNameById(componentId);
          if (componentName) {
            componentText = componentName;
          } else {
            // Fallback to showing ID if name lookup fails
            componentText = 'Component ID: ' + componentId;
          }
          
          // Determine config source for display
          if (rowConfig.componentId) {
            configSource = ' (cấu hình riêng)';
          } else if (savedConfig.componentId) {
            configSource = ' (cấu hình chung)';
          }
          componentText += configSource;
        }
        
        // Lấy due date từ cột Deadline (index 2)
        const dueDateInput = cells[2].querySelector('input');
        const dueDate = dueDateInput ? dueDateInput.value.trim() : '';
        
        tickets.push({
          content: content,
          issueType: issueType,
          componentId: componentId,
          componentText: componentText,
          dueDate: dueDate,
          parentKey: parentKey,
          row: row
        });
        
        // Count configurations
        issueTypeCount[issueType] = (issueTypeCount[issueType] || 0) + 1;
        componentCount[componentText] = (componentCount[componentText] || 0) + 1;
        
        // Count due dates
        if (dueDate) {
          dueDateCount[dueDate] = (dueDateCount[dueDate] || 0) + 1;
          dueDates.push(new Date(dueDate));
        } else {
          dueDateCount['Không có'] = (dueDateCount['Không có'] || 0) + 1;
        }
      }
    }
    
    // Phân tích due dates
    const dueDateStats = {
      total: tickets.length,
      withDueDate: dueDates.length,
      withoutDueDate: tickets.length - dueDates.length,
      earliest: dueDates.length > 0 ? new Date(Math.min(...dueDates)) : null,
      latest: dueDates.length > 0 ? new Date(Math.max(...dueDates)) : null,
      distribution: dueDateCount
    };
    
    return {
      tickets: tickets,
      issueTypeCount: issueTypeCount,
      componentCount: componentCount,
      dueDateStats: dueDateStats,
      hasMultipleIssueTypes: Object.keys(issueTypeCount).length > 1,
      hasMultipleComponents: Object.keys(componentCount).length > 1,
      savedConfig: savedConfig
    };
  }

  // Tạo nội dung cho popup phân tích cấu hình
  function generateConfigAnalysisContent(analysis) {
    const { tickets, issueTypeCount, componentCount, dueDateStats, hasMultipleIssueTypes, hasMultipleComponents, savedConfig } = analysis;
    
    let content = '<div class="config-analysis">';
    
    // Saved Configuration Section
    if (savedConfig && (savedConfig.issueType || savedConfig.componentId || savedConfig.parentKey)) {
      content += '<div class="saved-config" style="background: #e0f2fe; border: 1px solid #0891b2; padding: 16px; border-radius: 8px; margin-bottom: 20px;">';
      content += '<h4 style="margin: 0 0 12px 0; color: #0e7490;"><i class="fa-solid fa-bookmark"></i> Cấu hình đã lưu tạm</h4>';
      content += '<div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 12px; font-size: 14px;">';
      
      // Get component name for display
      const savedComponentName = savedConfig.componentId ? (getComponentNameById(savedConfig.componentId) || 'ID: ' + savedConfig.componentId) : 'Chưa cấu hình';
      
      content += '<div><strong>Issue Type:</strong><br><input type="text" id="reviewIssueType" value="' + (savedConfig.issueType || 'Chưa cấu hình') + '" class="form-input" style="margin-top: 4px; width: 100%; font-size: 12px; padding: 4px 8px;"></div>';
      content += '<div><strong>Component:</strong><br><input type="text" id="reviewComponentId" value="' + savedComponentName + '" class="form-input" style="margin-top: 4px; width: 100%; font-size: 12px; padding: 4px 8px;" data-component-id="' + (savedConfig.componentId || '') + '"></div>';
      content += '<div><strong>Parent Key:</strong><br><input type="text" id="reviewParentKey" value="' + (savedConfig.parentKey || 'Chưa cấu hình') + '" class="form-input" style="margin-top: 4px; width: 100%; font-size: 12px; padding: 4px 8px;"></div>';
      
      content += '</div>';
      
      const configTime = savedConfig.timestamp ? new Date(savedConfig.timestamp).toLocaleString('vi-VN') : 'Không rõ';
      content += '<div style="margin-top: 10px; font-size: 12px; color: #0e7490; font-style: italic;">Đã lưu lúc: ' + configTime + '</div>';
      content += '</div>';
    } else {
      content += '<div class="no-saved-config" style="background: #fef3c7; border: 1px solid #f59e0b; padding: 12px; border-radius: 8px; margin-bottom: 20px;">';
      content += '<div style="color: #92400e; font-size: 14px;"><i class="fa-solid fa-info-circle"></i> Chưa có cấu hình nào được lưu tạm. Sẽ sử dụng cấu hình mặc định.</div>';
      content += '</div>';
    }
    
    // Summary
    content += '<div class="analysis-summary" style="background: #f8fafc; padding: 16px; border-radius: 8px; margin-bottom: 20px;">';
    content += '<h4 style="margin: 0 0 12px 0; color: #374151;"><i class="fa-solid fa-chart-pie"></i> Tổng quan cấu hình</h4>';
    content += '<div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 16px;">';
    
    // Issue Types
    content += '<div>';
    content += '<h5 style="margin: 0 0 8px 0; color: #6b7280;">Issue Types:</h5>';
    for (const [type, count] of Object.entries(issueTypeCount)) {
      const percentage = ((count / tickets.length) * 100).toFixed(0);
      content += '<div style="margin-bottom: 4px;"><span style="background: #e3f2fd; color: #1976d2; padding: 2px 8px; border-radius: 12px; font-size: 12px;">' + type + '</span> <strong>' + count + '</strong> (' + percentage + '%)</div>';
    }
    content += '</div>';
    
    // Components  
    content += '<div>';
    content += '<h5 style="margin: 0 0 8px 0; color: #6b7280;">Components:</h5>';
    for (const [comp, count] of Object.entries(componentCount)) {
      const percentage = ((count / tickets.length) * 100).toFixed(0);
      content += '<div style="margin-bottom: 4px;"><span style="background: #f3e5f5; color: #7b1fa2; padding: 2px 8px; border-radius: 12px; font-size: 12px;">' + comp + '</span> <strong>' + count + '</strong> (' + percentage + '%)</div>';
    }
    content += '</div>';
    
    // Due Date Statistics
    content += '<div>';
    content += '<h5 style="margin: 0 0 8px 0; color: #6b7280;">Due Dates:</h5>';
    content += '<div style="margin-bottom: 6px;"><span style="color: #16a34a;">✅ Có deadline:</span> <strong>' + dueDateStats.withDueDate + '</strong></div>';
    content += '<div style="margin-bottom: 6px;"><span style="color: #dc2626;">❌ Chưa có:</span> <strong>' + dueDateStats.withoutDueDate + '</strong></div>';
    if (dueDateStats.earliest && dueDateStats.latest) {
      const formatDate = (date) => date.toLocaleDateString('vi-VN');
      content += '<div style="margin-bottom: 4px; font-size: 12px; color: #6b7280;">📅 Sớm nhất: ' + formatDate(dueDateStats.earliest) + '</div>';
      content += '<div style="margin-bottom: 4px; font-size: 12px; color: #6b7280;">📅 Muộn nhất: ' + formatDate(dueDateStats.latest) + '</div>';
    }
    content += '</div>';
    
    content += '</div></div>';
    
    // Conflicts
    if (hasMultipleIssueTypes || hasMultipleComponents) {
      content += '<div class="analysis-conflicts" style="background: #fef3c7; border: 1px solid #f59e0b; padding: 16px; border-radius: 8px; margin-bottom: 20px;">';
      content += '<h4 style="margin: 0 0 12px 0; color: #92400e;"><i class="fa-solid fa-exclamation-triangle"></i> Phát hiện cấu hình khác nhau</h4>';
      
      if (hasMultipleIssueTypes) {
        content += '<p style="margin: 0 0 8px 0;">• <strong>Issue Types khác nhau:</strong> ' + Object.keys(issueTypeCount).join(', ') + '</p>';
      }
      if (hasMultipleComponents) {
        content += '<p style="margin: 0 0 8px 0;">• <strong>Components khác nhau:</strong> ' + Object.keys(componentCount).join(', ') + '</p>';
      }
      
      content += '<p style="margin: 8px 0 0 0; font-style: italic; color: #92400e;">Bạn có thể review và chỉnh sửa từng ticket bên dưới trước khi tạo.</p>';
      content += '</div>';
    } else {
      content += '<div class="analysis-success" style="background: #dcfce7; border: 1px solid #16a34a; padding: 16px; border-radius: 8px; margin-bottom: 20px;">';
      content += '<h4 style="margin: 0 0 8px 0; color: #15803d;"><i class="fa-solid fa-check-circle"></i> Cấu hình đồng nhất</h4>';
      content += '<p style="margin: 0; color: #15803d;">Tất cả tickets có cùng cấu hình. Có thể tiến hành tạo ngay.</p>';
      content += '</div>';
    }
    
    // Ticket List for Review
    content += '<div class="ticket-review">';
    content += '<h4 style="margin: 0 0 16px 0; color: #374151;"><i class="fa-solid fa-list-check"></i> Danh sách tickets (' + tickets.length + ')</h4>';
    
    tickets.forEach((ticket, index) => {
      const issueTypeIcon = {
        'Task': '📝',
        'Story': '📚', 
        'Bug': '🐛',
        'Risk': '⚠️',
        'Sub-task': '🎯'
      };
      
      content += '<div class="ticket-item" style="border: 1px solid #e5e7eb; border-radius: 8px; padding: 12px; margin-bottom: 8px; background: #ffffff;">';
      content += '<div style="display: flex; align-items: flex-start; gap: 12px;">';
      content += '<span style="background: #3b82f6; color: white; width: 24px; height: 24px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 11px; flex-shrink: 0;">' + (index + 1) + '</span>';
      content += '<div style="flex: 1;">';
      content += '<div style="font-weight: 600; margin-bottom: 6px; color: #1f2937;">' + ticket.content + '</div>';
      
      // Editable config for each ticket
      content += '<div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 8px; margin: 8px 0;">';
      content += '<select id="ticket_' + index + '_issueType" style="font-size: 11px; padding: 2px 4px; border: 1px solid #d1d5db; border-radius: 4px;">';
      content += '<option value="Task"' + (ticket.issueType === 'Task' ? ' selected' : '') + '>📝 Task</option>';
      content += '<option value="Story"' + (ticket.issueType === 'Story' ? ' selected' : '') + '>📚 Story</option>';
      content += '<option value="Bug"' + (ticket.issueType === 'Bug' ? ' selected' : '') + '>🐛 Bug</option>';
      content += '<option value="Risk"' + (ticket.issueType === 'Risk' ? ' selected' : '') + '>⚠️ Risk</option>';
      content += '<option value="Sub-task"' + (ticket.issueType === 'Sub-task' ? ' selected' : '') + '>🎯 Sub-task</option>';
      content += '</select>';
      
      // Component dropdown instead of text input
      content += '<select id="ticket_' + index + '_componentId" style="font-size: 11px; padding: 2px 4px; border: 1px solid #d1d5db; border-radius: 4px;" class="ticket-component-dropdown">';
      content += '<option value="">-- Chọn component --</option>';
      content += '</select>';
      
      content += '<input type="text" id="ticket_' + index + '_parentKey" value="' + (ticket.parentKey || '') + '" placeholder="Parent Key" style="font-size: 11px; padding: 2px 4px; border: 1px solid #d1d5db; border-radius: 4px;">';
      content += '</div>';
      
      content += '<div style="display: flex; gap: 8px; margin-top: 4px;">';
      content += '<span style="background: #e3f2fd; color: #1976d2; padding: 2px 6px; border-radius: 12px; font-size: 11px;">' + (issueTypeIcon[ticket.issueType] || '📝') + ' ' + ticket.issueType + '</span>';
      content += '<span style="background: #f3e5f5; color: #7b1fa2; padding: 2px 6px; border-radius: 12px; font-size: 11px;">🏷️ ' + ticket.componentText + '</span>';
      if (ticket.parentKey) {
        content += '<span style="background: #fff3cd; color: #856404; padding: 2px 6px; border-radius: 12px; font-size: 11px;">🔗 ' + ticket.parentKey + '</span>';
      }
      content += '</div>';
      content += '</div>';
      content += '</div>';
      content += '</div>';
    });
    
    content += '</div>';
    content += '</div>';
    
    return content;
  }

  // Load components cho tất cả dropdowns trong popup analysis
  async function loadComponentsForAnalysisPopup(projectKey, tickets) {
    if (!projectKey || !tickets) return;

    try {
      const response = await fetch('/jira-get-components', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ projectKey: projectKey })
      });

      if (!response.ok) {
        throw new Error('HTTP ' + response.status);
      }

      const result = await response.json();

      if (result.ok && result.components) {
        // Load components cho từng ticket dropdown
        tickets.forEach((ticket, index) => {
          const componentSelect = document.getElementById('ticket_' + index + '_componentId');
          if (componentSelect) {
            // Clear loading option
            componentSelect.innerHTML = '<option value="">-- Chọn component --</option>';
            
            // Add components to dropdown
            result.components.forEach(component => {
              const option = document.createElement('option');
              option.value = component.id;
              option.textContent = component.name;
              if (component.description) {
                option.title = component.description;
              }
              
              // Select current component if matches
              if (component.id === ticket.componentId) {
                option.selected = true;
              }
              
              componentSelect.appendChild(option);
            });
          }
        });
      }
    } catch (error) {
      console.error('Error loading components for analysis popup:', error);
      // Set error message for all component dropdowns
      tickets.forEach((ticket, index) => {
        const componentSelect = document.getElementById('ticket_' + index + '_componentId');
        if (componentSelect) {
          componentSelect.innerHTML = '<option value="">-- Lỗi tải components --</option>';
        }
      });
    }
  }

  let currentTicketAnalysis = null;

  function proceedWithBulkCreation() {
    
    // Read updated configuration from individual ticket editors
    if (currentTicketAnalysis && currentTicketAnalysis.tickets) {
      currentTicketAnalysis.tickets.forEach((ticket, index) => {
        const issueTypeSelect = document.getElementById('ticket_' + index + '_issueType');
        const componentIdSelect = document.getElementById('ticket_' + index + '_componentId'); // Đổi từ Input sang Select
        const parentKeyInput = document.getElementById('ticket_' + index + '_parentKey');
        
        if (issueTypeSelect) {
          ticket.issueType = issueTypeSelect.value;
        }
        if (componentIdSelect) {
          ticket.componentId = componentIdSelect.value; // Đọc value từ dropdown
        }
        if (parentKeyInput) {
          ticket.parentKey = parentKeyInput.value.trim();
        }
        
        // Update the row's data attribute with new config
        const rowConfig = {
          issueType: ticket.issueType,
          componentId: ticket.componentId,
          parentKey: ticket.parentKey,
          timestamp: Date.now()
        };
        ticket.row.setAttribute('data-jira-config', JSON.stringify(rowConfig));
      });
    }
    
    // Also read global config from popup if exists (fallback for new tickets)
    const reviewIssueType = document.getElementById('reviewIssueType');
    const reviewComponentId = document.getElementById('reviewComponentId');
    const reviewParentKey = document.getElementById('reviewParentKey');
    
    if (reviewIssueType && reviewComponentId && reviewParentKey) {
      // Get componentId from data attribute, not from display value
      const componentIdValue = reviewComponentId.getAttribute('data-component-id') || '';
      
      const updatedConfig = {
        issueType: reviewIssueType.value || 'Task',
        componentId: componentIdValue,
        parentKey: reviewParentKey.value || '',
        timestamp: Date.now()
      };
      
      // Save updated global config back to session
      sessionStorage.setItem('jiraConfig', JSON.stringify(updatedConfig));
    }
    
    closeConfigAnalysisPopup();
    if (currentTicketAnalysis) {
      // Proceed with the actual bulk creation using updated configurations
      executeBulkTicketCreation(currentTicketAnalysis.tickets);
    }
  }

  // Thực hiện tạo bulk tickets với cấu hình đã phân tích
  async function executeBulkTicketCreation(tickets) {
    if (tickets.length === 0) {
      alert('Không có tickets nào để tạo!');
      return;
    }

    if (!confirm('Bạn có chắc chắn muốn tạo ' + tickets.length + ' Jira tickets không?')) {
      return;
    }

    const spaceSelect = document.getElementById('spaceSelect');
    const projectKey = spaceSelect ? spaceSelect.value : 'AIG';
    
    // Sử dụng cấu hình từ ticket đã tạo gần nhất hoặc mặc định
    const defaultParentKey = lastJiraConfig.parentKey || '';
    
    // Show progress
    const progressDiv = document.createElement('div');
    progressDiv.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; min-width: 300px; text-align: center;';
    progressDiv.innerHTML = '<h4>Đang tạo tickets...</h4><div id="ticketProgress">0/' + tickets.length + '</div>';
    document.body.appendChild(progressDiv);

    let successCount = 0;
    let errors = [];
    let successTickets = [];

    try {
      for (let i = 0; i < tickets.length; i++) {
        const ticket = tickets[i];
        
        // Update progress
        document.getElementById('ticketProgress').textContent = (i + 1) + '/' + tickets.length;
        
        // Get additional info from the table row
        const cells = ticket.row.cells;
        const deadline = cells[2].querySelector('input').value.trim();
        const picSelect = cells[3].querySelector('select');
        const picValue = picSelect ? picSelect.value.trim() : '';
        const noteElement = cells[4].querySelector('textarea');
        const note = noteElement ? noteElement.value.trim() : '';
        
        // Format due date to YYYY-MM-DD if provided
        let formattedDueDate = '';
        if (deadline) {
          try {
            const date = new Date(deadline);
            if (!isNaN(date.getTime())) {
              formattedDueDate = date.toISOString().split('T')[0];
            }
          } catch (error) {
            console.warn('Invalid date format:', deadline);
          }
        }
        
        try {
          // Validate required fields
          if (!ticket.content || !ticket.content.trim()) {
            errors.push('Ticket ' + (i + 1) + ': Thiếu nội dung');
            continue;
          }

          // Prepare request payload with proper validation
          const requestPayload = {
            summary: ticket.content.trim(),
            description: note || 'Ticket được tạo từ Action Items',
            projectKey: projectKey,
            priority: 'Major'
          };

          // Add optional fields only if they have values
          if (picValue && picValue.trim()) {
            requestPayload.assignee = picValue.trim();
          }

          if (formattedDueDate) {
            requestPayload.dueDate = formattedDueDate;
          }

          if (ticket.componentId && ticket.componentId.trim()) {
            requestPayload.componentId = ticket.componentId.trim();
          }

          if (ticket.issueType && ticket.issueType.trim()) {
            requestPayload.issueType = ticket.issueType.trim();
          } else {
            requestPayload.issueType = 'Task';
          }

          if (ticket.parentKey && ticket.parentKey.trim()) {
            requestPayload.parentKey = ticket.parentKey.trim();
          }

          console.log('executeBulkTicketCreation - Request payload for ticket ' + (i + 1) + ':', requestPayload);

          const response = await fetch('/jira-create-ticket', {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify(requestPayload)
          });

          if (!response.ok) {
            const errorText = await response.text();
            console.error('HTTP Error ' + response.status + ':', errorText);
            throw new Error('HTTP ' + response.status + ': ' + errorText);
          }

          const result = await response.json();
          if (result.ok) {
            successCount++;
            successTickets.push({
              key: result.key,
              summary: ticket.content.substring(0, 50) + (ticket.content.length > 50 ? '...' : '')
            });
          } else {
            errors.push('Ticket "' + ticket.content.substring(0, 50) + '...": ' + result.error);
          }
        } catch (error) {
          errors.push('Ticket "' + ticket.content.substring(0, 50) + '...": ' + error.message);
        }
        
        // Small delay to avoid rate limits
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      // Show results using popup instead of alert
      showBulkSuccessPopup(successCount, tickets.length, successTickets, errors);
      
    } finally {
      // Remove progress dialog
      document.body.removeChild(progressDiv);
    }
  }

  async function confirmBulkCreateJiraTickets() {
    const componentId = document.getElementById('bulkJiraComponent').value;
    const issueType = document.getElementById('bulkJiraIssueType').value;
    const bulkDueDate = document.getElementById('bulkJiraDueDate').value;
    const parentKey = document.getElementById('bulkJiraParentKey').value.trim();
    
    if (!confirm('Bạn có chắc chắn muốn tạo tất cả Jira tickets không?')) {
      return;
    }

    // Close popup
    closeBulkJiraPopup();

    const tbody = actionTable.querySelector('tbody');
    const rows = Array.from(tbody.rows);
    const spaceSelect = document.getElementById('spaceSelect');
    
    const tickets = [];

    // Collect all valid action items
    for (const row of rows) {
      const cells = row.cells;
      const content = cells[1].querySelector('textarea').value.trim();
      const deadline = cells[2].querySelector('input').value.trim() || bulkDueDate; // Use individual deadline or bulk deadline
      const picSelect = cells[3].querySelector('select');
      const picValue = picSelect ? picSelect.value.trim() : '';
      const note = cells[4].querySelector('textarea').value.trim();

      if (content) {
        // Format due date to YYYY-MM-DD if provided
        let formattedDueDate = '';
        if (deadline) {
          try {
            const date = new Date(deadline);
            if (!isNaN(date.getTime())) {
              formattedDueDate = date.toISOString().split('T')[0];
            }
          } catch (error) {
            console.warn('Invalid date format:', deadline);
          }
        }

        tickets.push({
          summary: content,
          deadline: formattedDueDate,
          assigneeId: picValue,
          note: note,
          componentId: componentId,
          issueType: issueType,
          parentKey: parentKey
        });
      }
    }

    // Show progress
    const progressDiv = document.createElement('div');
    progressDiv.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); z-index: 10000; min-width: 300px; text-align: center;';
    progressDiv.innerHTML = '<h4>Đang tạo tickets...</h4><div id="ticketProgress">0/' + tickets.length + '</div>';
    document.body.appendChild(progressDiv);

    let successCount = 0;
    let errors = [];
    let successTickets = [];

    try {
      for (let i = 0; i < tickets.length; i++) {
        const ticket = tickets[i];
        
        // Update progress
        document.getElementById('ticketProgress').textContent = (i + 1) + '/' + tickets.length;
        
        try {
          // Validate required fields
          if (!ticket.summary || !ticket.summary.trim()) {
            errors.push('Ticket ' + (i + 1) + ': Thiếu nội dung');
            continue;
          }

          // Prepare request payload with proper validation
          const requestPayload = {
            summary: ticket.summary.trim(),
            description: ticket.note || 'Ticket được tạo từ Action Items',
            projectKey: spaceSelect ? spaceSelect.value : 'AIG',
            priority: 'Major'
          };

          // Add optional fields only if they have values
          if (ticket.assigneeId && ticket.assigneeId.trim()) {
            requestPayload.assignee = ticket.assigneeId.trim();
          }

          if (ticket.deadline) {
            requestPayload.dueDate = ticket.deadline;
          }

          if (ticket.componentId && ticket.componentId.trim()) {
            requestPayload.componentId = ticket.componentId.trim();
          }

          if (ticket.issueType && ticket.issueType.trim()) {
            requestPayload.issueType = ticket.issueType.trim();
          } else {
            requestPayload.issueType = 'Task';
          }

          if (ticket.parentKey && ticket.parentKey.trim()) {
            requestPayload.parentKey = ticket.parentKey.trim();
          }

          console.log('confirmBulkCreateJiraTickets - Request payload for ticket ' + (i + 1) + ':', requestPayload);

          const response = await fetch('/jira-create-ticket', {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify(requestPayload)
          });

          if (!response.ok) {
            const errorText = await response.text();
            console.error('HTTP Error ' + response.status + ':', errorText);
            throw new Error('HTTP ' + response.status + ': ' + errorText);
          }

          const result = await response.json();
          if (result.ok) {
            successCount++;
            successTickets.push({
              key: result.key,
              summary: ticket.summary.substring(0, 50) + (ticket.summary.length > 50 ? '...' : '')
            });
          } else {
            errors.push('Ticket "' + ticket.summary.substring(0, 50) + '...": ' + result.error);
          }
        } catch (error) {
          errors.push('Ticket "' + ticket.summary.substring(0, 50) + '...": ' + error.message);
        }
        
        // Small delay to avoid rate limits
        await new Promise(resolve => setTimeout(resolve, 500));
      }

      // Show results using popup instead of alert
      showBulkSuccessPopup(successCount, tickets.length, successTickets, errors);
      
    } finally {
      // Remove progress dialog
      document.body.removeChild(progressDiv);
    }
  }

  function extractFromTables() {
    const getVal = (cell) => {
      if (!cell) return '';
      const el = cell.querySelector('input, textarea, select, [contenteditable="true"]');
      if (!el) return (cell.textContent || '').trim();
      if (el.tagName === 'SELECT') return (el.value || '').trim();
      if (el.hasAttribute && el.hasAttribute('contenteditable')) return (el.textContent || '').trim();
      return (el.value || '').trim();
    };

    // Meeting Notes Template
    const discussionTopics = [];
    document.querySelectorAll('#discussionTable tbody tr').forEach(row => {
      const content = getVal(row.cells[1]);
      
      // ===== FIX: Xử lý PIC cho Discussion Topics với dropdown =====
      let pic = getVal(row.cells[2]);  // Lấy PIC từ bảng
      
      // Kiểm tra xem có dropdown select hay không
      const picSelect = row.cells[2]?.querySelector('select');
      if (picSelect && picSelect.value) {
        // Nếu có dropdown và có value được chọn, lấy accountID từ value
        pic = picSelect.value;
        console.log('Discussion PIC - Extracted accountID from dropdown:', pic);
      } else {
        // Nếu không có dropdown (legacy text input), thử tìm accountID từ displayName
        const picInput = row.cells[2]?.querySelector('input');
        if (picInput && picInput.value) {
          const inputValue = picInput.value.trim();
          const accountId = findAccountIdByDisplayName(inputValue);
          if (accountId) {
            pic = accountId;
            console.log('Discussion PIC - Converted displayName to accountID:', pic);
          } else {
            pic = inputValue;
          }
        }
      }
      // ===== END FIX =====
      
      const note    = getVal(row.cells[3]);
      if (content || pic || note) discussionTopics.push({ content, pic, note });
    });

    const actionItems = [];
    document.querySelectorAll('#actionTable tbody tr').forEach(row => {
      const content  = getVal(row.cells[1]);
      const deadline = getVal(row.cells[2]);
      
      // ===== FIX: Lấy accountID từ PIC dropdown để tạo mention trong Confluence =====
      let pic = getVal(row.cells[3]);  // Lấy PIC từ cột thứ 3
      
      // Nếu pic là displayName (text), cần chuyển về accountID
      const picSelect = row.cells[3]?.querySelector('select');
      if (picSelect && picSelect.value) {
        // Nếu có dropdown và có value được chọn, luôn ưu tiên lấy accountID từ value
        pic = picSelect.value;
        console.log('Extracted PIC accountID from dropdown:', pic);
      } else if (pic) {
        // Nếu không có dropdown hoặc không có value, thử tìm accountID từ displayName
        const accountId = findAccountIdByDisplayName(pic);
        if (accountId) {
          pic = accountId;
          console.log('Converted displayName to accountID:', pic);
        } else {
          console.warn('Could not find accountID for PIC:', pic);
        }
      }
      // ===== END FIX =====
      
      const note     = getVal(row.cells[4]); // Ghi chú từ cột thứ 4
      if (content || deadline || pic || note) actionItems.push({ content, deadline, pic, note });
    });

    // Cập nhật lastLLMJson
    if (!window.lastLLMJson) window.lastLLMJson = { discussion_topics: [], action_items: [], assessment: "Đúng tiến độ" };
    window.lastLLMJson.discussion_topics = discussionTopics;
    window.lastLLMJson.action_items = actionItems;

    const btn = document.getElementById('btnCreate');
    if (btn) btn.disabled = !(discussionTopics.length || actionItems.length);
  }

  // Initialize table event listeners
  if (addDiscussionRow) {
    addDiscussionRow.addEventListener('click', () => addTableRow('discussionTable'));
  }

  if (addActionRow) {
    addActionRow.addEventListener('click', () => addTableRow('actionTable'));
  }

  if (createAllTickets) {
    createAllTickets.addEventListener('click', async function() {
      try {
        await createAllJiraTickets();
      } catch (error) {
        console.error('Error creating all tickets:', error);
        alert('Lỗi tạo tickets. Vui lòng thử lại!');
      }
    });
  }


  // Add delete event listeners to existing rows
  document.querySelectorAll('.delete-row').forEach(button => {
    button.addEventListener('click', function() {
      const row = this.closest('tr');
      const tbody = row.parentNode;
      const tableId = tbody.parentNode.id;
      tbody.removeChild(row);
      updateRowNumbers(tableId);
    });
  });

  // Add Jira ticket event listeners to existing rows
  document.querySelectorAll('.create-jira-ticket').forEach(button => {
    button.addEventListener('click', async function() {
      const row = this.closest('tr');
      try {
        await openJiraPopup(row);
      } catch (error) {
        console.error('Error opening Jira popup:', error);
        alert('Lỗi mở popup tạo ticket. Vui lòng thử lại!');
      }
    });
  });

  // File select / drag drop for audio
  input.addEventListener('change', function(){
    currentFile = input.files && input.files.length > 0 ? input.files[0] : null;
    sel.textContent=currentFile ? (currentFile.name+' — '+(currentFile.size/1048576).toFixed(2)+' MB') : 'Chưa chọn tệp';
    
    // Tự động chạy pipeline khi file được chọn
    if (currentFile) {
      setTimeout(() => {
        btnUpload.click();
      }, 500); // Delay 500ms để user thấy file đã được chọn
    }
  });
  ['dragover','dragenter'].forEach(ev=>drop.addEventListener(ev, e=>{
    e.preventDefault(); drop.classList.add('dragover');
  }));
  ['dragleave','drop'].forEach(ev=>drop.addEventListener(ev, e=>{
    e.preventDefault(); drop.classList.remove('dragover');
  }));
  drop.addEventListener('drop', e=>{
    e.preventDefault();
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      input.files = e.dataTransfer.files;
      currentFile = e.dataTransfer.files[0];
      sel.textContent=currentFile ? (currentFile.name+' — '+(currentFile.size/1048576).toFixed(2)+' MB') : 'Chưa chọn tệp';
      
      // Tự động chạy pipeline khi file được drop
      if (currentFile) {
        setTimeout(() => {
          btnUpload.click();
        }, 500); // Delay 500ms để user thấy file đã được drop
      }
    }
  });

  // Audio drop zone - click to open file dialog
  drop.addEventListener('click', function(e){
    // Ignore clicks on buttons
    if (e.target.tagName === 'BUTTON' || e.target.closest('button')) return;
    
    // Ignore clicks on processing progress UI
    if (e.target.closest('#processingProgress')) return;
    
    input.click();
  });

  // Email image handling - drag and drop
  ['dragover','dragenter'].forEach(ev=>emailDrop.addEventListener(ev, e=>{
    e.preventDefault(); emailDrop.classList.add('dragover');
  }));
  ['dragleave','drop'].forEach(ev=>emailDrop.addEventListener(ev, e=>{
    e.preventDefault(); emailDrop.classList.remove('dragover');
  }));
  emailDrop.addEventListener('drop', e=>{
    e.preventDefault();
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      handleImageFile(e.dataTransfer.files[0]);
    }
  });

  // Email image handling - paste
  document.addEventListener('paste', function(e) {
    const items = e.clipboardData.items;
    for (let i = 0; i < items.length; i++) {
      if (items[i].type.indexOf('image') !== -1) {
        const blob = items[i].getAsFile();
        handleImageFile(blob);
        e.preventDefault();
        return;
      }
    }
  });

  // Email image handling - click to open file dialog (enabled)
  // Also allow clicking anywhere inside drop zone
  emailDrop.addEventListener('click', function(e){
    // ignore clicks on preview area (when image already present)
    if (emailPreview && emailPreview.style.display === 'block') return;
    emailInput.click();
  });
  // Keyboard support for opening file dialog
  emailPasteArea.addEventListener('keydown', function(e){
    if(e.key === 'Enter' || e.key === ' '){ e.preventDefault(); emailInput.click(); }
  });
  emailInput.addEventListener('change', function() {
    if (emailInput.files && emailInput.files.length > 0) {
      handleImageFile(emailInput.files[0]);
    }
  });

  // Email text input handling
  emailTextInput.addEventListener('input', function() {
    // Enable/disable process text button based on text content
    const hasText = emailTextInput.value.trim().length > 0;
    btnProcessText.disabled = false; // Always keep enabled for text processing
    
    // Update visual state without changing height
    const textUpload = emailTextInput.closest('.email-text-upload');
    const textArea = emailTextInput.closest('.email-text-area');
    const icon = textArea.querySelector('i');
    const text = textArea.querySelector('p');
    
    if (hasText) {
      textUpload.classList.add('has-text');
      // Hide placeholder elements but keep container height fixed
      icon.style.opacity = '0';
      text.style.opacity = '0';
      emailTextInput.style.background = 'rgba(255,255,255,0.9)';
      emailTextInput.style.borderRadius = '4px';
    } else {
      textUpload.classList.remove('has-text');
      icon.style.opacity = '1';
      text.style.opacity = '1';
      emailTextInput.style.background = 'transparent';
      emailTextInput.style.borderRadius = '0';
    }
  });

  // Focus handling for text area
  emailTextInput.addEventListener('focus', function() {
    const textUpload = emailTextInput.closest('.email-text-upload');
    textUpload.style.borderColor = 'var(--primary)';
    textUpload.style.background = '#F0F7FF';
  });

  emailTextInput.addEventListener('blur', function() {
    const textUpload = emailTextInput.closest('.email-text-upload');
    const hasText = emailTextInput.value.trim().length > 0;
    if (!hasText) {
      textUpload.style.borderColor = '#C1C7D0';
      textUpload.style.background = '#FAFBFC';
    }
  });

  // Click on text area to focus textarea
  const emailTextArea = document.querySelector('.email-text-area');
  if (emailTextArea) {
    emailTextArea.addEventListener('click', function(e) {
      if (e.target !== emailTextInput) {
        emailTextInput.focus();
      }
    });
  }

  // Upload email image function to avoid duplication
  async function uploadEmailImage() {
    if (isEmailOcrBusy || isUploadingEmailImage) return;
    if (emailImageKey) return; // Already uploaded

    try {
      isEmailOcrBusy = true;
      isUploadingEmailImage = true;
      showEmailStatus('Đang upload ảnh lên R2…', 'processing');

      let blob = emailImageBlob;
      if (!blob) {
        if (!emailImgPreview || !emailImgPreview.src) throw new Error('Chưa có ảnh để upload');
        const resp = await fetch(emailImgPreview.src);
        if (!resp.ok) throw new Error('Không thể đọc dữ liệu ảnh');
        blob = await resp.blob();
      }

      let ext = '.png';
      const mt = (blob.type || '').toLowerCase();
      if (mt.includes('jpeg') || mt.includes('jpg')) ext = '.jpg';
      else if (mt.includes('webp')) ext = '.webp';
      else if (mt.includes('png')) ext = '.png';

      let key = (crypto.randomUUID ? crypto.randomUUID() : String(Date.now())) + ext;

      const signed = await fetch('/sign-put', {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ key })
      }).then(r => r.json());

      if (!signed.url) throw new Error('Không tạo được URL upload');

      await new Promise((res, rej) => {
        const xhr = new XMLHttpRequest();
        xhr.open('PUT', signed.url, true);
        xhr.upload.onprogress = e => { /* có thể hiển thị progress nếu muốn */ };
        xhr.onload = () => (xhr.status >= 200 && xhr.status < 300) ? res() : rej(new Error('Upload failed: ' + xhr.status));
        xhr.onerror = () => rej(new Error('Upload error'));
        xhr.send(blob);
      });

      emailImageKey = key;
      emailImageUrl = null;
      emailImageBlob = null; // giải phóng bộ nhớ

      showEmailStatus('Ảnh đã upload xong!', 'success');
      btnExtractEmails.disabled = false;
    } catch (e) {
      showEmailStatus('Lỗi upload: ' + String(e), 'error');
      console.error('Upload error:', e);
    } finally {
      isEmailOcrBusy = false;
      isUploadingEmailImage = false;
    }
  }

  // Handle image file
  function handleImageFile(file) {
    if (!file.type.match('image.*')) {
      showEmailStatus('Vui lòng chọn file ảnh', 'error');
      return;
    }

    const reader = new FileReader();
    reader.onload = function(e) {
      emailImgPreview.src = e.target.result;
      emailPreview.style.display = 'block';
      emailPasteArea.classList.add('has-image');
      emailDrop.classList.add('has-image');
      showEmailStatus('', '');

      // Reset OCR results
      ocrEmails.value = '';
      ocrJiraIds.value = '';
      btnExtractEmails.disabled = false;
      btnProcessText.disabled = false;
      btnGetJiraIds.disabled = false; // Cho phép lấy Jira IDs ngay cả khi chưa trích xuất
      emailImageUrl = null;
      emailImageKey = null;
      emailImageBlob = file;

      // Tự động upload ảnh ngay khi có file
      setTimeout(async () => {
        if (!isEmailOcrBusy && !isUploadingEmailImage && emailImageBlob) {
          await uploadEmailImage();
        }
      }, 100);

      try{ btnProcessImage.style.display='none'; btnProcessImage.disabled=false; }catch(_e){}
};
    reader.readAsDataURL(file);
  }

  // Remove image
  btnRemoveImage.addEventListener('click', function() {
    emailInput.value = '';
    emailPreview.style.display = 'none';
    emailPasteArea.classList.remove('has-image');
    emailDrop.classList.remove('has-image');
    showEmailStatus('', '');

    // Reset OCR results
    ocrEmails.value = '';
    ocrJiraIds.value = '';
    btnExtractEmails.disabled = true;
    btnProcessText.disabled = false; // Cho phép xử lý text ngay cả khi không có ảnh
    btnGetJiraIds.disabled = true;
    emailImageUrl = null;
    emailImageKey = null;
    emailImageBlob = null;

    try{ btnProcessImage.style.display='none'; btnProcessImage.disabled=false; }catch(_e){}
});

  btnProcessImage.addEventListener('click', async function () {
    await uploadEmailImage();
  });

  btnExtractEmails.addEventListener('click', async function() {
    if (isEmailOcrBusy) { showEmailStatus('Đang xử lý ảnh/OCR, vui lòng đợi...', 'processing'); return; }
    isEmailOcrBusy = true;
    if (isUploadingEmailImage) {
      showEmailStatus('Đang upload ảnh, vui lòng đợi...', 'processing');
      return;
    }
    btnExtractEmails.disabled = true;
    try {
      // 1) Nếu chưa có key/url thì tự upload ảnh
      if (!(emailImageUrl || emailImageKey)) {
        await uploadEmailImage();
        if (!emailImageKey) {
          showEmailStatus('Chưa có ảnh – dán/kéo thả ảnh vào khung trên', 'error');
          return;
        }
      }

      // 2) Gọi OCR với model hỗ trợ ảnh
      showEmailStatus('Đang trích xuất email...', 'processing');

      // Chuẩn bị request body
      const requestBody = {
          ...(emailImageUrl ? { imageUrl: emailImageUrl } : { imageKey: emailImageKey })
      };

      const response = await fetch('/ocr-extract', {
          method: 'POST',
          headers: { 'content-type': 'application/json' },
          body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
          const errorText = await response.text();
          throw new Error('Lỗi API: ' + response.status + ' - ' + errorText);
      }

      const result = await response.json();

      if (!result.ok) throw new Error(result.error || 'OCR thất bại');

      // 3) Chuẩn hoá email list
      let emails = (result.emails || '').trim();
      if (!emails || emails === '[]') {
          const text = String(result.text || '');
          const found = (text.match(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi) || [])
                        .map(s => s.trim().toLowerCase());
          emails = Array.from(new Set(found)).join('; ');
      } else {
          const raw = emails.replace(/[,\\n]+/g, ';').split(';').map(x => x.trim()).filter(Boolean);
          emails = Array.from(new Set(raw.map(x => x.toLowerCase()))).join('; ');
      }

      ocrEmails.value = emails;
      btnGetJiraIds.disabled = !emails;
      if (!emails) showEmailStatus('Không tìm thấy địa chỉ email trong ảnh', 'error');
      else showEmailStatus('Trích xuất thành công!', 'success');
    } catch (e) {
      showEmailStatus('Lỗi: ' + String(e?.message || e), 'error');
      console.error('OCR error:', e);
    } finally {
            isEmailOcrBusy = false;
isUploadingEmailImage = false;
      btnExtractEmails.disabled = false;
    }
  });

  // Get Jira Account IDs
  btnGetJiraIds.addEventListener('click', async function() {
    if (isGettingJiraIds) { showEmailStatus('Đang lấy Jira IDs, vui lòng đợi...', 'processing'); return; }
      isGettingJiraIds = true;
const emails = ocrEmails.value.trim();
    if (!emails) {
      showEmailStatus('Không có email để xử lý', 'error');
      return;
    }

    try {
      showEmailStatus('Đang lấy Jira Account IDs...', 'processing');

      // Split emails by semicolon
      const emailList = emails.split(';').map(e => e.trim()).filter(e => e);

      // Get Jira Account IDs for each email
      const jiraIds = [];
      for (const email of emailList) {
        try {
          const response = await fetch('/jira-get-account-id', {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({ email })
          });

          if (!response.ok) {
            throw new Error('Lỗi API Jira: ' + response.status);
          }
          const result = await response.json();
          if (result.ok && result.accountId) {
           jiraIds.push(result.accountId);
          }
        } catch (e) {
        }
      }

      ocrJiraIds.value = jiraIds.join(';');
      showEmailStatus('Hoàn tất!', 'success');
    } catch (e) {
      showEmailStatus('Lỗi: ' + String(e?.message || e), 'error');
      console.error('Jira API error:', e);
    } finally {
      isGettingJiraIds = false;
    }
  });

  // Process text with AI Grok to extract emails
  btnProcessText.addEventListener('click', async function() {
    const textInput = emailTextInput.value.trim();
    if (!textInput) {
      showEmailStatus('Vui lòng nhập văn bản cần xử lý', 'error');
      return;
    }

    try {
      btnProcessText.disabled = true;
      // Lấy AI model được chọn
      const aiModel = aiModelSelect ? aiModelSelect.value : 'grok4';
      const statusText = aiModel === 'gemini2.5pro' ? 'AI Gemini 2.5 Pro' : (aiModel === 'gpt5nano' ? 'AI GPT-5 Nano' : 'AI Grok 4');
      showEmailStatus('Đang xử lý văn bản bằng ' + statusText + '...', 'processing');

      // Gọi API để xử lý văn bản với AI model được chọn
      const response = await fetch('/process-text-emails', {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ text: textInput, aiModel: aiModel })
      });

      if (!response.ok) {
        throw new Error('Lỗi API: ' + response.status);
      }

      const result = await response.json();
      if (!result.ok) {
        throw new Error(result.error || 'Xử lý thất bại');
      }

      // Cập nhật kết quả
      const emails = result.emails || '';
      ocrEmails.value = emails;
      btnGetJiraIds.disabled = !emails;
      
      if (emails) {
        showEmailStatus('Xử lý thành công! Tìm thấy ' + emails.split(';').filter(e => e.trim()).length + ' email', 'success');
      } else {
        showEmailStatus('Không tìm thấy email trong văn bản', 'error');
      }
    } catch (e) {
      showEmailStatus('Lỗi: ' + String(e?.message || e), 'error');
      console.error('Process text error:', e);
    } finally {
      btnProcessText.disabled = false;
    }
  });


  function showEmailStatus(message, type) {
    emailStatus.textContent = message;
    emailStatus.className = 'email-status';

    if (message) {
      // Remove all existing type classes
      emailStatus.classList.remove('success', 'error', 'processing');

      // Add the new type class if provided
      if (type) {
        emailStatus.classList.add(type);
      }

      emailStatus.style.display = 'block';
    } else {
      emailStatus.style.display = 'none';
    }
  }


  $('btnCancel').addEventListener('click', ()=>{ if(uploadXhr) uploadXhr.abort(); if(transcribeAbort) transcribeAbort.abort(); spin.style.display='none'; setState('Đã hủy'); hideProcessingProgress(); });

  // NEW: Processing Progress Helper Functions
  function showProcessingProgress() {
    const progressEl = document.getElementById('processingProgress');
    if (progressEl) {
      progressEl.style.display = 'block';
      resetProcessingSteps();
      updateProcessingSummary('Bước 1/3', 'Đang xử lý...');
    }
  }

  function hideProcessingProgress() {
    const progressEl = document.getElementById('processingProgress');
    if (progressEl) progressEl.style.display = 'none';
  }

  function toggleProcessingDetails() {
    const header = document.getElementById('processingHeader');
    const details = document.getElementById('processingDetails');
    
    if (header && details) {
      const isExpanded = details.classList.contains('expanded');
      
      if (isExpanded) {
        details.classList.remove('expanded');
        header.classList.remove('expanded');
      } else {
        details.classList.add('expanded');
        header.classList.add('expanded');
      }
    }
  }

  function updateProcessingSummary(summary, title) {
    const summaryEl = document.getElementById('processingSummary');
    const titleEl = document.getElementById('processingTitle');
    
    if (summaryEl && summary) summaryEl.textContent = summary;
    if (titleEl && title) titleEl.textContent = title;
  }

  function updateProcessingIcon(state) {
    const icon = document.getElementById('processingIcon');
    if (!icon) return;
    
    icon.className = 'fa-solid ';
    
    if (state === 'processing') {
      icon.className += 'fa-cog fa-spin';
      icon.style.color = '#3b82f6';
    } else if (state === 'completed') {
      icon.className += 'fa-circle-check';
      icon.style.color = '#22c55e';
    } else if (state === 'error') {
      icon.className += 'fa-circle-xmark';
      icon.style.color = '#ef4444';
    }
  }

  function resetProcessingSteps() {
    ['step-upload', 'step-deepgram', 'step-ai'].forEach(id => {
      const el = document.getElementById(id);
      if (el) {
        el.className = 'processing-step';
        const status = el.querySelector('.step-status');
        if (status) status.textContent = 'Đang chờ...';
        const check = el.querySelector('.step-check');
        if (check) check.innerHTML = '<i class="fa-solid fa-circle-notch fa-spin"></i>';
      }
    });
    const timeline = document.getElementById('timelineBar');
    if (timeline) timeline.style.width = '0%';
  }

  function updateProcessingStep(stepId, state, message) {
    const el = document.getElementById(stepId);
    if (!el) return;
    
    // Remove all state classes
    el.classList.remove('active', 'completed', 'error');
    
    // Add new state class
    if (state) el.classList.add(state);
    
    // Update status text
    const status = el.querySelector('.step-status');
    if (status && message) status.textContent = message;
    
    // Update check icon
    const check = el.querySelector('.step-check');
    if (check) {
      if (state === 'active') {
        check.innerHTML = '<i class="fa-solid fa-circle-notch fa-spin"></i>';
      } else if (state === 'completed') {
        check.innerHTML = '<i class="fa-solid fa-circle-check"></i>';
      } else if (state === 'error') {
        check.innerHTML = '<i class="fa-solid fa-circle-xmark"></i>';
      }
    }
    
    // Update timeline
    const timeline = document.getElementById('timelineBar');
    if (timeline) {
      const steps = ['step-upload', 'step-deepgram', 'step-ai'];
      const currentIndex = steps.indexOf(stepId);
      if (currentIndex !== -1) {
        const progress = state === 'completed' ? 
          ((currentIndex + 1) / steps.length * 100) : 
          ((currentIndex + 0.5) / steps.length * 100);
        timeline.style.width = progress + '%';
      }
    }
    
    // Update summary based on current step
    const stepNames = {
      'step-upload': { num: 1, name: 'Upload file' },
      'step-deepgram': { num: 2, name: 'Deepgram STT' },
      'step-ai': { num: 3, name: 'AI Processing' }
    };
    
    if (stepNames[stepId]) {
      const stepInfo = stepNames[stepId];
      if (state === 'active') {
        updateProcessingSummary('Bước ' + stepInfo.num + '/3', stepInfo.name + '...');
        updateProcessingIcon('processing');
      } else if (state === 'completed' && stepId === 'step-ai') {
        updateProcessingSummary('Hoàn tất ✓', 'Xử lý thành công!');
        updateProcessingIcon('completed');
      } else if (state === 'error') {
        updateProcessingSummary('Lỗi ✗', 'Xử lý thất bại');
        updateProcessingIcon('error');
      }
    }
  }

  // Add click handler for processing header
  document.addEventListener('DOMContentLoaded', function() {
    const header = document.getElementById('processingHeader');
    if (header) {
      header.addEventListener('click', function(e) {
        e.stopPropagation(); // Prevent triggering file upload
        toggleProcessingDetails();
      });
    }
  });

  $('btnUpload').addEventListener('click', async function(){
    if((!currentFile || !currentFile.name) && (!input.files || input.files.length === 0)){
      alert('Chọn một tệp audio trước đã');
      return;
    }
    if(!currentFile && input.files && input.files.length > 0) currentFile = input.files[0];

    try{
      btnCreate.disabled=true; lastLLMJson=null; lastTranscriptUrl=null; lastGrokResponse=null; lastPreviewHtml=null; lastPageUrl=null;
      setProgress(0); out.value=''; log.textContent='';
      $('pageLinkContainer').style.display='none';
      
      // Show processing progress UI
      showProcessingProgress();
      
      setState('Ký URL upload...'); spin.style.display='none';
      var key=(crypto.randomUUID?crypto.randomUUID():String(Date.now()));
      var m=(currentFile.name||'').match(/\\.[a-z0-9]+$/i); key+= m? m[0] : '.mp3';

      var signed=await fetch('/sign-put',{method:'POST',headers:{'content-type':'application/json'},body:JSON.stringify({key})}).then(r=>r.json());
      if(!signed.url) throw new Error('Không tạo được URL upload');

      // Update step 1: Upload
      updateProcessingStep('step-upload', 'active', 'Đang upload file lên R2...');
      setState('Đang upload lên R2...');
      
      await new Promise((res,rej)=>{
        var xhr=new XMLHttpRequest(); uploadXhr=xhr;
        xhr.open('PUT', signed.url, true);
        xhr.upload.onprogress=e=>{ 
          if(e.lengthComputable) {
            setProgress(e.loaded/e.total);
            const percent = Math.round((e.loaded/e.total) * 100);
            updateProcessingStep('step-upload', 'active', 'Đang upload... ' + percent + '%');
          }
        };
        xhr.onload=function(){ 
          uploadXhr=null; 
          if(xhr.status>=200 && xhr.status<300) {
            updateProcessingStep('step-upload', 'completed', 'Upload hoàn tất ✓');
            res();
          } else {
            updateProcessingStep('step-upload', 'error', 'Upload thất bại!');
            rej(new Error('Upload failed: '+xhr.status));
          }
        };
        xhr.onerror=function(){ 
          uploadXhr=null; 
          updateProcessingStep('step-upload', 'error', 'Lỗi kết nối!');
          rej(new Error('Upload error')); 
        };
        xhr.onabort=function(){ 
          uploadXhr=null; 
          updateProcessingStep('step-upload', 'error', 'Đã hủy!');
          rej(new Error('Upload aborted')); 
        };
        xhr.send(currentFile);
      });

      // Update step 2: Deepgram
      updateProcessingStep('step-deepgram', 'active', 'Đang chuyển đổi giọng nói sang văn bản...');
      setState('Đang xử lý...'); spin.style.display='inline-block'; out.value='Đang xử lý...';
      
      var ac=new AbortController(); transcribeAbort=ac;
      const templateType = templateSelect ? templateSelect.value : 'mom';
      const aiModel = aiModelSelect ? aiModelSelect.value : 'grok4';
      
      var result=await fetch('/transcribe',{method:'POST',headers:{'content-type':'application/json'},body:JSON.stringify({key, templateType, aiModel}),signal:ac.signal}).then(r=>r.json()).catch(()=>({ok:false}));
      transcribeAbort=null; spin.style.display='none';

      if(result.ok && result.llmJson){
        // Update step 2 completed
        updateProcessingStep('step-deepgram', 'completed', 'Deepgram hoàn tất ✓');
        
        // Update step 3: AI Processing
        updateProcessingStep('step-ai', 'active', 'AI đang phân tích nội dung...');
        
        // Simulate AI processing time for better UX
        await new Promise(resolve => setTimeout(resolve, 500));
        
        updateProcessingStep('step-ai', 'completed', 'Hoàn tất phân tích AI ✓');
        
        lastLLMJson=result.llmJson; lastTranscriptUrl=result.transcriptUrl||null; lastGrokResponse=result.grokResponse||null; lastPreviewHtml=result.previewHtml||null;
        const aiModelName = result.aiModel === 'gemini2.5pro' ? 'Gemini 2.5 Pro' : (result.aiModel === 'gpt5nano' ? 'GPT-5 Nano' : (result.aiModel === 'GPT Model' ? 'GPT Model' : 'Grok 4'));
        
        let outputLines = [
          '✅ Hoàn tất!',
          '- Deepgram: OK',
          '- Lưu transcript lên R2: OK',
          '- ' + aiModelName + ': OK'
        ];
        
        // Add fallback notification if used
        if (result.fallbackUsed && result.fallbackReason) {
          outputLines.push('');
          outputLines.push('⚠ ' + result.fallbackReason);
        }
        
        outputLines.push('');
        outputLines.push('Transcript URL: '+(result.transcriptUrl||'(n/a)'));
        
        out.value = outputLines.join('\\n');
        logJson({steps:result.steps, llmJson:result.llmJson, fallbackUsed: result.fallbackUsed});
        if (lastLLMJson) updateDataDisplay(lastLLMJson);
        setState('Xong — có thể tạo page Confluence'); btnCreate.disabled=false;
        
        // Enable step 3 navigation
        const step2NextBtn = $('step2NextBtn');
        if (step2NextBtn) step2NextBtn.disabled = false;
      } else {
        // Handle errors
        const failedStep = result.step || 'unknown';
        if (failedStep.includes('deepgram') || failedStep.includes('transcript')) {
          updateProcessingStep('step-deepgram', 'error', 'Deepgram thất bại!');
        } else if (failedStep.includes('grok') || failedStep.includes('ai') || failedStep.includes('llm')) {
          updateProcessingStep('step-deepgram', 'completed', 'Deepgram hoàn tất ✓');
          updateProcessingStep('step-ai', 'error', 'AI processing thất bại!');
        }
        
        setState('Xử lý audio thất bại');
        out.value = '❌ Lỗi xử lý audio\\n- Bước lỗi: '+failedStep+'\\n- Thông báo: '+(result.error||'Unknown')+'\\n\\nChi tiết steps:\\n'+JSON.stringify(result.steps||{},null,2);
        btnCreate.disabled=true;
      }
    }catch(e){ 
      spin.style.display='none'; 
      setState('Lỗi'); 
      logJson({ error:String(e) });
      
      // Update UI to show error
      updateProcessingStep('step-upload', 'error', 'Lỗi: ' + String(e).substring(0, 30));
    }
  });
  $('btnCreate').addEventListener('click', async function(){
    if(!lastLLMJson){ alert('Chưa có dữ liệu để tạo page.'); return; }

    // TRƯỚC KHI GỌI API: Cập nhật dữ liệu từ bảng
    extractFromTables();

    const strategy = modeManual.checked ? 'manual' : 'autonumber';
    const titleVal = modeManual.checked ? (pageTitleEl.value || '').trim() : '';
    const spaceKey = spaceSelect ? spaceSelect.value : 'AIG';
    const parentId = parentIdInput ? parentIdInput.value.trim() : '';
    const template = templateSelect ? templateSelect.value : 'mom';

    if (strategy === 'manual' && !titleVal) { alert('Vui lòng nhập tiêu đề Confluence page'); return; }

    try{
      setState('Đang tạo page Confluence...'); spin.style.display='inline-block';

      // Thu thập dữ liệu từ 2 bảng -> cập nhật window.lastLLMJson
extractFromTables();
// Để server tự build Confluence Storage Format từ llmJson
const storageHtml = null;

const attendeeIds = (ocrJiraIds && ocrJiraIds.value)
  ? ocrJiraIds.value.split(/[\s;,]+/).map(s=>s.trim()).filter(Boolean)
  : [];

const createRes = await fetch('/create-confluence', {
        method:'POST',
        headers:{'content-type':'application/json'},
        body: JSON.stringify({
          llmJson: window.lastLLMJson,
          transcriptUrl: lastTranscriptUrl,
          titleStrategy: strategy,
          title: titleVal,
          spaceKey: spaceKey,
          parentId: parentId || null,
          template: template,
          storageHtml: storageHtml, // Gửi HTML đã tạo
          attendeeIds: attendeeIds
        })
      });
      const resp = await createRes.json();

      spin.style.display='none';
      if(resp.ok){
        setState('Đã tạo page');
        out.value += '\\n\\nConfluence page: ' + (resp.pageUrl||'(đã tạo)') + (resp.title ? ('\\nTiêu đề: ' + resp.title) : '');
        if (resp.pageUrl) {
          lastPageUrl = resp.pageUrl;
          $('pageLink').href = resp.pageUrl;
          $('pageLinkContainer').style.display = 'block';
        }
      }
      else{ setState('Tạo page thất bại'); out.value += '\\n\\n❌ ' + (resp.error||'Confluence error'); }
    }catch(e){ spin.style.display='none'; setState('Lỗi'); out.value += '\\n\\n❌ ' + String(e); }
  });



  // Make functions available globally
  window.extractFromTables = extractFromTables;
  window.addEditIconListeners = addEditIconListeners;
  window.loadStructuredSpaces = loadStructuredSpaces;
  window.analyzeConfluencePage = analyzeConfluencePage;
  window.clearAnalysisResults = clearAnalysisResults;

  // Popup Editor functionality
  const popupOverlay = document.getElementById('popupOverlay');
  const popupTitle = document.getElementById('popupTitle');
  const popupTextarea = document.getElementById('popupTextarea');
  const popupClose = document.getElementById('popupClose');
  const popupCancel = document.getElementById('popupCancel');
  const popupSave = document.getElementById('popupSave');

  let currentInput = null;
  let currentType = null;

  // Open popup editor
  function openPopupEditor(input, type, title) {
    currentInput = input;
    currentType = type;
    popupTitle.textContent = title;
    popupTextarea.value = input.value;
    popupOverlay.style.display = 'flex';
    popupTextarea.focus();
  }

  // Close popup editor
  function closePopupEditor() {
    popupOverlay.style.display = 'none';
    currentInput = null;
    currentType = null;
  }

  // Save popup editor
  function savePopupEditor() {
    if (currentInput) {
      currentInput.value = popupTextarea.value;
    }
    closePopupEditor();
  }

  // Event listeners for popup
  popupClose.addEventListener('click', closePopupEditor);
  popupCancel.addEventListener('click', closePopupEditor);
  popupSave.addEventListener('click', savePopupEditor);

  // Close popup when clicking overlay
  popupOverlay.addEventListener('click', function(e) {
    if (e.target === popupOverlay) {
      closePopupEditor();
    }
  });

  // Close popup with Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && popupOverlay.style.display === 'flex') {
      closePopupEditor();
    }
  });

  // Add event listeners to edit icons
  function addEditIconListeners() {
    document.querySelectorAll('.edit-icon').forEach(icon => {
      // Remove existing listener to avoid duplicates
      icon.removeEventListener('click', handleEditIconClick);
      icon.addEventListener('click', handleEditIconClick);
    });
  }

  function handleEditIconClick() {
    const input = this.parentElement.querySelector('.table-input');
    const isContent = this.title.includes('nội dung');
    const type = isContent ? 'content' : 'note';
    const title = isContent ? 'Chỉnh sửa nội dung' : 'Chỉnh sửa ghi chú';
    openPopupEditor(input, type, title);
  }

  // Initialize edit icon listeners
  addEditIconListeners();

  // Re-add listeners when new rows are added
  const originalAddTableRow = addTableRow;
  function addTableRowWithListeners(tableId) {
    originalAddTableRow(tableId);
    window.addEditIconListeners();
  }

  // Override the global addTableRow function
  window.addTableRow = addTableRowWithListeners;
  
  // Auto-update button state when table content changes
  document.addEventListener('input', function(e) {
    if (e.target.matches('#progressTable input, #progressTable textarea, #progressTable select, #riskTable input, #riskTable textarea, #riskTable select, #discussionTable input, #discussionTable textarea, #actionTable input, #actionTable textarea')) {
      // Delay extraction to allow UI to update
      setTimeout(() => {
        extractFromTables();
      }, 100);
    }
  });
  
  // Also trigger on change events for select elements
  document.addEventListener('change', function(e) {
    if (e.target.matches('#progressTable select, #riskTable select')) {
      setTimeout(() => {
        extractFromTables();
      }, 100);
    }
  });

  // ===== AI STRUCTURED INSIGHT FUNCTIONALITY =====
  let structuredAnalysisData = [];
  let structuredParticipantsList = []; // Store participants from page
  let structuredCurrentTicketIndex = null;
  let structuredTicketButton = null;
  let structuredTicketProjectKey = '';
  
  // Load spaces for structured insight (reuse existing logic)
  async function loadStructuredSpaces() {
    const structuredSpaceSelect = document.getElementById('structuredSpaceSelect');
    if (!structuredSpaceSelect) return;

    try {
      const response = await fetch('/api/confluence-spaces');
      if (!response.ok) {
        throw new Error('Failed to load spaces');
      }

      const data = await response.json();
      structuredSpaceSelect.innerHTML = '';

      if (data.ok && data.spaces && Array.isArray(data.spaces)) {
        if (data.spaces.length === 0) {
          structuredSpaceSelect.innerHTML = '<option value="">No spaces found</option>';
        } else {
          structuredSpaceSelect.innerHTML = '<option value="">-- Chọn dự án --</option>';
          data.spaces.forEach(space => {
            const option = document.createElement('option');
            // Use currentActiveAlias for value (URL-friendly for creating pages)
            option.value = space.currentActiveAlias || space.key;
            option.textContent = (space.currentActiveAlias || space.key) + ' - ' + space.name;
            structuredSpaceSelect.appendChild(option);
          });
        }
      } else {
        throw new Error('Invalid response format');
      }
    } catch (error) {
      console.error('Error loading spaces for structured insight:', error);
      structuredSpaceSelect.innerHTML = '<option value="">Lỗi tải dự án</option>';
    }
  }

  // Initialize structured insight functionality
  function initStructuredInsight() {
    const structuredPageId = document.getElementById('structuredPageId');
    const btnAnalyzePage = document.getElementById('btnAnalyzePage');
    const btnClearAnalysis = document.getElementById('btnClearAnalysis');
    const structuredSpaceSelect = document.getElementById('structuredSpaceSelect');

    if (!structuredPageId || !btnAnalyzePage) return;

    // Enable/disable analyze button based on input
    function validateInput() {
      const hasPageId = structuredPageId.value.trim().length > 0;
      const hasSpace = structuredSpaceSelect && structuredSpaceSelect.value.trim().length > 0;
      btnAnalyzePage.disabled = !(hasPageId && hasSpace);
    }

    // Event listeners
    if (structuredPageId) {
      structuredPageId.addEventListener('input', validateInput);
    }
    if (structuredSpaceSelect) {
      structuredSpaceSelect.addEventListener('change', validateInput);
    }

    // Analyze page button
    if (btnAnalyzePage) {
      btnAnalyzePage.addEventListener('click', async () => {
        await analyzeConfluencePage();
      });
    }

    // Clear analysis button
    if (btnClearAnalysis) {
      btnClearAnalysis.addEventListener('click', () => {
        clearAnalysisResults();
      });
    }

    // Load spaces when tab becomes active
    loadStructuredSpaces();
  }

  // Main analysis function
  async function analyzeConfluencePage() {
    const structuredPageId = document.getElementById('structuredPageId');
    const structuredSpaceSelect = document.getElementById('structuredSpaceSelect');
    const analysisStatus = document.getElementById('analysisStatus');
    const statusContent = document.getElementById('statusContent');
    const btnAnalyzePage = document.getElementById('btnAnalyzePage');

    if (!structuredPageId || !analysisStatus || !statusContent) return;

    const pageId = structuredPageId.value.trim();
    const spaceKey = structuredSpaceSelect ? structuredSpaceSelect.value : '';

    if (!pageId) {
      alert('Vui lòng nhập Page ID');
      return;
    }

    try {
      // Disable button and show status
      btnAnalyzePage.disabled = true;
      analysisStatus.style.display = 'block';
      statusContent.innerHTML = '<div style="color: #3b82f6;"><i class="fa-solid fa-spinner fa-spin"></i> Đang lấy nội dung từ Confluence...</div>';

      // Step 1: Get page content from Confluence
      const pageContent = await fetchConfluencePageContent(pageId);
      
      statusContent.innerHTML = '<div style="color: #10b981;"><i class="fa-solid fa-check"></i> Đã lấy nội dung Confluence</div>' +
                               '<div style="color: #3b82f6; margin-top: 8px;"><i class="fa-solid fa-spinner fa-spin"></i> Đang trích xuất participants...</div>';

      // Step 2: Extract participants from ADF content
      structuredParticipantsList = extractParticipantsFromContent(pageContent.value);
      console.log('Extracted participants:', structuredParticipantsList);
      
      statusContent.innerHTML = '<div style="color: #10b981;"><i class="fa-solid fa-check"></i> Đã lấy nội dung Confluence</div>' +
                               '<div style="color: #10b981;"><i class="fa-solid fa-check"></i> Đã trích xuất ' + structuredParticipantsList.length + ' participants</div>' +
                               '<div style="color: #3b82f6; margin-top: 8px;"><i class="fa-solid fa-spinner fa-spin"></i> Đang trích xuất Action Items với AI...</div>';

      // Step 3: Analyze with Grok AI (focus on Action Items only)
      const analysisResult = await analyzeWithGrok(pageContent.value);

      statusContent.innerHTML = '<div style="color: #10b981;"><i class="fa-solid fa-check"></i> Hoàn tất trích xuất Action Items!</div>' +
                               '<div style="color: #3b82f6; margin-top: 8px;"><i class="fa-solid fa-spinner fa-spin"></i> Đang tải thông tin người dùng...</div>';

      // Step 4: Display results
      await displayAnalysisResults(analysisResult);
      
      statusContent.innerHTML = '<div style="color: #10b981;"><i class="fa-solid fa-check"></i> Hoàn tất!</div>';

    } catch (error) {
      console.error('Analysis error:', error);
      statusContent.innerHTML = '<div style="color: #ef4444;"><i class="fa-solid fa-times"></i> Lỗi: ' + error.message + '</div>';
    } finally {
      btnAnalyzePage.disabled = false;
    }
  }

  // Fetch page content from Confluence API
  async function fetchConfluencePageContent(pageId) {
    const response = await fetch('/api/confluence-page-content', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ pageId })
    });

    if (!response.ok) {
      throw new Error('Không thể lấy nội dung page. Vui lòng kiểm tra Page ID và quyền truy cập.');
    }

    const result = await response.json();
    if (!result.ok) {
      throw new Error(result.error || 'Lỗi không xác định khi lấy nội dung page');
    }

    return result.content;
  }

  // Analyze content with Grok AI
  async function analyzeWithGrok(pageContent) {
    const response = await fetch('/api/structured-analysis', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ content: pageContent })
    });

    if (!response.ok) {
      throw new Error('Lỗi phân tích AI');
    }

    const result = await response.json();
    if (!result.ok) {
      throw new Error(result.error || 'Lỗi AI không xác định');
    }

    return result.analysis;
  }

  // Display analysis results in table
  async function displayAnalysisResults(analysisData) {
    const analysisResults = document.getElementById('analysisResults');
    const tableBody = document.querySelector('#structuredAnalysisTable tbody');
    const btnClearAnalysis = document.getElementById('btnClearAnalysis');

    if (!analysisResults || !tableBody) return;

    // Clear existing results
    tableBody.innerHTML = '';
    
    // Store analysis data globally
    structuredAnalysisData = analysisData || [];

    // Show results section
    analysisResults.style.display = 'block';
    if (btnClearAnalysis) btnClearAnalysis.style.display = 'inline-block';

    // Display participants table first
    await displayParticipantsTable();

    // Populate table with analysis results
    if (analysisData && Array.isArray(analysisData)) {
      // Process all items to fetch displayNames
      for (let index = 0; index < analysisData.length; index++) {
        const item = analysisData[index];
        // Process assignee: convert accountId to displayName for display
        let assigneeDisplay = item.assignee || 'Chưa giao';
        let assigneeAccountId = null;
        
        if (item.assignee && item.assignee !== 'Chưa giao') {
          const assigneeValue = item.assignee.trim();
          // Check if it's an accountId format
          const isAccountId = /^[0-9a-f]{24}$/i.test(assigneeValue) || 
                              /^\d+:[a-f0-9-]{36}$/i.test(assigneeValue) || 
                              /^[a-zA-Z0-9_-]+:[a-f0-9-]{36}$/i.test(assigneeValue);
          
          if (isAccountId) {
            // It's an accountId, fetch displayName from API
            assigneeAccountId = assigneeValue;
            
            // Try to get from cache first
            let displayName = getDisplayNameFromAccountId(assigneeValue);
            
            // If not in cache, fetch from API
            if (!displayName) {
              const userInfo = await getUserInfoFromAccountId(assigneeValue);
              if (userInfo && userInfo.displayName) {
                displayName = userInfo.displayName;
              }
            }
            
            assigneeDisplay = displayName || assigneeValue; // Fallback to accountId if API fails
          } else {
            // It's already a displayName
            assigneeDisplay = assigneeValue;
            assigneeAccountId = assigneeValue; // Use as-is, might not be valid accountId
          }
        }
        
        // Store both accountId and displayName in the item
        item.assigneeAccountId = assigneeAccountId;
        item.assigneeDisplayName = assigneeDisplay;
        
        const row = tableBody.insertRow();
        row.innerHTML = 
          '<td style="text-align: center; font-weight: 600; color: #64748b;">' + (index + 1) + '</td>' +
          '<td class="editable-content-cell" style="cursor: pointer; position: relative;">' +
            '<div class="content-text" style="max-width: 350px; word-wrap: break-word; white-space: pre-wrap; line-height: 1.5; padding: 10px 12px; border-radius: 6px; transition: all 0.2s; background: #f8fafc; border: 1px solid #e2e8f0;" ' +
                 'title="Double-click để chỉnh sửa">' + 
            escapeHtml(item.content || '') + 
            '</div>' +
            '<textarea class="content-input" style="display: none; width: 100%; min-height: 80px; padding: 10px; border: 2px solid #10b981; border-radius: 6px; font-size: 14px; font-family: inherit; resize: vertical; box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);">' +
            escapeHtml(item.content || '') +
            '</textarea>' +
          '</td>' +
          '<td class="editable-deadline-cell" style="text-align: center; cursor: pointer; position: relative;" title="Click để chọn ngày">' + 
            '<div class="deadline-text" style="' + (item.deadline ? 'background: #e0f2fe; color: #0277bd; padding: 6px 10px; border-radius: 6px; font-weight: 500; display: inline-block; min-width: 100px;' : 'color: #9ca3af; font-style: italic; padding: 6px 10px;') + '">' +
            (item.deadline ? escapeHtml(item.deadline) : 'Chưa có') + 
            '</div>' +
            '<input type="date" class="deadline-input" style="display: none; padding: 6px; border: 2px solid #10b981; border-radius: 6px; font-size: 13px; box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);" value="' + escapeHtml(item.deadline || '') + '">' +
          '</td>' +
          '<td class="editable-assignee-cell" style="text-align: center; cursor: pointer; position: relative;" title="Click để chọn người phụ trách">' + 
            '<div class="assignee-text" style="max-width: 140px; word-wrap: break-word; margin: 0 auto; ' + (assigneeDisplay !== 'Chưa giao' ? 'background: #f3e5f5; color: #7b1fa2; padding: 6px 10px; border-radius: 6px; font-weight: 500; font-size: 12px;' : 'color: #9e9e9e; font-style: italic; padding: 6px 10px;') + '">' +
            escapeHtml(assigneeDisplay) + 
            '</div>' +
            '<select class="assignee-select" style="display: none; width: 100%; padding: 6px; border: 2px solid #10b981; border-radius: 6px; font-size: 12px; box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);">' +
              '<option value="">-- Chọn người --</option>' +
            '</select>' +
          '</td>' +
          '<td class="editable-notes-cell" style="cursor: pointer; position: relative;">' +
            '<div class="notes-text" style="max-width: 250px; word-wrap: break-word; white-space: pre-wrap; font-size: 13px; color: #64748b; line-height: 1.5; padding: 10px 12px; border-radius: 6px; transition: all 0.2s; background: #f8fafc; border: 1px solid #e2e8f0;" title="Double-click để chỉnh sửa">' + 
            escapeHtml(item.notes || '-') + 
            '</div>' +
            '<textarea class="notes-input" style="display: none; width: 100%; min-height: 60px; padding: 10px; border: 2px solid #10b981; border-radius: 6px; font-size: 13px; font-family: inherit; resize: vertical; box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);">' +
            escapeHtml(item.notes || '') +
            '</textarea>' +
          '</td>' +
          '<td style="text-align: center;">' +
            '<button class="btn-icon structured-create-jira-ticket" title="Tạo Jira ticket" data-index="' + index + '" style="background: #0052cc; color: white; border: none; padding: 8px 10px; border-radius: 6px; cursor: pointer; transition: all 0.2s; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);">' +
              '<i class="fa-brands fa-jira"></i>' +
            '</button>' +
          '</td>';
        
        // === CONTENT CELL - Double-click to edit ===
        const contentCell = row.querySelector('.editable-content-cell');
        const contentText = contentCell.querySelector('.content-text');
        const contentInput = contentCell.querySelector('.content-input');
        
        // Double-click to edit
        contentText.addEventListener('dblclick', function(e) {
          e.stopPropagation();
          contentText.style.display = 'none';
          contentInput.style.display = 'block';
          contentInput.focus();
          contentInput.select();
        });
        
        // Hover effect
        contentText.addEventListener('mouseenter', function() {
          contentText.style.background = '#ecfdf5';
          contentText.style.borderColor = '#10b981';
          contentText.style.boxShadow = '0 0 0 3px rgba(16, 185, 129, 0.1)';
        });
        
        contentText.addEventListener('mouseleave', function() {
          contentText.style.background = '#f8fafc';
          contentText.style.borderColor = '#e2e8f0';
          contentText.style.boxShadow = '';
        });
        
        // Save on blur
        contentInput.addEventListener('blur', function() {
          const newValue = contentInput.value.trim();
          contentText.textContent = newValue || '(Trống)';
          contentText.style.display = 'block';
          contentInput.style.display = 'none';
          
          // Update the original data
          if (structuredAnalysisData[index]) {
            structuredAnalysisData[index].content = newValue;
          }
        });
        
        // Save on Ctrl+Enter, Cancel on Escape
        contentInput.addEventListener('keydown', function(e) {
          if (e.ctrlKey && e.key === 'Enter') {
            contentInput.blur();
          }
          if (e.key === 'Escape') {
            contentInput.value = item.content || '';
            contentInput.blur();
          }
        });
        
        // === DEADLINE CELL - Click to edit ===
        const deadlineCell = row.querySelector('.editable-deadline-cell');
        const deadlineText = deadlineCell.querySelector('.deadline-text');
        const deadlineInput = deadlineCell.querySelector('.deadline-input');
        
        // Click to show date picker
        deadlineText.addEventListener('click', function(e) {
          e.stopPropagation();
          deadlineText.style.display = 'none';
          deadlineInput.style.display = 'inline-block';
          deadlineInput.focus();
        });
        
        // Hover effect for deadline
        deadlineText.addEventListener('mouseenter', function() {
          deadlineText.style.boxShadow = '0 0 0 3px rgba(16, 185, 129, 0.1)';
        });
        
        deadlineText.addEventListener('mouseleave', function() {
          deadlineText.style.boxShadow = '';
        });
        
        // Save deadline on change or blur
        deadlineInput.addEventListener('blur', function() {
          const newValue = deadlineInput.value.trim();
          deadlineText.textContent = newValue || 'Chưa có';
          if (newValue) {
            deadlineText.style.background = '#e0f2fe';
            deadlineText.style.color = '#0277bd';
            deadlineText.style.fontWeight = '500';
          } else {
            deadlineText.style.background = '';
            deadlineText.style.color = '#9ca3af';
            deadlineText.style.fontStyle = 'italic';
          }
          deadlineText.style.display = 'inline-block';
          deadlineInput.style.display = 'none';
          
          // Update the original data
          if (structuredAnalysisData[index]) {
            structuredAnalysisData[index].deadline = newValue;
          }
        });
        
        deadlineInput.addEventListener('change', function() {
          deadlineInput.blur();
        });
        
        // === NOTES CELL - Double-click to edit ===
        const notesCell = row.querySelector('.editable-notes-cell');
        const notesText = notesCell.querySelector('.notes-text');
        const notesInput = notesCell.querySelector('.notes-input');
        
        // Double-click to edit
        notesText.addEventListener('dblclick', function(e) {
          e.stopPropagation();
          notesText.style.display = 'none';
          notesInput.style.display = 'block';
          notesInput.focus();
          notesInput.select();
        });
        
        // Hover effect
        notesText.addEventListener('mouseenter', function() {
          notesText.style.background = '#ecfdf5';
          notesText.style.borderColor = '#10b981';
          notesText.style.boxShadow = '0 0 0 3px rgba(16, 185, 129, 0.1)';
        });
        
        notesText.addEventListener('mouseleave', function() {
          notesText.style.background = '#f8fafc';
          notesText.style.borderColor = '#e2e8f0';
          notesText.style.boxShadow = '';
        });
        
        // Save on blur
        notesInput.addEventListener('blur', function() {
          const newValue = notesInput.value.trim();
          notesText.textContent = newValue || '-';
          notesText.style.display = 'block';
          notesInput.style.display = 'none';
          
          // Update the original data
          if (structuredAnalysisData[index]) {
            structuredAnalysisData[index].notes = newValue;
          }
        });
        
        // Save on Ctrl+Enter, Cancel on Escape
        notesInput.addEventListener('keydown', function(e) {
          if (e.ctrlKey && e.key === 'Enter') {
            notesInput.blur();
          }
          if (e.key === 'Escape') {
            notesInput.value = item.notes || '';
            notesInput.blur();
          }
        });
        
        // === ASSIGNEE CELL - Click to select from dropdown ===
        const assigneeCell = row.querySelector('.editable-assignee-cell');
        const assigneeText = assigneeCell.querySelector('.assignee-text');
        const assigneeSelect = assigneeCell.querySelector('.assignee-select');
        
        // Populate dropdown with participants
        if (structuredParticipantsList && structuredParticipantsList.length > 0) {
          structuredParticipantsList.forEach(participant => {
            const option = document.createElement('option');
            option.value = participant.accountId;
            option.textContent = participant.displayName || participant.accountId;
            // Select current assignee if matches
            if (item.assigneeAccountId === participant.accountId || 
                item.assigneeDisplayName === participant.displayName) {
              option.selected = true;
            }
            assigneeSelect.appendChild(option);
          });
        }
        
        // Click to show dropdown
        assigneeText.addEventListener('click', function(e) {
          e.stopPropagation();
          assigneeText.style.display = 'none';
          assigneeSelect.style.display = 'block';
          assigneeSelect.focus();
        });
        
        // Hover effect for assignee
        assigneeText.addEventListener('mouseenter', function() {
          assigneeText.style.boxShadow = '0 0 0 3px rgba(16, 185, 129, 0.1)';
        });
        
        assigneeText.addEventListener('mouseleave', function() {
          assigneeText.style.boxShadow = '';
        });
        
        // Update value on selection change
        assigneeSelect.addEventListener('change', function() {
          const selectedAccountId = assigneeSelect.value;
          
          if (selectedAccountId) {
            // Find participant by accountId
            const participant = structuredParticipantsList.find(p => p.accountId === selectedAccountId);
            const newDisplayName = participant ? participant.displayName : selectedAccountId;
            
            // Update display
            assigneeText.textContent = newDisplayName;
            assigneeText.style.background = '#f3e5f5';
            assigneeText.style.color = '#7b1fa2';
            assigneeText.style.fontWeight = '500';
            assigneeText.style.fontStyle = 'normal';
            
            // Update data
            if (structuredAnalysisData[index]) {
              structuredAnalysisData[index].assignee = newDisplayName;
              structuredAnalysisData[index].assigneeAccountId = selectedAccountId;
              structuredAnalysisData[index].assigneeDisplayName = newDisplayName;
            }
          } else {
            // Empty selection
            assigneeText.textContent = 'Chưa giao';
            assigneeText.style.background = '';
            assigneeText.style.color = '#9e9e9e';
            assigneeText.style.fontStyle = 'italic';
            assigneeText.style.fontWeight = 'normal';
            
            if (structuredAnalysisData[index]) {
              structuredAnalysisData[index].assignee = 'Chưa giao';
              structuredAnalysisData[index].assigneeAccountId = null;
              structuredAnalysisData[index].assigneeDisplayName = 'Chưa giao';
            }
          }
          
          // Hide dropdown, show text
          assigneeText.style.display = 'block';
          assigneeSelect.style.display = 'none';
        });
        
        // Hide dropdown on blur without changing if no selection made
        assigneeSelect.addEventListener('blur', function() {
          assigneeText.style.display = 'block';
          assigneeSelect.style.display = 'none';
        });
      }
      
      // Attach click handlers to Jira buttons after rows are added
      attachStructuredJiraButtonHandlers();
    } else {
      // Show empty state
      tableBody.innerHTML = '<tr><td colspan="6" style="text-align: center; color: var(--muted); padding: 20px;">Không tìm thấy Action Items nào trong page này</td></tr>';
    }
  }

  // Display participants table
  async function displayParticipantsTable() {
    const participantsTableBody = document.querySelector('#participantsTable tbody');
    const participantsCount = document.getElementById('participantsCount');
    
    if (!participantsTableBody) return;
    
    // Clear existing content
    participantsTableBody.innerHTML = '';
    
    if (!structuredParticipantsList || structuredParticipantsList.length === 0) {
      participantsTableBody.innerHTML = '<tr><td colspan="3" style="text-align: center; color: var(--muted); padding: 20px;">Không tìm thấy thành phần tham dự trong page này</td></tr>';
      if (participantsCount) participantsCount.textContent = '(0)';
      return;
    }
    
    // Update counter
    if (participantsCount) {
      participantsCount.textContent = '(' + structuredParticipantsList.length + ')';
    }
    
    // Populate table with participants
    for (let index = 0; index < structuredParticipantsList.length; index++) {
      const participant = structuredParticipantsList[index];
      
      // Try to get displayName from API if not available
      let displayName = participant.displayName;
      if (!displayName || displayName === participant.accountId) {
        // Try to fetch from API
        const userInfo = await getUserInfoFromAccountId(participant.accountId);
        if (userInfo && userInfo.displayName) {
          displayName = userInfo.displayName;
          // Update the cached value
          participant.displayName = displayName;
        }
      }
      
      const row = participantsTableBody.insertRow();
      row.innerHTML = 
        '<td style="text-align: center; font-weight: 600; color: #64748b;">' + (index + 1) + '</td>' +
        '<td style="padding: 12px;">' +
          '<div style="display: flex; align-items: center; gap: 8px;">' +
            '<i class="fa-solid fa-user" style="color: #10b981;"></i>' +
            '<span style="font-weight: 500;">' + escapeHtml(displayName) + '</span>' +
          '</div>' +
        '</td>' +
        '<td style="padding: 12px; font-family: monospace; font-size: 12px; color: #64748b;">' + escapeHtml(participant.accountId) + '</td>';
    }
    
    // Setup toggle handler (only once)
    setupParticipantsToggle();
  }
  
  // Setup toggle handler for participants section
  function setupParticipantsToggle() {
    const participantsHeader = document.getElementById('participantsHeader');
    const participantsTableContainer = document.getElementById('participantsTableContainer');
    const toggleIcon = document.getElementById('participantsToggleIcon');
    
    if (!participantsHeader || !participantsTableContainer || !toggleIcon) return;
    
    // Remove existing handler to avoid duplicates
    participantsHeader.onclick = null;
    
    // Add click handler
    participantsHeader.onclick = function(e) {
      e.preventDefault();
      const isHidden = participantsTableContainer.style.display === 'none';
      
      if (isHidden) {
        // Expand
        participantsTableContainer.style.display = 'block';
        toggleIcon.style.transform = 'rotate(90deg)';
        toggleIcon.className = 'fa-solid fa-chevron-down';
      } else {
        // Collapse
        participantsTableContainer.style.display = 'none';
        toggleIcon.style.transform = 'rotate(0deg)';
        toggleIcon.className = 'fa-solid fa-chevron-right';
      }
    };
  }

  // Extract participants from ADF content
  function extractParticipantsFromContent(adfContent) {
    const participants = [];
    
    if (!adfContent) return participants;
    
    try {
      // Parse ADF if it's JSON string
      let adfData;
      if (typeof adfContent === 'string') {
        try {
          adfData = JSON.parse(adfContent);
        } catch (e) {
          console.error('Failed to parse ADF string:', e);
          return participants;
        }
      } else if (typeof adfContent === 'object') {
        adfData = adfContent;
      } else {
        return participants;
      }
      
      // Recursively search for mentions
      function searchForMentions(node) {
        if (!node || typeof node !== 'object') return;
        
        // Check if this node is a mention
        if (node.type === 'mention' && node.attrs && node.attrs.id) {
          const accountId = node.attrs.id;
          const displayName = node.attrs.text || accountId;
          
          // Avoid duplicates
          if (!participants.find(p => p.accountId === accountId)) {
            participants.push({
              accountId: accountId,
              displayName: displayName
            });
          }
        }
        
        // Recursively search in content array
        if (Array.isArray(node.content)) {
          node.content.forEach(child => searchForMentions(child));
        }
        
        // Search in other potential arrays
        for (const key in node) {
          if (Array.isArray(node[key])) {
            node[key].forEach(child => searchForMentions(child));
          } else if (typeof node[key] === 'object') {
            searchForMentions(node[key]);
          }
        }
      }
      
      // Start recursive search
      searchForMentions(adfData);
      
    } catch (error) {
      console.error('Error extracting participants:', error);
    }
    
    return participants;
  }

  // Clear analysis results
  function clearAnalysisResults() {
    const analysisResults = document.getElementById('analysisResults');
    const analysisStatus = document.getElementById('analysisStatus');
    const btnClearAnalysis = document.getElementById('btnClearAnalysis');

    if (analysisResults) analysisResults.style.display = 'none';
    if (analysisStatus) analysisStatus.style.display = 'none';
    if (btnClearAnalysis) btnClearAnalysis.style.display = 'none';
  }

  // Helper function to escape HTML
  function escapeHtml(text) {
    const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
    return String(text).replace(/[&<>"']/g, m => map[m]);
  }

  // Initialize structured insight when DOM is ready
  initStructuredInsight();
  
  // Attach click handlers to Jira buttons in Structured Insight table
  function attachStructuredJiraButtonHandlers() {
    const jiraButtons = document.querySelectorAll('.structured-create-jira-ticket');
    jiraButtons.forEach(button => {
      button.addEventListener('click', async function() {
        const index = parseInt(this.getAttribute('data-index'));
        structuredCurrentTicketIndex = index;
        structuredTicketButton = this;
        
        // Get project key from structured space select
        const structuredSpaceSelect = document.getElementById('structuredSpaceSelect');
        structuredTicketProjectKey = structuredSpaceSelect ? structuredSpaceSelect.value : '';
        
        if (!structuredTicketProjectKey) {
          alert('Vui lòng chọn dự án trước khi tạo ticket!');
          return;
        }
        
        await openStructuredJiraPopup(index);
      });
    });
  }
  
  // Open Jira popup for Structured Insight ticket
  async function openStructuredJiraPopup(index) {
    if (!structuredAnalysisData || !structuredAnalysisData[index]) {
      alert('Lỗi: Không tìm thấy dữ liệu action item!');
      return;
    }
    
    const item = structuredAnalysisData[index];
    
    // Populate form with item data
    document.getElementById('jiraSummary').value = item.content || 'New Task';
    document.getElementById('jiraDescription').value = item.notes || item.content || '';
    document.getElementById('jiraDueDate').value = item.deadline || '';
    document.getElementById('jiraAssignee').value = item.assignee || 'Chưa chọn';
    document.getElementById('jiraProjectKey').value = structuredTicketProjectKey;
    document.getElementById('jiraParentKey').value = '';
    
    // Reset issue type to Task
    document.getElementById('jiraIssueType').value = 'Task';
    
    // Load components dropdown
    try {
      await loadComponentsDropdown(structuredTicketProjectKey);
    } catch (error) {
      console.error('Error loading components in structured popup:', error);
    }
    
    // Show popup
    document.getElementById('jiraPopup').style.display = 'flex';
  }

  // ===== Structured bulk creation popup =====
  const structuredBulkPopup = document.getElementById('structuredBulkPopup');
  const structuredBulkList = document.getElementById('structuredBulkList');
  const structuredBulkStatus = document.getElementById('structuredBulkStatus');
  const structuredBulkCreateBtn = document.getElementById('structuredBulkCreateBtn');
  const structuredBulkCloseBtn = document.getElementById('structuredBulkClose');
  const structuredBulkCancelBtn = document.getElementById('structuredBulkCancel');
  const structuredBulkOpenBtn = document.getElementById('btnCreateJiraFromStructured');

  if (structuredBulkOpenBtn && structuredBulkPopup) {
    structuredBulkOpenBtn.addEventListener('click', openStructuredBulkPopup);
  }
  if (structuredBulkCloseBtn && structuredBulkPopup) {
    structuredBulkCloseBtn.addEventListener('click', closeStructuredBulkPopup);
  }
  if (structuredBulkCancelBtn && structuredBulkPopup) {
    structuredBulkCancelBtn.addEventListener('click', closeStructuredBulkPopup);
  }
  if (structuredBulkCreateBtn && structuredBulkPopup) {
    structuredBulkCreateBtn.addEventListener('click', handleStructuredBulkCreate);
  }

  function openStructuredBulkPopup() {
    if (!structuredAnalysisData || !structuredAnalysisData.length) {
      alert('Không có Action Items để tạo tickets!');
      return;
    }

    const structuredSpaceSelect = document.getElementById('structuredSpaceSelect');
    const projectKey = structuredSpaceSelect ? structuredSpaceSelect.value.trim() : '';

    if (!projectKey) {
      alert('Vui lòng chọn dự án trước khi tạo ticket!');
      return;
    }

    renderStructuredBulkList();

    if (structuredBulkStatus) {
      structuredBulkStatus.style.display = 'none';
      structuredBulkStatus.textContent = '';
      structuredBulkStatus.style.color = '#334155';
    }

    structuredBulkPopup.style.display = 'flex';
    populateStructuredBulkComponents(projectKey);
  }

  function closeStructuredBulkPopup() {
    if (structuredBulkPopup) {
      structuredBulkPopup.style.display = 'none';
    }
  }

  function renderStructuredBulkList() {
    if (!structuredBulkList) return;

    if (!structuredAnalysisData || !structuredAnalysisData.length) {
      structuredBulkList.innerHTML = '<div class="structured-bulk-empty">Không có Action Items để tạo ticket.</div>';
      return;
    }

    let html = '<div class="structured-bulk-cards">';

    structuredAnalysisData.forEach((item, index) => {
      const summary = escapeHtml(item.content || 'Không có nội dung');
      const deadlineDisplay = item.deadline ? escapeHtml(item.deadline) : 'Chưa có deadline';
      const assigneeDisplay = escapeHtml(item.assigneeDisplayName || item.assignee || 'Chưa giao');
      const rawNotes = item.notes || '';
      const trimmedNotes = rawNotes.trim();
      const hasNotes = trimmedNotes.length > 0;
      const notesText = hasNotes
        ? escapeHtml(trimmedNotes.length > 70 ? trimmedNotes.slice(0, 67) + '…' : trimmedNotes)
        : '';

      html += '<div class="structured-bulk-card" data-ticket-index="' + index + '">' +
        '<div class="structured-bulk-header">' +
          '<span class="structured-bulk-number">' + (index + 1) + '</span>' +
          '<div>' +
            '<div class="structured-bulk-summary">' + summary + '</div>' +
            '<div class="structured-bulk-meta">' +
              '<span class="structured-bulk-chip deadline"><i class="fa-regular fa-calendar"></i> ' + deadlineDisplay + '</span>' +
              '<span class="structured-bulk-chip assignee"><i class="fa-regular fa-user"></i> ' + assigneeDisplay + '</span>' +
              (hasNotes ? '<span class="structured-bulk-chip notes"><i class="fa-regular fa-note-sticky"></i> ' + notesText + '</span>' : '') +
            '</div>' +
          '</div>' +
        '</div>' +
        '<div class="structured-bulk-controls">' +
          '<label>Component</label>' +
          '<select class="structured-bulk-component" data-index="' + index + '">' +
            '<option value="">Đang tải...</option>' +
          '</select>' +
        '</div>' +
        '<div class="structured-bulk-controls">' +
          '<label>Parent Key</label>' +
          '<input type="text" class="structured-bulk-parent" data-index="' + index + '" placeholder="VD: ABC-123">' +
        '</div>' +
      '</div>';
    });

    html += '</div>';
    structuredBulkList.innerHTML = html;

    // Restore previous selections if available
    structuredAnalysisData.forEach((item, index) => {
      const select = structuredBulkList.querySelector('.structured-bulk-component[data-index="' + index + '"]');
      const parentInput = structuredBulkList.querySelector('.structured-bulk-parent[data-index="' + index + '"]');

      if (select) {
        const storedComponent = item.__componentId || item.componentId || '';
        select.setAttribute('data-selected', storedComponent);
        if (storedComponent) {
          structuredAnalysisData[index].__componentId = storedComponent;
        }
      }

      if (parentInput) {
        const storedParent = item.__parentKey || item.parentKey || '';
        parentInput.value = storedParent;
        if (storedParent) {
          structuredAnalysisData[index].__parentKey = storedParent;
        }
      }
    });

    const componentInputs = structuredBulkList.querySelectorAll('.structured-bulk-component');
    componentInputs.forEach(select => {
      select.addEventListener('change', function() {
        const idx = parseInt(this.getAttribute('data-index'), 10);
        if (!isNaN(idx) && structuredAnalysisData[idx]) {
          structuredAnalysisData[idx].__componentId = this.value;
        }
      });
    });

    const parentInputs = structuredBulkList.querySelectorAll('.structured-bulk-parent');
    parentInputs.forEach(input => {
      input.addEventListener('input', function() {
        const idx = parseInt(this.getAttribute('data-index'), 10);
        if (!isNaN(idx) && structuredAnalysisData[idx]) {
          structuredAnalysisData[idx].__parentKey = this.value.trim();
        }
      });
    });
  }

  async function populateStructuredBulkComponents(projectKey) {
    if (!structuredBulkList) return;

    const selects = structuredBulkList.querySelectorAll('.structured-bulk-component');
    if (!selects.length) return;

    selects.forEach(select => {
      select.disabled = true;
      select.innerHTML = '<option value="">-- Đang tải components --</option>';
    });

    try {
      const response = await fetch('/jira-get-components', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ projectKey: projectKey })
      });

      if (!response.ok) {
        throw new Error('HTTP ' + response.status);
      }

      const result = await response.json();

      selects.forEach(select => {
        select.innerHTML = '<option value="">-- Chọn component --</option>';
        if (result.ok && Array.isArray(result.components)) {
          result.components.forEach(component => {
            const option = document.createElement('option');
            option.value = component.id;
            option.textContent = component.name;
            if (component.description) {
              option.title = component.description;
            }
            select.appendChild(option);
          });

          const selectedValue = select.getAttribute('data-selected') || '';
          if (selectedValue) {
            select.value = selectedValue;
          }
        } else {
          select.innerHTML = '<option value="">-- Không có component --</option>';
        }
        select.disabled = false;
      });
    } catch (error) {
      console.error('Error loading components for structured bulk popup:', error);
      selects.forEach(select => {
        select.innerHTML = '<option value="">-- Lỗi tải components --</option>';
        select.disabled = false;
      });
    }
  }

  function normalizeStructuredDate(rawValue) {
    if (!rawValue) return '';
    if (/^\d{4}-\d{2}-\d{2}$/.test(rawValue)) {
      return rawValue;
    }
    const parsed = new Date(rawValue);
    if (!isNaN(parsed.getTime())) {
      return parsed.toISOString().split('T')[0];
    }
    return '';
  }

  async function handleStructuredBulkCreate() {
    if (!structuredAnalysisData || !structuredAnalysisData.length) {
      alert('Không có Action Items để tạo tickets!');
      return;
    }

    const structuredSpaceSelect = document.getElementById('structuredSpaceSelect');
    const projectKey = structuredSpaceSelect ? structuredSpaceSelect.value.trim() : '';

    if (!projectKey) {
      alert('Vui lòng chọn dự án trước khi tạo ticket!');
      return;
    }

    const selects = structuredBulkList ? structuredBulkList.querySelectorAll('.structured-bulk-component') : [];
    const parentInputs = structuredBulkList ? structuredBulkList.querySelectorAll('.structured-bulk-parent') : [];

    const tickets = [];
    structuredAnalysisData.forEach((item, index) => {
      const summary = (item.content || '').trim();
      if (!summary) return;

      const select = selects[index];
      const parentInput = parentInputs[index];

      const componentId = select ? select.value : '';
      const parentKey = parentInput ? parentInput.value.trim() : '';

      // Persist selections for next time
      structuredAnalysisData[index].__componentId = componentId;
      structuredAnalysisData[index].__parentKey = parentKey;

      tickets.push({
        index,
        summary,
        description: (item.notes && item.notes.trim()) ? item.notes.trim() : summary,
        dueDate: normalizeStructuredDate(item.deadline || ''),
        assigneeAccountId: item.assigneeAccountId || null,
        componentId,
        parentKey
      });
    });

    if (!tickets.length) {
      alert('Không có Action Items hợp lệ để tạo ticket.');
      return;
    }

    if (!confirm('Bạn có chắc chắn muốn tạo ' + tickets.length + ' Jira tickets?')) {
      return;
    }

    if (!structuredBulkCreateBtn) {
      return;
    }

    const originalButtonHtml = structuredBulkCreateBtn.innerHTML;
    structuredBulkCreateBtn.disabled = true;
    structuredBulkCreateBtn.innerHTML = '<i class="fa-solid fa-spinner fa-spin"></i> Đang tạo...';

    if (structuredBulkStatus) {
      structuredBulkStatus.style.display = 'block';
      structuredBulkStatus.textContent = 'Đang tạo tickets...';
      structuredBulkStatus.style.color = '#334155';
    }

    let successCount = 0;
    const failed = [];

    for (let i = 0; i < tickets.length; i++) {
      const ticket = tickets[i];
      if (structuredBulkStatus) {
        structuredBulkStatus.textContent = 'Đang tạo tickets... (' + (i + 1) + '/' + tickets.length + ')';
      }
      try {
        const result = await submitStructuredTicket({
          summary: ticket.summary,
          description: ticket.description,
          projectKey,
          dueDate: ticket.dueDate,
          componentId: ticket.componentId,
          parentKey: ticket.parentKey,
          assigneeAccountId: ticket.assigneeAccountId
        });

        if (result && result.success) {
          successCount++;
          const button = document.querySelector('.structured-create-jira-ticket[data-index="' + ticket.index + '"]');
          if (button) {
            button.innerHTML = '<i class="fas fa-check"></i>';
            button.style.background = '#22c55e';
            button.disabled = true;
          }
        } else {
          const errorMessage = (result && result.error) ? result.error : 'Không xác định được lỗi';
          failed.push('Ticket ' + (ticket.index + 1) + ': ' + errorMessage);
        }
      } catch (error) {
        failed.push('Ticket ' + (ticket.index + 1) + ': ' + error.message);
      }
    }

    structuredBulkCreateBtn.disabled = false;
    structuredBulkCreateBtn.innerHTML = originalButtonHtml;

    if (!failed.length) {
      if (structuredBulkStatus) {
        structuredBulkStatus.textContent = 'Đã tạo thành công ' + successCount + '/' + tickets.length + ' tickets.';
        structuredBulkStatus.style.color = '#047857';
      }
      setTimeout(() => {
        closeStructuredBulkPopup();
      }, 800);
    } else {
      if (structuredBulkStatus) {
        const errorLines = failed.map(msg => '&bull; ' + escapeHtml(msg)).join('<br>');
        structuredBulkStatus.innerHTML = 'Đã tạo ' + successCount + '/' + tickets.length + ' tickets.<br>' + errorLines;
        structuredBulkStatus.style.color = '#b91c1c';
      }
    }
  }

  async function submitStructuredTicket({ summary, description, projectKey, dueDate, componentId, parentKey, assigneeAccountId }) {
    const requestBody = {
      fields: {
        project: { key: projectKey },
        summary: summary,
        description: {
          type: 'doc',
          version: 1,
          content: [
            {
              type: 'paragraph',
              content: [
                {
                  type: 'text',
                  text: description || summary
                }
              ]
            }
          ]
        },
        issuetype: { name: 'Task' }
      }
    };

    if (assigneeAccountId) {
      requestBody.fields.assignee = { accountId: assigneeAccountId };
    }

    if (dueDate) {
      requestBody.fields.duedate = dueDate;
    }

    if (componentId) {
      requestBody.fields.components = [{ id: componentId }];
    }

    requestBody.fields['customfield_10035'] = new Date().toISOString().split('T')[0];

    if (parentKey) {
      requestBody.parentKey = parentKey;
    }

    const response = await fetch('/create-jira-ticket', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });

    let result = {};
    try {
      result = await response.json();
    } catch (error) {
      throw new Error('Không đọc được phản hồi từ Jira');
    }

    if (!response.ok) {
      throw new Error(result.error || ('HTTP ' + response.status));
    }

    return result;
  }

});
</script>

  <!-- Popup Editor -->
  <div id="popupOverlay" class="popup-overlay">
    <div class="popup-editor">
      <div class="popup-header">
        <h3 id="popupTitle" class="popup-title">Chỉnh sửa nội dung</h3>
        <button id="popupClose" class="popup-close">&times;</button>
      </div>
      <textarea id="popupTextarea" class="popup-textarea" placeholder="Nhập nội dung..."></textarea>
      <div class="popup-actions">
        <button id="popupCancel" class="popup-btn popup-btn-secondary">Hủy</button>
        <button id="popupSave" class="popup-btn popup-btn-primary">Lưu</button>
      </div>
    </div>
  </div>

  <script>
  // Load Confluence Spaces dynamically - improved to avoid conflicts
  let spacesLoaded = false; // Prevent multiple loads
  
  async function loadConfluenceSpaces() {
    if (spacesLoaded) return; // Already loaded, skip
    
    const spaceSelect = document.getElementById('spaceSelect');
    if (!spaceSelect) return;
    
    spacesLoaded = true; // Mark as loading
    
    try {
      console.log('Loading Confluence spaces...');
      spaceSelect.innerHTML = '<option value="">Loading spaces...</option>';
      
      const response = await fetch('/api/confluence-spaces');
      if (!response.ok) {
        throw new Error('Failed to load spaces: ' + response.status);
      }
      
      const data = await response.json();
      console.log('Frontend received data:', data);
      
      // Handle both successful and fallback responses
      if (data.ok && data.spaces && Array.isArray(data.spaces)) {
        console.log('Number of spaces to display:', data.spaces.length);
        
        // Clear loading option
        spaceSelect.innerHTML = '';
        
        // Add spaces to dropdown
        if (data.spaces.length === 0) {
          spaceSelect.innerHTML = '<option value="">No spaces found</option>';
        } else {
          data.spaces.forEach((space, index) => {
            console.log('Adding space ' + (index + 1) + ':', space.key, space.name, 'alias:', space.currentActiveAlias);
            const option = document.createElement('option');
            // Use currentActiveAlias for value (URL-friendly for creating pages)
            option.value = space.currentActiveAlias || space.key;
            option.textContent = (space.currentActiveAlias || space.key) + ' - ' + space.name;
            spaceSelect.appendChild(option);
          });
          
          // Set default selection to first space if available
          if (data.spaces.length > 0) {
            spaceSelect.value = data.spaces[0].currentActiveAlias || data.spaces[0].key;
          }
        }
        
        console.log('Confluence spaces loaded successfully');
        if (data.fallback) {
          console.warn('Using fallback spaces due to API error');
        }
        
      } else {
        throw new Error(data.error || 'Invalid response format');
      }
      
    } catch (error) {
      console.error('Error loading Confluence spaces:', error);
      // Enhanced fallback with better options
      const fallbackSpaces = [
        { key: 'AIG', name: 'Dự án AI' },
        { key: 'OTJ', name: 'Đào tạo Jira' },
        { key: 'DEV', name: 'Dự án DEVSECOPS' },
        { key: 'PMO', name: 'PMO Workspace' },
        { key: 'DEMO', name: 'Demo Space' }
      ];
      
      spaceSelect.innerHTML = '';
      fallbackSpaces.forEach(space => {
        const option = document.createElement('option');
        option.value = space.key;
        option.textContent = space.key + ' - ' + space.name;
        spaceSelect.appendChild(option);
      });
      
      // Set default selection for fallback
      spaceSelect.value = 'AIG';
      console.log('Using enhanced fallback spaces due to error');
      
      // Show user-friendly message (optional)
      const statusDiv = document.createElement('div');
      statusDiv.style.cssText = 'color: #f59e0b; font-size: 12px; margin-top: 4px;';
      statusDiv.textContent = 'Using default spaces. Check Confluence connection.';
      spaceSelect.parentNode.appendChild(statusDiv);
      
      // Auto-remove message after 5 seconds
      setTimeout(() => {
        if (statusDiv.parentNode) {
          statusDiv.parentNode.removeChild(statusDiv);
        }
      }, 5000);
    }
  }
  
  // Improved loading logic - avoid duplicate listeners
  function initSpacesLoader() {
    if (document.readyState === 'loading') {
      // Document still loading, wait for DOMContentLoaded
      document.addEventListener('DOMContentLoaded', loadConfluenceSpaces, { once: true });
    } else {
      // Document already loaded, load immediately
      loadConfluenceSpaces();
    }
  }
  
  // ====== Page ID Help Popup Handlers ======
  function showPageIdHelp() {
    const popup = document.getElementById('pageidHelpPopup');
    if (popup) {
      popup.classList.add('show');
    }
  }
  
  function closePageIdHelp() {
    const popup = document.getElementById('pageidHelpPopup');
    if (popup) {
      popup.classList.remove('show');
    }
  }
  
  // Add event listeners for help icons
  function initPageIdHelp() {
    // Help icon for Parent Page ID (Conversational tab)
    const helpParentPageId = document.getElementById('helpParentPageId');
    if (helpParentPageId) {
      helpParentPageId.addEventListener('click', showPageIdHelp);
    }
    
    // Help icon for Page ID Confluence (Structured tab)
    const helpStructuredPageId = document.getElementById('helpStructuredPageId');
    if (helpStructuredPageId) {
      helpStructuredPageId.addEventListener('click', showPageIdHelp);
    }
    
    // Close popup when clicking outside
    const popup = document.getElementById('pageidHelpPopup');
    if (popup) {
      popup.addEventListener('click', function(e) {
        if (e.target === popup) {
          closePageIdHelp();
        }
      });
    }
    
    // Close popup with Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        closePageIdHelp();
      }
    });
  }
  
  // Initialize Page ID Help on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPageIdHelp, { once: true });
  } else {
    initPageIdHelp();
  }
  
  // Initialize spaces loader
  initSpacesLoader();
  </script>

</body>
</html>`;
}

function riskRadarHTML() {
  return `<!doctype html>
<html lang="vi"><head>
<meta charset="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>AI Risk Management - BIDV PMO</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/brands.min.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
:root{
  --bg:#f0f4f8;
  --card:#ffffff;
  --soft:#f8fafc;
  --text:#1a202c;
  --muted:#718096;
  --line:#e2e8f0;
  --primary:#009639;
  --primary-600:#006b2a;
  --primary-50:#f0fdf4;
  --accent:#22c55e;
  --radius:20px;
  --shadow:0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  --shadow-lg:0 25px 50px -12px rgba(0, 0, 0, 0.25);
  --shadow-xl:0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}
html,body{margin:0;padding:0;background:linear-gradient(135deg, #f0f4f8 0%, #e2e8f0 100%);color:var(--text);font:16px/1.45 Inter,system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}
.container{max-width:1400px;margin:0 auto;padding:20px 32px 32px}

/* Header giống module Chatbot */
.header-container {
  background: var(--card);
  padding: 20px 0;
  border-bottom: 1px solid var(--line);
  box-shadow: var(--shadow);
}
.header-content {
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 32px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.header-left {
  display: flex;
  align-items: center;
  gap: 16px;
}
.back-button {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 16px;
  background: transparent;
  border: 1px solid var(--line);
  border-radius: 8px;
  color: var(--primary);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  text-decoration: none;
}
.back-button:hover {
  background: var(--primary-50);
  transform: translateX(-4px);
}
.back-button i {
  font-size: 16px;
}
/* Tạo class mới cho phần tiêu đề để căn giữa */
.header-center {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  align-items: center;
  gap: 12px;
}
.header-icon {
  width: 40px;
  height: 40px;
  background: var(--primary-50);
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--primary);
}
.header-icon i {
  font-size: 20px;
}
.header-title {
  font-size: 24px;
  font-weight: 700;
  color: var(--primary);
  margin: 0;
}
.header-right {
  display: flex;
  gap: 12px;
}
.header-button {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 10px 16px;
  background: var(--soft);
  border: 1px solid var(--line);
  border-radius: 10px;
  color: var(--text);
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  text-decoration: none;
}
.header-button:hover {
  background: var(--primary-50);
  border-color: var(--primary);
  color: var(--primary);
}
.header-button i {
  font-size: 16px;
}
.header-button.active {
  background: var(--primary);
  color: white;
  border-color: var(--primary);
}

/* Cards với hiệu ứng hover */
.card{background:var(--card);border-radius:var(--radius);box-shadow:0 8px 20px rgba(0,0,0,.08);padding:18px;position:relative;overflow:hidden;transition:all 0.3s ease}
.card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background: linear-gradient(90deg, var(--primary), var(--accent));
  opacity: 0.8;
}
.card:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-lg);
}
.card h3{margin:0 0 10px;font-size:18px;color:#172B4D;display:flex;align-items:center;gap:10px}

/* KPI với hiệu ứng hover nhưng giữ nguyên vị trí số liệu */
.kpi{display:grid;grid-template-columns:repeat(4,1fr);gap:12px}
.kpi .box{background:#F8FFF9;border:1px solid #E6F4EA;border-radius:10px;padding:12px;cursor:pointer;position:relative;overflow:hidden;transition:all 0.3s ease}
.kpi .box::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(0, 150, 57, 0.1), transparent);
  transition: left 0.5s ease;
}
.kpi .box:hover::before {
  left: 100%;
}
.kpi .box:hover {
  background: var(--primary-50);
  border-color: var(--primary);
  transform: translateY(-4px);
  box-shadow: var(--shadow-lg);
}
.kpi .box > div:first-child {
  font-size: 14px;
  color: var(--muted);
  margin-bottom: 8px;
}
.kpi .val{font-size:24px;font-weight:800;color:var(--primary);margin-bottom:8px;display:block;text-align:center} /* Thêm display:block và text-align:center để giữ nguyên vị trí */
.badge{display:inline-block;padding:4px 10px;border-radius:999px;font-size:12px;font-weight:600}
.badge.red{background:#FFEBE6;color:#BF2600}
.badge.amber{background:#FFFAEB;color:#8F5E00}
.badge.green{background:#E3FCEF;color:#006644}

/* Grid Layout với hiệu ứng hover */
.grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(360px,1fr));gap:20px}
.grid .card {
  position: relative;
  overflow: hidden;
}
.grid .card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background: linear-gradient(90deg, var(--primary), var(--accent));
  opacity: 0.8;
}
.grid .card:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-lg);
}

/* Table với hiệu ứng hover */
.table{width:100%;border-collapse:collapse;margin-top:8px}
.table th{background:#E6F4EA;color:#0b5a2b;text-align:left;padding:8px}
.table td{padding:8px;border-bottom:1px solid #f0f0f0}
.table tr {
  position: relative;
  transition: all 0.2s ease;
}
.table tr::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 3px;
  background: var(--primary);
  transform: scaleY(0);
  transition: transform 0.3s ease;
}
.table tr:hover::before {
  transform: scaleY(1);
}
.table tr:hover {
  background: var(--primary-50);
}

/* Risk Analysis Section với hiệu ứng hover */
.risk-analysis-section{margin-top:32px;padding:24px;background:#fff;border-radius:12px;box-shadow:0 4px 12px rgba(0,0,0,0.08);position:relative;overflow:hidden}
.risk-analysis-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(90deg, var(--primary), var(--accent), var(--primary));
  background-size: 200% 100%;
  animation: gradient 3s ease infinite;
}
@keyframes gradient {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}
.risk-analysis-title{font-size:20px;font-weight:700;color:var(--primary);margin:0 0 16px;display:flex;align-items:center;gap:10px}

/* Risk Table với hiệu ứng hover */
.risk-table{width:100%;border-collapse:collapse;margin-top:16px}
.risk-table th{background:#f8f9fa;color:#495057;text-align:left;padding:12px 8px;font-weight:600;border:1px solid #e9ecef}
.risk-table td{padding:10px 8px;border:1px solid #e9ecef;vertical-align:top}
.risk-table tr {
  position: relative;
  transition: all 0.2s ease;
}
.risk-table tr::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 3px;
  background: var(--primary);
  transform: scaleY(0);
  transition: transform 0.3s ease;
}
.risk-table tr:hover::before {
  transform: scaleY(1);
}
.risk-table tr:hover {
  background: var(--primary-50);
}
.risk-score{font-weight:700;text-align:center}
.risk-level-low{background:#d4edda;color:#155724}
.risk-level-medium{background:#fff3cd;color:#856404}
.risk-level-high{background:#f8d7da;color:#721c24}
.risk-level-extreme{background:#f5c6cb;color:#491217}
.risk-status{padding:4px 8px;border-radius:12px;font-size:12px;font-weight:600;text-align:center}
.status-accept{background:#d4edda;color:#155724}
.status-consider{background:#fff3cd;color:#856404}
.status-manage{background:#f8d7da;color:#721c24}
.status-reject{background:#f5c6cb;color:#491217}
.pic-info{font-size:12px;color:#6c757d}

/* Info Button for Risk Scoring Guide */
.info-btn{background:transparent;border:none;color:#0052cc;font-size:18px;cursor:pointer;margin-left:8px;padding:4px 8px;border-radius:50%;transition:all 0.3s ease;vertical-align:middle}
.info-btn:hover{background:#e8f2ff;color:#0747a6;transform:scale(1.1)}

/* Risk Scoring Guide Panel */
.risk-guide-panel{background:linear-gradient(135deg,#f8faff 0%,#e8f2ff 100%);border:2px solid #0052cc;border-radius:12px;padding:20px;margin:16px 0;animation:slideDown 0.4s ease-out}
@keyframes slideDown{from{opacity:0;transform:translateY(-20px)}to{opacity:1;transform:translateY(0)}}
.risk-guide-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:16px;padding-bottom:12px;border-bottom:2px solid #0052cc}
.risk-guide-header h4{margin:0;color:#0052cc;font-size:18px;font-weight:700;display:flex;align-items:center;gap:8px}
.close-guide-btn{background:#fff;border:1px solid #e5e7eb;font-size:20px;cursor:pointer;color:#6B778C;border-radius:50%;width:32px;height:32px;display:flex;align-items:center;justify-content:center;transition:all 0.2s ease}
.close-guide-btn:hover{background:#f8d7da;color:#721c24;transform:rotate(90deg);border-color:#f8d7da}
.risk-guide-content{max-height:600px;overflow-y:auto;padding-right:8px}
.guide-section{background:#fff;border-radius:8px;padding:16px;margin-bottom:16px;box-shadow:0 2px 8px rgba(0,0,0,0.08)}
.guide-section h5{margin:0 0 12px 0;color:#172B4D;font-size:15px;font-weight:700;display:flex;align-items:center;gap:8px}
.guide-section h5 i{color:#0052cc}
.score-guide-table,.status-guide-table{width:100%;border-collapse:collapse;margin-top:12px;font-size:13px}
.score-guide-table th,.status-guide-table th{background:#f8fafc;padding:10px;text-align:left;font-weight:600;color:#172B4D;border-bottom:2px solid #e5e7eb}
.score-guide-table td,.status-guide-table td{padding:10px;border-bottom:1px solid #f0f4f8}
.score-guide-table tbody tr:hover,.status-guide-table tbody tr:hover{background:#f8fafc}
.color-badge{display:inline-block;width:60px;height:20px;border-radius:4px;border:1px solid #e5e7eb}
.formula-box{background:#fff;border-left:4px solid #0052cc;padding:12px 16px;margin-top:8px;border-radius:4px;box-shadow:0 2px 4px rgba(0,0,0,0.05)}
.formula-box strong{color:#0052cc;font-size:16px}
.criteria-list{list-style:none;padding:0;margin:8px 0 0 0}
.criteria-list li{padding:8px 0;display:flex;align-items:flex-start;gap:8px;border-bottom:1px solid #f0f4f8}
.criteria-list li:last-child{border-bottom:none}
.criteria-list i{color:#10b981;margin-top:2px;font-size:14px}

/* Editable Cells với hiệu ứng hover */
.editable-cell{cursor:pointer;position:relative;min-height:20px;transition:all 0.2s ease}
.editable-cell:hover{background:var(--primary-50);border-radius:4px}
.editable-cell.editing{background:#fff;border:2px solid var(--primary);border-radius:4px}
.editable-textarea{width:100%;min-height:60px;border:none;outline:none;resize:vertical;font-family:inherit;font-size:inherit;padding:4px}
.edit-hint{font-size:11px;color:#6B778C;font-style:italic;margin-top:4px;display:none}
.editable-cell:hover .edit-hint{display:block}

/* Jira Button với hiệu ứng hover */
.jira-btn{padding:6px 10px;background:#0052cc;color:white;border:none;border-radius:6px;cursor:pointer;font-size:12px;display:flex;align-items:center;gap:6px;transition:all 0.3s ease}
.jira-btn:hover{background:#0747a6;transform:translateY(-2px);box-shadow:var(--shadow-lg)}
.jira-btn:disabled{background:#9ca3af;cursor:not-allowed}

/* Modal với hiệu ứng hover */
.modal{display:none;position:fixed;z-index:1000;left:0;top:0;width:100%;height:100%;background:rgba(0,0,0,0.5)}
.modal-content{background:#fff;margin:5% auto;padding:20px;border-radius:12px;width:90%;max-width:800px;max-height:80vh;overflow-y:auto;box-shadow:var(--shadow-xl);position:relative}
.modal-content::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background: linear-gradient(90deg, var(--primary), var(--accent));
  opacity: 0.8;
}
.modal-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:16px;padding-bottom:12px;border-bottom:1px solid #e5e7eb}
.modal-title{font-size:18px;font-weight:700;color:#172B4D}
.close{background:none;border:none;font-size:24px;cursor:pointer;color:#6B778C;transition:all 0.2s ease}
.close:hover{color:#172B4D;transform:rotate(90deg)}
#cancelCreateTicket:hover{background:#e5e7eb !important;transform:translateY(-1px)}
#confirmCreateTicket:hover{background:#0747a6 !important;transform:translateY(-1px);box-shadow:0 4px 12px rgba(0,82,204,0.3)}
#confirmCreateTicket:active{transform:translateY(0px)}
#cancelCreateTicket:active{transform:translateY(0px)}
.jql-display{background:#f8fafc;border:1px solid #e5e7eb;border-radius:8px;padding:12px;margin:12px 0;font-family:ui-monospace,Menlo,Consolas,monospace;font-size:14px;position:relative}
.jql-display pre{margin:0;white-space:pre-wrap;word-break:break-word}
.jql-copy{position:absolute;top:8px;right:8px;background:#fff;border:1px solid #e5e7eb;border-radius:6px;padding:4px 8px;cursor:pointer;font-size:12px;transition:all 0.3s ease}
.jql-copy:hover{background:var(--primary-50);border-color:var(--primary);transform:translateY(-2px)}

/* Select với hiệu ứng hover */
.select{width:100%;padding:14px 18px;border:1px solid var(--line);border-radius:16px;background:var(--card);font-size:15px;transition:all 0.3s ease}
.select:focus{outline:none;border-color:var(--primary);box-shadow:0 0 0 4px rgba(0, 150, 57, 0.1)}

/* Buttons với hiệu ứng hover */
.detail-btn{transition:all 0.2s ease}
.detail-btn:hover{background:var(--primary-600) !important;transform:translateY(-1px)}
.analyze-btn{transition:all 0.2s ease;background:var(--primary) !important}
.analyze-btn:hover{background:var(--primary-600) !important;transform:translateY(-1px)}
.analyze-btn:disabled{background:#9ca3af !important;cursor:not-allowed}
.generate-risk-btn{padding:10px 20px;background:var(--primary);color:white;border:none;border-radius:8px;font-weight:600;cursor:pointer;margin-bottom:16px;display:flex;align-items:center;gap:8px;transition:all 0.3s ease}
.generate-risk-btn:hover{background:var(--primary-600);transform:translateY(-2px);box-shadow:var(--shadow-lg)}
.generate-risk-btn:disabled{background:#9ca3af;cursor:not-allowed}

/* Dashboard Action Buttons - Unified Design */
.dashboard-actions {
  display: flex;
  gap: 8px;
  align-items: center;
  flex-wrap: wrap;
}

.action-btn {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  padding: 8px 14px;
  border: none;
  border-radius: 8px;
  font-size: 13px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  white-space: nowrap;
}

.action-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none !important;
}

.action-btn i {
  font-size: 14px;
}

/* Detail button - Neutral */
.detail-btn {
  background: #f3f4f6;
  color: #374151;
  border: 1px solid #e5e7eb;
}

.detail-btn:hover:not(:disabled) {
  background: #e5e7eb;
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

/* Analyze button - Primary action */
.analyze-btn {
  background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
  color: white;
  box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
}

.analyze-btn:hover:not(:disabled) {
  background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
}

/* Add to comprehensive button - Success action */
.add-to-comprehensive-btn {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
  box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
  position: relative;
  overflow: hidden;
}

.add-to-comprehensive-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
  transition: left 0.5s;
}

.add-to-comprehensive-btn:hover:not(:disabled)::before {
  left: 100%;
}

.add-to-comprehensive-btn:hover:not(:disabled) {
  background: linear-gradient(135deg, #059669 0%, #047857 100%);
  transform: translateY(-2px) scale(1.02);
  box-shadow: 0 4px 14px rgba(16, 185, 129, 0.5);
}

.add-to-comprehensive-btn:active:not(:disabled) {
  transform: translateY(-1px) scale(0.98);
}

.add-to-comprehensive-btn:disabled {
  background: #9ca3af;
  box-shadow: none;
}

.add-to-comprehensive-btn.added {
  background: #6b7280;
  cursor: default;
}

.add-to-comprehensive-btn.added i {
  animation: none;
}

/* Icon pulse animation */
@keyframes pulse-icon {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.15); }
}

.add-to-comprehensive-btn:not(:disabled):not(.added) i {
  animation: pulse-icon 2s ease-in-out infinite;
}

/* Responsive - Stack buttons on mobile */
@media (max-width: 768px) {
  .dashboard-actions {
    flex-direction: column;
    align-items: stretch;
  }
  
  .action-btn {
    width: 100%;
    justify-content: center;
  }
}

/* AI Analysis Loading */
.ai-loading{text-align:center;padding:20px;color:#6B778C}
.ai-loading i{animation:spin 1s linear infinite}
@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}


/* Inline JQL under dashboards */
.jql-inline{margin-top:8px;font-size:12px;color:#6B778C;display:flex;gap:8px;align-items:center;flex-wrap:wrap}
.jql-inline code{background:#f3f4f6;padding:2px 6px;border-radius:6px}
.jql-inline .jql-label{font-weight:600;color:#4b5563}
.jql-inline .jql-copy-inline{padding:4px 8px;border:none;border-radius:6px;background:var(--primary);color:#fff;cursor:pointer}

/* Assignee details table polish */
.assignee-table-wrap .table th, .assignee-table-wrap .table td { font-size:13px; }
.assignee-count{cursor:pointer; text-decoration: underline;}
/* Issue Details Table */
.issue-details-table{font-size:12px}
.issue-details-table th{background:#f8fafc;padding:8px 6px}
.issue-details-table td{padding:6px;border-bottom:1px solid #f0f0f0}
.status-badge{display:inline-block;padding:2px 6px;border-radius:12px;font-size:10px;font-weight:600}
.status-todo{background:#f3f4f6;color:#374151}
.status-progress{background:#dbeafe;color:#1d4ed8}
.status-done{background:#d1fae5;color:#065f46}
.priority-highest{color:#dc2626;font-weight:700}
.priority-high{color:#ea580c;font-weight:600}
.priority-medium{color:#d97706;font-weight:500}
.priority-low{color:#65a30d;font-weight:400}

/* Canvas */
canvas{display:block;width:100%;height:280px;max-height:280px}

/* Note */
.note{color:var(--muted);font-size:14px;margin-top:6px}

/* Responsive Design */
@media (max-width:1100px){
  .container{padding:20px}
  .header-content {
    flex-direction: column;
    gap: 16px;
  }
  .header-right {
    width: 100%;
    justify-content: center;
  }
  .header-center {
    display: none;
  }
  .kpi {
    grid-template-columns: repeat(2, 1fr);
  }
  .grid {
    grid-template-columns: 1fr;
  }
}
</style>
</head>
<body>
  <!-- Header giống module Chatbot -->
  <header class="header-container">
    <div class="header-content">
      <div class="header-left">
        <a href="/" class="back-button">
          <i class="fas fa-arrow-left"></i>
          Về menu PMO
        </a>
      </div>
      <!-- Đưa tiêu đề ra ngoài và đặt trong class mới để căn giữa -->
      <div class="header-center">
        <div class="header-icon">
          <i class="fas fa-shield-alt"></i>
        </div>
        <h1 class="header-title">AI Risk Management</h1>
      </div>
      <div class="header-right">
        <a href="/meetingnote" class="header-button">
          <i class="fa-solid fa-microphone-lines"></i>
          Meeting Note
        </a>
        <a href="/risk" class="header-button active">
          <i class="fa-solid fa-triangle-exclamation"></i>
          Risk Management
        </a>
        <a href="/chatbot" class="header-button">
          <i class="fa-solid fa-robot"></i>
          Chat Bot
        </a>
      </div>
    </div>
  </header>

  <main class="container">
    <!-- Project Selection -->
    <div class="card" style="margin-bottom: 20px;">
      <h3><i class="fas fa-project-diagram"></i> Chọn dự án</h3>
      <div style="display: grid; grid-template-columns: 1fr auto; gap: 16px; align-items: end;">
        <div>
          <label style="display: block; margin-bottom: 8px; font-weight: 600; color: #172B4D;">Dự án:</label>
          <select id="projectSelect" class="select">
            <option value="">-- Đang tải danh sách dự án --</option>
          </select>
        </div>
        <div>
          <button id="loadDataBtn" class="generate-risk-btn">
            <i class="fas fa-sync-alt"></i>
            <span>Tải dữ liệu</span>
          </button>
        </div>
      </div>
    </div>

    <!-- KPI -->
    <div class="kpi">
      <div class="box clickable-kpi" data-jql="project = PROJECT_KEY AND duedate < now() AND status != Done" data-title="Ticket quá hạn">
        <div>Trễ hạn sprint</div>
        <div class="val">0</div>
        <span class="badge green">Thấp</span>
      </div>
      <div class="box clickable-kpi" data-jql="project = PROJECT_KEY AND duedate < now() AND status != Done" data-title="Ticket quá hạn">
        <div>Ticket quá hạn</div>
        <div class="val">0</div>
        <span class="badge green">Thấp</span>
      </div>
      <div class="box clickable-kpi" data-jql="project = PROJECT_KEY AND created >= -7d" data-title="Ticket mới trong tuần">
        <div>Backlog tăng bất thường</div>
        <div class="val">0%</div>
        <span class="badge green">Bình thường</span>
      </div>
      <div class="box clickable-kpi" data-jql="project = PROJECT_KEY AND priority in (Highest, High)" data-title="Ticket priority cao">
        <div>Dự báo rủi ro (H/M/L)</div>
        <div class="val">0 / 0 / 0</div>
        <span class="badge green">Theo 4 tuần</span>
      </div>
    </div>

    <!-- 3 DASHBOARD THEO YÊU CẦU: Ticket quá hạn, Issue Type, Effort nhân sự -->
    <div class="grid" style="margin-top:20px">
      
      <!-- Dashboard 1: Ticket quá hạn -->
      <div class="card">
        <h3><i class="fas fa-exclamation-triangle"></i> Dashboard 1: Ticket quá hạn</h3>
        <div style="margin-bottom: 16px;">
          <!-- Action Buttons Header -->
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px; gap: 12px;">
            <div style="display: flex; align-items: center; gap: 8px;">
              <span style="font-size: 14px; color: #6B778C;">
                <i class="fas fa-chart-bar"></i> <strong id="overdueCount">0</strong> tickets
              </span>
            </div>
            
            <div class="dashboard-actions">
              <button id="overdueDetailBtn" class="action-btn detail-btn">
                <i class="fas fa-eye"></i>
                <span>Chi tiết</span>
              </button>
              <button id="analyzeOverdueBtn" class="action-btn analyze-btn">
                <i class="fas fa-brain"></i>
                <span>Phân tích AI</span>
              </button>
              <button id="addOverdueToComprehensive" class="action-btn add-to-comprehensive-btn" disabled title="Cần phân tích AI trước">
                <i class="fas fa-plus-circle"></i>
                <span>Thêm vào tổng hợp</span>
              </button>
            </div>
          </div>
          
          <canvas id="overdueChart" style="height: 280px; max-height: 280px;"></canvas>
          <div class="jql-inline"><span class="jql-label">JQL:</span> <code id="dash1JqlText">project = PROJECT_KEY AND duedate < now() AND status != Done</code> <button class="jql-copy-inline" data-target="dash1JqlText">Sao chép</button></div>
          <div class="note" style="font-size: 12px;">Theo dõi tickets quá deadline</div>
        </div>
        
        <!-- Bảng rủi ro AI cho Dashboard 1 -->
        <div style="border-top: 1px solid #e5e7eb; padding-top: 16px;">
          <h4 style="margin: 0 0 12px; color: var(--primary);"><i class="fas fa-robot"></i> AI Phân tích Rủi ro - Ticket Quá hạn</h4>
          <div id="overdueRiskTable" style="max-height: 200px; overflow-y: auto;">
            <table class="table" style="font-size: 13px;">
              <thead><tr><th>Nhận diện rủi ro</th><th>Hành động đề xuất</th><th>Mức độ ưu tiên</th></tr></thead>
              <tbody>
                <tr><td colspan="3" style="text-align: center; color: #6B778C; font-size: 12px;">Chưa có phân tích AI. Bấm "Phân tích AI" để bắt đầu.</td></tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <!-- Dashboard 2: Issue Type -->
      <div class="card">
        <h3><i class="fas fa-tags"></i> Dashboard 2: Issue Type</h3>
        <div style="margin-bottom: 16px;">
          <!-- Action Buttons Header -->
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px; gap: 12px;">
            <div style="display: flex; align-items: center; gap: 8px;">
              <span style="font-size: 14px; color: #6B778C;">
                <i class="fas fa-chart-pie"></i> <strong id="issueTypeCount">0</strong> issues
              </span>
            </div>
            
            <div class="dashboard-actions">
              <button id="issueTypeDetailBtn" class="action-btn detail-btn">
                <i class="fas fa-eye"></i>
                <span>Chi tiết</span>
              </button>
              <button id="analyzeIssueTypeBtn" class="action-btn analyze-btn">
                <i class="fas fa-brain"></i>
                <span>Phân tích AI</span>
              </button>
              <button id="addIssueTypeToComprehensive" class="action-btn add-to-comprehensive-btn" disabled title="Cần phân tích AI trước">
                <i class="fas fa-plus-circle"></i>
                <span>Thêm vào tổng hợp</span>
              </button>
            </div>
          </div>
          
          <canvas id="issueTypeChart" style="height: 280px; max-height: 280px;"></canvas>
          <div class="jql-inline"><span class="jql-label">JQL:</span> <code id="dash2JqlText">project = PROJECT_KEY</code> <button class="jql-copy-inline" data-target="dash2JqlText">Sao chép</button></div>
          <div class="note" style="font-size: 12px;">Story/Task/Bug/Epic/Subtask</div>
        </div>
        
        <!-- Bảng rủi ro AI cho Dashboard 2 -->
        <div style="border-top: 1px solid #e5e7eb; padding-top: 16px;">
          <h4 style="margin: 0 0 12px; color: var(--primary);"><i class="fas fa-robot"></i> AI Phân tích Rủi ro - Issue Type</h4>
          <div id="issueTypeRiskTable" style="max-height: 200px; overflow-y: auto;">
            <table class="table" style="font-size: 13px;">
              <thead><tr><th>Nhận diện rủi ro</th><th>Hành động đề xuất</th><th>Mức độ ưu tiên</th></tr></thead>
              <tbody>
                <tr><td colspan="3" style="text-align: center; color: #6B778C; font-size: 12px;">Chưa có phân tích AI. Bấm "Phân tích AI" để bắt đầu.</td></tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <!-- Dashboard 3: Effort nhân sự -->
      <div class="card">
        <h3><i class="fas fa-users"></i> Dashboard 3: Effort nhân sự</h3>
        <div style="margin-bottom: 16px;">
          <!-- Action Buttons Header -->
          <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px; gap: 12px;">
            <div style="display: flex; align-items: center; gap: 8px;">
              <span style="font-size: 14px; color: #6B778C;">
                <i class="fas fa-users-cog"></i> <strong id="effortCount">0</strong> assignees
              </span>
            </div>
            
            <div class="dashboard-actions">
              <button id="effortDetailBtn" class="action-btn detail-btn">
                <i class="fas fa-eye"></i>
                <span>Chi tiết</span>
              </button>
              <button id="analyzeEffortBtn" class="action-btn analyze-btn">
                <i class="fas fa-brain"></i>
                <span>Phân tích AI</span>
              </button>
              <button id="addEffortToComprehensive" class="action-btn add-to-comprehensive-btn" disabled title="Cần phân tích AI trước">
                <i class="fas fa-plus-circle"></i>
                <span>Thêm vào tổng hợp</span>
              </button>
            </div>
          </div>
          
          <canvas id="effortChart" style="height: 280px; max-height: 280px;"></canvas>
          <div class="jql-inline"><span class="jql-label">JQL:</span> <code id="dash3JqlText">project = PROJECT_KEY</code> <button class="jql-copy-inline" data-target="dash3JqlText">Sao chép</button></div>
          <div class="note" style="font-size: 12px;">Phát hiện quá tải nhân sự</div>
        </div>
        
        <!-- Bảng rủi ro AI cho Dashboard 3 -->
        <div style="border-top: 1px solid #e5e7eb; padding-top: 16px;">
          <h4 style="margin: 0 0 12px; color: var(--primary);"><i class="fas fa-robot"></i> AI Phân tích Rủi ro - Effort Nhân sự</h4>
          <div id="effortRiskTable" style="max-height: 200px; overflow-y: auto;">
            <table class="table" style="font-size: 13px;">
              <thead><tr><th>Nhận diện rủi ro</th><th>Hành động đề xuất</th><th>Mức độ ưu tiên</th></tr></thead>
              <tbody>
                <tr><td colspan="3" style="text-align: center; color: #6B778C; font-size: 12px;">Chưa có phân tích AI. Bấm "Phân tích AI" để bắt đầu.</td></tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Risk Analysis Section -->
    <div class="risk-analysis-section">
      <h3 class="risk-analysis-title">
        <i class="fas fa-shield-exclamation"></i>
        AI Risk Analysis - Comprehensive Assessment
        <button id="riskInfoBtn" class="info-btn" title="Xem hướng dẫn đánh giá điểm & mức độ rủi ro">
          <i class="fas fa-question-circle"></i>
        </button>
      </h3>
      
      <button id="generateRiskBtn" class="generate-risk-btn">
        <i class="fas fa-brain"></i>
        <span>Generate Risk Analysis</span>
      </button>
      
      <!-- Risk Scoring Guide Panel (Initially Hidden) -->
      <div id="riskScoringGuide" class="risk-guide-panel" style="display:none;">
        <div class="risk-guide-header">
          <h4><i class="fas fa-book"></i> Hướng dẫn đánh giá Điểm & Mức độ Rủi ro</h4>
          <button id="closeRiskGuide" class="close-guide-btn">&times;</button>
        </div>
        <div class="risk-guide-content">
          <div class="guide-section">
            <h5><i class="fas fa-star"></i> 1. Thang điểm rủi ro (Score: 1-20)</h5>
            <p>AI tự động tính điểm dựa trên công thức: <strong>Probability × Impact</strong></p>
            <table class="score-guide-table">
              <thead>
                <tr>
                  <th>Điểm</th>
                  <th>Mức độ</th>
                  <th>Ý nghĩa</th>
                  <th>Màu sắc</th>
                </tr>
              </thead>
              <tbody>
                <tr class="risk-level-low">
                  <td><strong>1-4</strong></td>
                  <td><strong>Low</strong></td>
                  <td>Rủi ro thấp, có thể chấp nhận và theo dõi</td>
                  <td><span class="color-badge" style="background:#d4edda;"></span> Xanh lá</td>
                </tr>
                <tr class="risk-level-medium">
                  <td><strong>5-9</strong></td>
                  <td><strong>Medium</strong></td>
                  <td>Rủi ro trung bình, cần theo dõi và có kế hoạch</td>
                  <td><span class="color-badge" style="background:#fff3cd;"></span> Vàng</td>
                </tr>
                <tr class="risk-level-high">
                  <td><strong>10-16</strong></td>
                  <td><strong>High</strong></td>
                  <td>Rủi ro cao, cần hành động khắc phục ngay</td>
                  <td><span class="color-badge" style="background:#f8d7da;"></span> Đỏ nhạt</td>
                </tr>
                <tr class="risk-level-extreme">
                  <td><strong>17-20</strong></td>
                  <td><strong>Extreme</strong></td>
                  <td>Rủi ro cực cao, không chấp nhận được</td>
                  <td><span class="color-badge" style="background:#f5c6cb;"></span> Đỏ đậm</td>
                </tr>
              </tbody>
            </table>
          </div>
          
          <div class="guide-section">
            <h5><i class="fas fa-calculator"></i> 2. Công thức tính điểm</h5>
            <div class="formula-box">
              <strong>Score = Probability × Impact</strong>
              <p style="margin-top:8px;font-size:13px;">
                • <strong>Probability (Khả năng xảy ra)</strong>: Low (1-2), Medium (3), High (4-5)<br>
                • <strong>Impact (Mức độ ảnh hưởng)</strong>: Low (1-2), Medium (3), High (4-5)<br>
                • <strong>Kết quả</strong>: Score từ 1 (1×1) đến 25 (5×5), chuẩn hóa về thang 1-20
              </p>
            </div>
          </div>
          
          <div class="guide-section">
            <h5><i class="fas fa-brain"></i> 3. AI phân tích dựa trên</h5>
            <ul class="criteria-list">
              <li><i class="fas fa-check-circle"></i> <strong>Số lượng tickets</strong>: Tổng số issues trong dự án</li>
              <li><i class="fas fa-check-circle"></i> <strong>Tickets quá hạn</strong>: Số lượng và tỷ lệ overdue</li>
              <li><i class="fas fa-check-circle"></i> <strong>Phân bố Priority</strong>: Critical, High, Medium, Low</li>
              <li><i class="fas fa-check-circle"></i> <strong>Phân bố Status</strong>: To Do, In Progress, Done, Blocked</li>
              <li><i class="fas fa-check-circle"></i> <strong>Issue Types</strong>: Bug, Task, Story, Epic distribution</li>
              <li><i class="fas fa-check-circle"></i> <strong>Workload phân bổ</strong>: Tải công việc theo assignee</li>
              <li><i class="fas fa-check-circle"></i> <strong>Time metrics</strong>: Thời gian tạo, update, resolve</li>
            </ul>
          </div>
          
          <div class="guide-section">
            <h5><i class="fas fa-lightbulb"></i> 4. Trạng thái & Hành động</h5>
            <table class="status-guide-table">
              <thead>
                <tr>
                  <th>Trạng thái</th>
                  <th>Hành động khuyến nghị</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td><span class="status-accept">Chấp nhận được</span></td>
                  <td>Theo dõi định kỳ, không cần hành động ngay</td>
                </tr>
                <tr>
                  <td><span class="status-consider">Cần xem xét</span></td>
                  <td>Lập kế hoạch giảm thiểu, review trong sprint</td>
                </tr>
                <tr>
                  <td><span class="status-manage">Cần quản lý</span></td>
                  <td>Assign PIC, thiết lập action plan cụ thể</td>
                </tr>
                <tr>
                  <td><span class="status-reject">Không chấp nhận</span></td>
                  <td>Khắc phục ngay lập tức, báo cáo stakeholder</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
      
      <div id="riskAnalysisContent" style="display:none;">
        <table class="risk-table">
          <thead>
            <tr>
              <th style="width:7%">Điểm</th>
              <th style="width:9%">Mức độ</th>
              <th style="width:20%">Giải thích</th>
              <th style="width:10%">Chi tiết</th>
              <th style="width:24%">Mô tả</th>
              <th style="width:20%">Hành động cụ thể</th>
              <th style="width:8%">PIC</th>
              <th style="width:2%">Action</th>
            </tr>
          </thead>
          <tbody id="riskAnalysisTableBody">
            <tr>
              <td colspan="8" style="text-align:center;color:#6B778C;padding:20px;">
                Chưa có phân tích rủi ro. Bấm "Generate Risk Analysis" để bắt đầu.
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </main>

  <!-- Modal cho JQL Query -->
  <div id="jqlModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title" id="modalTitle">JQL Query</h3>
        <button class="close" id="closeModal">&times;</button>
      </div>
      <div class="jql-display">
        <pre id="jqlQuery"></pre>
        <button class="jql-copy" id="copyJql">Sao chép JQL</button>
      </div>
      <div id="jqlResults" style="margin-top: 12px; max-height: 320px; overflow-y: auto;"></div>

      <div style="margin-top: 16px;">
        <p style="color: #6B778C; font-size: 14px;">
          <i class="fas fa-info-circle"></i> 
          Click "Sao chép JQL" để copy câu query, sau đó paste vào Jira Advanced Search để xem danh sách ticket.
        </p>
      </div>
    </div>
  </div>

  <!-- Modal cho hiển thị chi tiết dữ liệu -->
  <div id="detailModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title" id="detailModalTitle">Chi tiết dữ liệu</h3>
        <button class="close" id="closeDetailModal">&times;</button>
      </div>
      <div id="detailModalContent">
        <!-- Nội dung sẽ được cập nhật bằng JavaScript -->
      </div>
    </div>
  </div>

  <!-- Confirm Ticket Modal -->
  <div id="confirmTicketModal" class="modal">
    <div class="modal-content" style="max-width: 700px;">
      <div class="modal-header">
        <div class="modal-title">
          <i class="fab fa-jira" style="color: #0052cc; margin-right: 8px;"></i>
          Xác nhận tạo Jira Ticket
        </div>
        <button id="closeConfirmModal" class="close">&times;</button>
      </div>
      <div style="padding: 16px 0;">
        <div style="background: #f8fafc; padding: 16px; border-radius: 8px; margin-bottom: 16px;">
          <div style="font-weight: 600; color: #172B4D; margin-bottom: 12px; font-size: 15px;">
            📋 Thông tin Ticket
          </div>
          <div style="display: grid; gap: 12px;">
            <div>
              <div style="font-weight: 600; color: #6B778C; font-size: 13px; margin-bottom: 4px;">Project:</div>
              <div id="confirmProjectKey" style="color: #172B4D; font-size: 14px;"></div>
            </div>
            <div>
              <div style="font-weight: 600; color: #6B778C; font-size: 13px; margin-bottom: 4px;">Summary (Mô tả rủi ro):</div>
              <div id="confirmSummary" style="color: #172B4D; font-size: 14px; background: white; padding: 8px; border-radius: 4px; border: 1px solid #e2e8f0;"></div>
            </div>
            <div>
              <div style="font-weight: 600; color: #6B778C; font-size: 13px; margin-bottom: 4px;">Description (Hành động khuyến nghị):</div>
              <div id="confirmDescription" style="color: #172B4D; font-size: 14px; background: white; padding: 8px; border-radius: 4px; border: 1px solid #e2e8f0;"></div>
            </div>
          </div>
        </div>
        
        <div style="background: #fff7ed; padding: 16px; border-radius: 8px; border-left: 4px solid #f59e0b;">
          <div style="font-weight: 600; color: #172B4D; margin-bottom: 12px; font-size: 15px;">
            🤖 AI Analysis - Custom Fields
          </div>
          <div id="confirmAIFields" style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px; font-size: 13px;">
            <!-- Will be populated by JavaScript -->
          </div>
        </div>
      </div>
      
      <div style="display: flex; gap: 12px; justify-content: flex-end; padding-top: 16px; border-top: 1px solid #e5e7eb;">
        <button id="cancelCreateTicket" style="padding: 10px 24px; background: #f3f4f6; border: none; border-radius: 8px; color: #374151; font-weight: 600; cursor: pointer; transition: all 0.2s;">
          <i class="fas fa-times"></i> Hủy
        </button>
        <button id="confirmCreateTicket" style="padding: 10px 24px; background: #0052cc; border: none; border-radius: 8px; color: white; font-weight: 600; cursor: pointer; transition: all 0.2s;">
          <i class="fab fa-jira"></i> Xác nhận tạo Ticket
        </button>
      </div>
    </div>
  </div>

<script>
document.addEventListener("DOMContentLoaded", function(){
// ====== GLOBAL VARIABLES ======
  let currentProjectKey = '';
  let currentIssueType = 'All';
  let jiraData = null;
  
  const projectSelect = document.getElementById('projectSelect');
  const loadDataBtn = document.getElementById('loadDataBtn');
  
  // ====== CHART DATA (sẽ được cập nhật từ Jira) ======
  let chartData = {
    weeks: ['W-6','W-5','W-4','W-3','W-2','W-1','W'],
    backlog: [0, 0, 0, 0, 0, 0, 0],
    overdueBySprint: { labels: ['S-19','S-20','S-21','S-22','S-23'], data: [0,0,0,0,0] },
    riskDist: { high:0, medium:0, low:0 },
    months: ['T1','T2','T3','T4','T5','T6'],
    effort: {}
  };

  // ====== CHARTS ======
  // Overdue chart (Dashboard 1)
  new Chart(document.getElementById('overdueChart'), {
    type: 'bar',
    data: { 
      labels: ['Tuần 1', 'Tuần 2', 'Tuần 3', 'Tuần 4', 'Tuần hiện tại'], 
      datasets:[{ 
        label:'Ticket quá hạn', 
        data: [0, 0, 0, 0, 0],
        backgroundColor: '#ef4444',
        borderColor: '#dc2626'
      }] 
    },
    options: { 
      plugins:{legend:{display:false}}, 
      scales:{ y:{ beginAtZero:true } },
      responsive: true,
      maintainAspectRatio: false,
      aspectRatio: 2
    }
  });

  // Issue Type chart (Dashboard 2)
  new Chart(document.getElementById('issueTypeChart'), {
    type: 'doughnut',
    data: { 
      labels: ['Story', 'Task', 'Bug', 'Epic', 'Subtask'], 
      datasets: [{ 
        data: [0, 0, 0, 0, 0],
        backgroundColor: ['#22c55e', '#3b82f6', '#ef4444', '#f59e0b', '#8b5cf6']
      }] 
    },
    options: { 
      plugins:{legend:{position:'bottom'}},
      responsive: true,
      maintainAspectRatio: false,
      aspectRatio: 1
    }
  });

  // Effort chart (Dashboard 3)
  new Chart(document.getElementById('effortChart'), {
    type:'bar',
    data:{ 
      labels: [], // Sẽ được cập nhật với tên assignee
      datasets: [{
        label: 'Số lượng ticket',
        data: [],
        backgroundColor: '#3b82f6',
        borderColor: '#1d4ed8'
      }]
    },
    options:{ 
      plugins:{legend:{display:false}}, 
      scales:{ y:{ beginAtZero:true } },
      responsive: true,
      maintainAspectRatio: false,
      aspectRatio: 1.5,
      indexAxis: 'y' // Horizontal bar chart
    }
  });

  // ====== JIRA API FUNCTIONS ======
  
  // Load projects từ Jira API
  async function loadProjects() {
    try {
      const response = await fetch('/api/jira-projects', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (!response.ok) {
        throw new Error('Failed to load projects');
      }
      
      const data = await response.json();
      if (!data.ok) {
        throw new Error(data.error || 'Failed to load projects');
      }
      
      projectSelect.innerHTML = '<option value="">-- Chọn dự án --</option>';
      
      data.projects.forEach(project => {
        const option = document.createElement('option');
        option.value = project.key;
        option.textContent = project.key + ' - ' + project.name;
        projectSelect.appendChild(option);
      });
      
    } catch (error) {
      console.error('Error loading projects:', error);
      projectSelect.innerHTML = '<option value="">-- Lỗi tải dự án --</option>';
    }
  }
  
  // Load issues từ Jira API
  async function loadIssues() {
    if (!currentProjectKey) {
      alert('Vui lòng chọn dự án trước');
      return;
    }
    
    try {
      loadDataBtn.disabled = true;
      loadDataBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>Đang tải...</span>';
      
      console.log('Loading issues for project:', currentProjectKey);
      
      const response = await fetch('/api/jira-issues', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          projectKey: currentProjectKey
        })
      });
      
      console.log('Response status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('API error response:', errorText);
        throw new Error('Failed to load issues: ' + errorText);
      }
      
      const responseData = await response.json();
      console.log('Response data:', responseData);
      
      if (!responseData.ok) {
        throw new Error(responseData.error || 'API returned error');
      }
      
      jiraData = responseData;
      updateChartsWithJiraData();
      
    } catch (error) {
      console.error('Error loading issues:', error);
      alert('Lỗi tải dữ liệu: ' + error.message);
    } finally {
      loadDataBtn.disabled = false;
      loadDataBtn.innerHTML = '<i class="fas fa-sync-alt"></i><span>Tải dữ liệu</span>';
    }
  }
  
  // Cập nhật biểu đồ với dữ liệu từ Jira
  function updateChartsWithJiraData() {
    if (!jiraData) return;
    
    // Cập nhật KPI
    updateKPI();
    
    // Cập nhật counters cho dashboards
    updateDashboardCounters();
    
    // Cập nhật JQL text hiển thị với projectKey động
    updateJQLDisplayText();
    
    // Cập nhật 3 biểu đồ chính
    updateOverdueChart();
    updateIssueTypeChart();
    updateEffortChart();
  }
  
  function updateDashboardCounters() {
    // Update counter cho Dashboard 1: Overdue tickets
    const overdueCount = document.getElementById('overdueCount');
    if (overdueCount && jiraData.overdueCount !== undefined) {
      overdueCount.textContent = jiraData.overdueCount;
    }
    
    // Update counter cho Dashboard 2: Issue Type
    const issueTypeCount = document.getElementById('issueTypeCount');
    if (issueTypeCount && jiraData.issues) {
      issueTypeCount.textContent = jiraData.issues.length;
    }
    
    // Update counter cho Dashboard 3: Effort
    const effortCount = document.getElementById('effortCount');
    if (effortCount && jiraData.effortData && jiraData.effortData.labels) {
      effortCount.textContent = jiraData.effortData.labels.length;
    }
  }
  
  function updateJQLDisplayText() {
    // Cập nhật JQL text cho 3 dashboard với projectKey thực tế
    const dash1JqlText = document.getElementById('dash1JqlText');
    const dash2JqlText = document.getElementById('dash2JqlText');
    const dash3JqlText = document.getElementById('dash3JqlText');
    
    if (dash1JqlText && currentProjectKey) {
      dash1JqlText.textContent = 'project = ' + currentProjectKey + ' AND duedate < now() AND status != Done';
    }
    
    if (dash2JqlText && currentProjectKey) {
      dash2JqlText.textContent = 'project = ' + currentProjectKey;
    }
    
    if (dash3JqlText && currentProjectKey) {
      dash3JqlText.textContent = 'project = ' + currentProjectKey;
    }
  }
  
  function updateKPI() {
    // Cập nhật các KPI dựa trên dữ liệu Jira
    const kpiBoxes = document.querySelectorAll('.kpi .box');
    if (kpiBoxes.length >= 4) {
      kpiBoxes[0].querySelector('.val').textContent = jiraData.sprintDelayCount || 0;
      kpiBoxes[1].querySelector('.val').textContent = jiraData.overdueCount || 0;
      kpiBoxes[2].querySelector('.val').textContent = jiraData.backlogGrowth || '0%';
      kpiBoxes[3].querySelector('.val').textContent = (jiraData.highRisk || 0) + ' / ' + (jiraData.mediumRisk || 0) + ' / ' + (jiraData.lowRisk || 0);
    }
  }
  
  function updateOverdueChart() {
    // Cập nhật biểu đồ ticket quá hạn
    const chart = Chart.getChart('overdueChart');
    if (chart && jiraData.overdueData) {
      chart.data.datasets[0].data = jiraData.overdueData;
      chart.update();
    }
  }
  
  function updateIssueTypeChart() {
    // Cập nhật biểu đồ issue type
    const chart = Chart.getChart('issueTypeChart');
    if (chart && jiraData.issueTypeData) {
      chart.data.datasets[0].data = jiraData.issueTypeData;
      chart.update();
    }
  }
  
  function updateEffortChart() {
    // Cập nhật biểu đồ effort nhân sự
    const chart = Chart.getChart('effortChart');
    if (chart && jiraData.effortData) {
      chart.data.labels = jiraData.effortData.labels || [];
      chart.data.datasets[0].data = jiraData.effortData.data || [];
      chart.update();
    }
  }
  
  // ====== JQL MODAL FUNCTIONS ======
  
  function showJqlModal(title, jql) {
    const modal = document.getElementById('jqlModal');
    const modalTitle = document.getElementById('modalTitle');
    const jqlQuery = document.getElementById('jqlQuery');
    
    modalTitle.textContent = title;
    jqlQuery.textContent = jql;
    renderJqlResults(jql);
    modal.style.display = 'block';
  }
  
  function hideJqlModal() {
    const modal = document.getElementById('jqlModal');
    modal.style.display = 'none';
  }
  
  function copyJqlToClipboard() {
    const jqlQuery = document.getElementById('jqlQuery');
    const text = jqlQuery.textContent || '';
    if (!text.trim()) return;
    
    navigator.clipboard.writeText(text)
      .then(() => {
        const copyBtn = document.getElementById('copyJql');
        const originalText = copyBtn.textContent;
        copyBtn.textContent = 'Đã sao chép!';
        setTimeout(() => {
          copyBtn.textContent = originalText;
        }, 2000);
      })
      .catch(err => {
        console.error('Failed to copy: ', err);
        alert('Không thể sao chép. Vui lòng copy thủ công.');
      });
  }

  
  // ====== JQL RESULT RENDERING (for KPI boxes) ======
  function filterIssuesByJql(jql, issues) {
    try {
      let result = Array.isArray(issues) ? issues.slice() : [];
      const now = new Date();
      const daysMatch = /created\s*>=\s*-(\d+)d/i.exec(jql);
      if (daysMatch) {
        const days = parseInt(daysMatch[1], 10) || 0;
        const threshold = new Date(now.getTime() - days * 24 * 60 * 60 * 1000);
        result = result.filter(it => it.fields && it.fields.created && new Date(it.fields.created) >= threshold);
      }
      if (/duedate\s*<\s*now\(\)/i.test(jql)) {
        result = result.filter(it => it.fields && it.fields.duedate && new Date(it.fields.duedate) < now);
      }
      if (/status\s*!=\s*Done/i.test(jql)) {
        result = result.filter(it => (it.fields && it.fields.status && it.fields.status.name) ? it.fields.status.name !== 'Done' : true);
      }
      const prioMatch = /priority\s+in\s*\(([^\)]+)\)/i.exec(jql);
      if (prioMatch) {
        const list = prioMatch[1].split(',').map(s => s.trim().replace(/^["']|["']$/g, ''));
        result = result.filter(it => it.fields && it.fields.priority && list.includes(it.fields.priority.name));
      }
      // Normalize optional project filter: our dataset already matches selected project
      return result;
    } catch (e) {
      console.error('filterIssuesByJql error:', e);
      return [];
    }
  }
  
  function renderJqlResults(jql) {
    const container = document.getElementById('jqlResults');
    if (!container) return;
    if (!jiraData || !jiraData.issues) {
      container.innerHTML = '<p style="color:#6B778C;">Chưa có dữ liệu Jira. Vui lòng bấm "Tải dữ liệu".</p>';
      return;
    }
    const issues = filterIssuesByJql(jql, jiraData.issues);
    if (!issues.length) {
      container.innerHTML = '<p style="color:#6B778C;">Không có ticket phù hợp với JQL.</p>';
      return;
    }
    let html = '';
    html += '<div style="display:flex;justify-content:space-between;align-items:center;margin:6px 0 8px 0;">';
    html += '<div style="font-size:12px;color:#6B778C;">Tìm thấy <strong>' + issues.length + '</strong> tickets</div>';
    html += '</div>';
    html += '<table class="table issue-details-table"><thead><tr>';
    html += '<th>Key</th><th>Summary</th><th>Assignee</th><th>Due Date</th><th>Status</th><th>Priority</th>';
    html += '</tr></thead><tbody>';
    const maxRows = 50;
    issues.slice(0, maxRows).forEach(issue => {
      const key = issue.key || '';
      const summary = (issue.fields && issue.fields.summary) ? issue.fields.summary : '';
      const assignee = (issue.fields && issue.fields.assignee) ? issue.fields.assignee.displayName : 'Unassigned';
      const due = (issue.fields && issue.fields.duedate) ? issue.fields.duedate : '';
      const status = (issue.fields && issue.fields.status) ? issue.fields.status.name : '';
      const prio = (issue.fields && issue.fields.priority) ? issue.fields.priority.name : 'None';
      const statusClass = status ? ('status-' + status.toLowerCase().replace(/\s+/g,'-')) : '';
      const prioClass = prio ? ('priority-' + prio.toLowerCase().replace(/\s+/g,'-')) : '';
      html += '<tr>';
      html += '<td><strong>' + key + '</strong></td>';
      html += '<td>' + (summary || '').replace(/</g,'&lt;').slice(0, 80) + (summary.length > 80 ? '…' : '') + '</td>';
      html += '<td>' + assignee + '</td>';
      html += '<td>' + (due || '-') + '</td>';
      html += '<td><span class="status-badge ' + statusClass + '">' + status + '</span></td>';
      html += '<td class="' + prioClass + '">' + prio + '</td>';
      html += '</tr>';
    });
    if (issues.length > maxRows) {
      html += '<tr><td colspan="6" style="text-align:center;color:#6B778C;">… và ' + (issues.length - maxRows) + ' tickets khác</td></tr>';
    }
    html += '</tbody></table>';
    container.innerHTML = html;
  }


function attachAssigneeCountClickHandlers() {
  document.querySelectorAll('.assignee-count').forEach(el => {
    el.addEventListener('click', function(ev) {
      ev.preventDefault();
      const assignee = this.getAttribute('data-assignee');
      const filter = this.getAttribute('data-filter');
      showAssigneeIssues(assignee, filter);
    });
  });
}

function showAssigneeIssues(assignee, filter) {
  if (!jiraData || !jiraData.issues) return;
  const all = jiraData.issues.filter(it => {
    const name = it.fields.assignee ? it.fields.assignee.displayName : 'Unassigned';
    return name === assignee;
  });
  let list = all;
  if (filter === 'inProgress') {
    list = all.filter(it => {
      const st = it.fields.status && it.fields.status.name;
      return st === 'In Progress' || st === 'In Development';
    });
  } else if (filter === 'overdue') {
    list = all.filter(it => {
      const due = it.fields.duedate;
      const st = it.fields.status && it.fields.status.name;
      return due && new Date(due) < new Date() && st !== 'Done';
    });
  }
  let html = '<h4>' + assignee + ' — ' + (filter === 'all' ? 'Tất cả' : (filter === 'inProgress' ? 'Đang làm' : 'Quá hạn')) + '</h4>';
  if (!list.length) {
    html += '<p style="color:#6B778C;">Không có ticket.</p>';
  } else {
    html += '<table class="table issue-details-table"><thead><tr><th>Key</th><th>Summary</th><th>Due</th><th>Status</th><th>Priority</th></tr></thead><tbody>';
    list.forEach(it => {
      const key = it.key || '';
      const summary = (it.fields && it.fields.summary) ? it.fields.summary : '';
      const due = (it.fields && it.fields.duedate) ? it.fields.duedate : '';
      const status = (it.fields && it.fields.status) ? it.fields.status.name : '';
      const prio = (it.fields && it.fields.priority) ? it.fields.priority.name : 'None';
      const statusClass = status ? ('status-' + status.toLowerCase().replace(/\\s+/g,'-')) : '';
      const prioClass = prio ? ('priority-' + prio.toLowerCase().replace(/\\s+/g,'-')) : '';
      html += '<tr>';
      html += '<td><strong>' + key + '</strong></td>';
      html += '<td>' + (summary || '').replace(/</g,'&lt;').slice(0, 80) + (summary.length > 80 ? '…' : '') + '</td>';
      html += '<td>' + (due || '-') + '</td>';
      html += '<td><span class="status-badge ' + statusClass + '">' + status + '</span></td>';
      html += '<td class="' + prioClass + '">' + prio + '</td>';
      html += '</tr>';
    });
    html += '</tbody></table>';
  }
  showDetailModal('Danh sách ticket', html);
}

  // ====== DETAIL MODAL FUNCTIONS ======
  
  function showDetailModal(title, content) {
    const modal = document.getElementById('detailModal');
    const modalTitle = document.getElementById('detailModalTitle');
    const modalContent = document.getElementById('detailModalContent');
    
    modalTitle.textContent = title;
    modalContent.innerHTML = content;
    modal.style.display = 'block';
  }
  
  function hideDetailModal() {
    const modal = document.getElementById('detailModal');
    modal.style.display = 'none';
  }

  // ====== DETAIL DATA FUNCTIONS ======
  
  function showOverdueDetails() {
    if (!jiraData || !jiraData.issues) {
      alert('Chưa có dữ liệu. Vui lòng tải dữ liệu trước.');
      return;
    }
    
    const now = new Date();
    const overdueIssues = jiraData.issues.filter(issue => {
      const dueDate = issue.fields.duedate;
      if (!dueDate) return false;
      return new Date(dueDate) < now && issue.fields.status.name !== 'Done';
    });
    
    let content = '<h4>Chi tiết Tickets quá hạn</h4>';
    
    if (overdueIssues.length === 0) {
      content += '<p style="text-align: center; color: #6B778C;">Không có ticket quá hạn</p>';
    } else {
      content += '<table class="table issue-details-table">';
      content += '<thead><tr><th>Key</th><th>Summary</th><th>Assignee</th><th>Due Date</th><th>Status</th><th>Priority</th></tr></thead>';
      content += '<tbody>';
      
      overdueIssues.forEach(issue => {
        const assignee = issue.fields.assignee ? issue.fields.assignee.displayName : 'Unassigned';
        const priority = issue.fields.priority ? issue.fields.priority.name : 'None';
        const priorityClass = priority.toLowerCase().replace(' ', '');
        const statusClass = issue.fields.status.name.toLowerCase().replace(' ', '');
        
        content += '<tr>';
        content += '<td><strong>' + issue.key + '</strong></td>';
        content += '<td>' + (issue.fields.summary || '').substring(0, 50) + '...</td>';
        content += '<td>' + assignee + '</td>';
        content += '<td>' + issue.fields.duedate + '</td>';
        content += '<td><span class="status-badge status-' + statusClass + '">' + issue.fields.status.name + '</span></td>';
        content += '<td class="priority-' + priorityClass + '">' + priority + '</td>';
        content += '</tr>';
      });
      
      content += '</tbody></table>';
    }
    
    showDetailModal('Chi tiết Tickets quá hạn', content);
  }
  
  function showIssueTypeDetails() {
    if (!jiraData || !jiraData.issues) {
      alert('Chưa có dữ liệu. Vui lòng tải dữ liệu trước.');
      return;
    }
    
    const issueTypes = {};
    jiraData.issues.forEach(issue => {
      const type = issue.fields.issuetype.name;
      if (!issueTypes[type]) issueTypes[type] = [];
      issueTypes[type].push(issue);
    });
    
    let content = '<h4>Chi tiết Issue Types</h4>';
    
    Object.keys(issueTypes).forEach(type => {
      content += '<h5>' + type + ' (' + issueTypes[type].length + ')</h5>';
      content += '<table class="table issue-details-table">';
      content += '<thead><tr><th>Key</th><th>Summary</th><th>Assignee</th><th>Status</th><th>Priority</th></tr></thead>';
      content += '<tbody>';
      
      issueTypes[type].slice(0, 5).forEach(issue => {
        const assignee = issue.fields.assignee ? issue.fields.assignee.displayName : 'Unassigned';
        const priority = issue.fields.priority ? issue.fields.priority.name : 'None';
        const priorityClass = priority.toLowerCase().replace(' ', '');
        const statusClass = issue.fields.status.name.toLowerCase().replace(' ', '');
        
        content += '<tr>';
        content += '<td><strong>' + issue.key + '</strong></td>';
        content += '<td>' + (issue.fields.summary || '').substring(0, 40) + '...</td>';
        content += '<td>' + assignee + '</td>';
        content += '<td><span class="status-badge status-' + statusClass + '">' + issue.fields.status.name + '</span></td>';
        content += '<td class="priority-' + priorityClass + '">' + priority + '</td>';
        content += '</tr>';
      });
      
      if (issueTypes[type].length > 5) {
        content += '<tr><td colspan="5" style="text-align: center; color: #6B778C;">... và ' + (issueTypes[type].length - 5) + ' tickets khác</td></tr>';
      }
      
      content += '</tbody></table>';
    });
    
    showDetailModal('Chi tiết Issue Types', content);
  }
  
  
function showEffortDetails() {
  if (!jiraData || !jiraData.issues) {
    alert('Chưa có dữ liệu. Vui lòng tải dữ liệu trước.');
    return;
  }
  const assignees = {};
  jiraData.issues.forEach(issue => {
    const name = issue.fields.assignee ? issue.fields.assignee.displayName : 'Unassigned';
    if (!assignees[name]) assignees[name] = [];
    assignees[name].push(issue);
  });
  const rows = Object.entries(assignees).sort((a,b) => b[1].length - a[1].length);
  let content = '';
  content += '<div class="assignee-table-wrap">';
  content += '<table class="table"><thead><tr>';
  content += '<th>Assignee</th><th>Tổng</th><th>Đang làm</th><th>Quá hạn</th>';
  content += '</tr></thead><tbody>';
  rows.forEach(([assignee, issues]) => {
    const inProgress = issues.filter(it => {
      const st = it.fields.status && it.fields.status.name;
      return st === 'In Progress' || st === 'In Development';
    });
    const overdue = issues.filter(it => {
      const due = it.fields.duedate;
      const st = it.fields.status && it.fields.status.name;
      return due && new Date(due) < new Date() && st !== 'Done';
    });
    content += '<tr>';
    content += '<td>' + assignee + '</td>';
    content += '<td><a href="#" class="assignee-count" data-assignee="' + assignee.replace(/"/g,'&quot;') + '" data-filter="all">' + issues.length + '</a></td>';
    content += '<td><a href="#" class="assignee-count" data-assignee="' + assignee.replace(/"/g,'&quot;') + '" data-filter="inProgress">' + inProgress.length + '</a></td>';
    content += '<td><a href="#" class="assignee-count" data-assignee="' + assignee.replace(/"/g,'&quot;') + '" data-filter="overdue">' + overdue.length + '</a></td>';
    content += '</tr>';
  });
  content += '</tbody></table></div>';
  showDetailModal('Chi tiết Effort Nhân sự', content);
  // attach click handlers
  setTimeout(attachAssigneeCountClickHandlers, 0);
}


  // ====== AI ANALYSIS FUNCTIONS ======
  
  // Global storage for dashboard analysis results
  let dashboardAnalysisResults = {
    Overdue: [],
    IssueType: [],
    Effort: []
  };
  
  async function analyzeWithAI(analysisType, tableId) {
    const button = document.querySelector('#analyze' + analysisType + 'Btn');
    const tableBody = document.querySelector('#' + tableId + ' tbody');
    
    if (!jiraData || !jiraData.issues) {
      alert('Chưa có dữ liệu Jira. Vui lòng tải dữ liệu trước.');
      return;
    }
    
    try {
      // Disable button và hiển thị loading
      button.disabled = true;
      button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang phân tích...';
      
      tableBody.innerHTML = '<tr><td colspan="3" class="ai-loading"><i class="fas fa-robot fa-spin"></i> AI đang phân tích dữ liệu...</td></tr>';
      
      // Tạo prompt cho AI dựa trên loại phân tích
      let prompt = '';
      let relevantData = [];
      
      if (analysisType === 'Overdue') {
        const overdueIssues = jiraData.issues.filter(issue => {
          const dueDate = issue.fields.duedate;
          if (!dueDate) return false;
          return new Date(dueDate) < new Date() && issue.fields.status.name !== 'Done';
        });
        
        relevantData = overdueIssues.map(issue => ({
          key: issue.key,
          summary: issue.fields.summary,
          assignee: issue.fields.assignee ? issue.fields.assignee.displayName : 'Unassigned',
          dueDate: issue.fields.duedate,
          status: issue.fields.status.name,
          priority: issue.fields.priority ? issue.fields.priority.name : 'None'
        }));
        
        prompt = 'Phân tích rủi ro cho ' + overdueIssues.length + ' tickets quá hạn của dự án ' + currentProjectKey + '. Dữ liệu: ' + JSON.stringify(relevantData) + '. Hãy đưa ra nhận diện rủi ro và hành động đề xuất cụ thể.';
      
      } else if (analysisType === 'IssueType') {
        const issueTypes = {};
        jiraData.issues.forEach(issue => {
          const type = issue.fields.issuetype.name;
          issueTypes[type] = (issueTypes[type] || 0) + 1;
        });
        
        relevantData = issueTypes;
        prompt = 'Phân tích rủi ro dựa trên phân bổ issue types của dự án ' + currentProjectKey + '. Dữ liệu: ' + JSON.stringify(relevantData) + ' (tổng ' + jiraData.issues.length + ' tickets). Đưa ra nhận diện rủi ro và hành động đề xuất.';
      
      } else if (analysisType === 'Effort') {
        const assignees = {};
        jiraData.issues.forEach(issue => {
          const assignee = issue.fields.assignee ? issue.fields.assignee.displayName : 'Unassigned';
          assignees[assignee] = (assignees[assignee] || 0) + 1;
        });
        
        relevantData = assignees;
        prompt = 'Phân tích rủi ro về phân bổ nhân sự của dự án ' + currentProjectKey + '. Dữ liệu: ' + JSON.stringify(relevantData) + ' (tổng ' + jiraData.issues.length + ' tickets). Đưa ra nhận diện rủi ro và hành động đề xuất về quá tải nhân sự.';
      }
      
      // Gọi API AI
      const response = await fetch('/api/grok-analysis', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          prompt: prompt,
          analysisType: analysisType,
          projectKey: currentProjectKey,
          data: relevantData
        })
      });
      
      if (!response.ok) {
        throw new Error('AI analysis failed: ' + response.status);
      }
      
      const result = await response.json();
      
      if (!result.ok) {
        throw new Error(result.error || 'AI analysis failed');
      }
      
      // Lưu kết quả vào global storage
      dashboardAnalysisResults[analysisType] = result.analysis || [];
      
      // Hiển thị kết quả AI analysis
      displayAIAnalysis(result.analysis, tableBody);
      
      // ENABLE button "Thêm vào tổng hợp" sau khi phân tích xong
      enableAddToComprehensiveButton(analysisType);
      
    } catch (error) {
      console.error('AI Analysis error:', error);
      tableBody.innerHTML = '<tr><td colspan="3" style="text-align: center; color: #dc2626;">Lỗi phân tích AI: ' + error.message + '</td></tr>';
    } finally {
      // Re-enable button
      button.disabled = false;
      button.innerHTML = '<i class="fas fa-brain"></i><span>Phân tích AI</span>';
    }
  }
  
  // Enable "Thêm vào tổng hợp" button khi đã có analysis
  function enableAddToComprehensiveButton(analysisType) {
    const buttonId = 'add' + analysisType + 'ToComprehensive';
    const button = document.getElementById(buttonId);
    
    if (button && dashboardAnalysisResults[analysisType] && dashboardAnalysisResults[analysisType].length > 0) {
      button.disabled = false;
      button.title = 'Click để thêm phân tích vào báo cáo tổng hợp';
    }
  }
  
  function displayAIAnalysis(analysis, tableBody) {
    if (!analysis || !Array.isArray(analysis)) {
      tableBody.innerHTML = '<tr><td colspan="3" style="text-align: center; color: #6B778C;">Không có kết quả phân tích</td></tr>';
      return;
    }
    
    const rows = analysis.map(item => 
      '<tr>' +
        '<td>' + (item.risk || 'N/A') + '</td>' +
        '<td>' + (item.action || 'N/A') + '</td>' +
        '<td>' + 
          '<span class="badge ' + getPriorityClass(item.priority) + '">' + 
          (item.priority || 'Medium') + 
          '</span>' +
        '</td>' +
      '</tr>'
    ).join('');
    
    tableBody.innerHTML = rows;
  }
  
  function getPriorityClass(priority) {
    if (!priority) return 'amber';
    const p = priority.toLowerCase();
    if (p.includes('cao') || p.includes('high') || p.includes('urgent')) return 'red';
    if (p.includes('thấp') || p.includes('low')) return 'green';
    return 'amber';
  }

  // ====== COMPREHENSIVE RISK ANALYSIS ======
  
  async function generateRiskAnalysis() {
    const generateBtn = document.getElementById('generateRiskBtn');
    const analysisContent = document.getElementById('riskAnalysisContent');
    const tableBody = document.getElementById('riskAnalysisTableBody');
    
    if (!jiraData || !jiraData.issues) {
      alert('Chưa có dữ liệu Jira. Vui lòng tải dữ liệu trước.');
      return;
    }
    
    try {
      generateBtn.disabled = true;
      generateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i><span>Đang phân tích...</span>';
      
      analysisContent.style.display = 'block';
      tableBody.innerHTML = '<tr><td colspan="7" class="ai-loading"><i class="fas fa-robot fa-spin"></i> AI đang thực hiện phân tích rủi ro toàn diện...</td></tr>';
      
      // Tạo comprehensive data cho AI phân tích
      const comprehensiveData = {
        projectKey: currentProjectKey,
        totalIssues: jiraData.issues.length,
        overdueCount: jiraData.overdueCount || 0,
        issueTypes: getIssueTypeDistribution(),
        assigneeWorkload: getAssigneeWorkload(),
        priorityDistribution: getPriorityDistribution(),
        statusDistribution: getStatusDistribution(),
        timeMetrics: getTimeMetrics()
      };
      
      const response = await fetch('/api/comprehensive-risk-analysis', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          projectKey: currentProjectKey,
          data: comprehensiveData
        })
      });
      
      if (!response.ok) {
        throw new Error('Risk analysis failed: ' + response.status);
      }
      
      const result = await response.json();
      
      if (!result.ok) {
        throw new Error(result.error || 'Risk analysis failed');
      }
      
      currentRisks = result.risks; // Lưu data để edit sau
      displayComprehensiveRiskAnalysis(result.risks);
      
    } catch (error) {
      console.error('Risk Analysis error:', error);
      tableBody.innerHTML = '<tr><td colspan="7" style="text-align:center;color:#dc2626;padding:20px;">Lỗi phân tích rủi ro: ' + error.message + '</td></tr>';
    } finally {
      generateBtn.disabled = false;
      generateBtn.innerHTML = '<i class="fas fa-brain"></i><span>Generate Risk Analysis</span>';
    }
  }
  
  function getIssueTypeDistribution() {
    const distribution = {};
    jiraData.issues.forEach(issue => {
      const type = issue.fields.issuetype.name;
      distribution[type] = (distribution[type] || 0) + 1;
    });
    return distribution;
  }
  
  function getAssigneeWorkload() {
    const workload = {};
    jiraData.issues.forEach(issue => {
      const assignee = issue.fields.assignee ? issue.fields.assignee.displayName : 'Unassigned';
      workload[assignee] = (workload[assignee] || 0) + 1;
    });
    return workload;
  }
  
  function getPriorityDistribution() {
    const distribution = {};
    jiraData.issues.forEach(issue => {
      const priority = issue.fields.priority ? issue.fields.priority.name : 'None';
      distribution[priority] = (distribution[priority] || 0) + 1;
    });
    return distribution;
  }
  
  function getStatusDistribution() {
    const distribution = {};
    jiraData.issues.forEach(issue => {
      const status = issue.fields.status.name;
      distribution[status] = (distribution[status] || 0) + 1;
    });
    return distribution;
  }
  
  function getTimeMetrics() {
    const now = new Date();
    const overdueIssues = jiraData.issues.filter(issue => {
      const dueDate = issue.fields.duedate;
      return dueDate && new Date(dueDate) < now && issue.fields.status.name !== 'Done';
    });
    
    const recentIssues = jiraData.issues.filter(issue => {
      const created = new Date(issue.fields.created);
      const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
      return created > oneWeekAgo;
    });
    
    return {
      overdueCount: overdueIssues.length,
      recentIssuesCount: recentIssues.length,
      avgIssuesPerAssignee: jiraData.issues.length / Object.keys(getAssigneeWorkload()).length
    };
  }
  
  function displayComprehensiveRiskAnalysis(risks) {
    if (!risks || !Array.isArray(risks)) {
      document.getElementById('riskAnalysisTableBody').innerHTML = 
        '<tr><td colspan="8" style="text-align:center;color:#6B778C;padding:20px;">Không có kết quả phân tích</td></tr>';
      return;
    }
    
    const tableBody = document.getElementById('riskAnalysisTableBody');
    const rows = risks.map((risk, index) => {
      const scoreClass = getRiskScoreClass(risk.score);
      const levelClass = getRiskLevelClass(risk.level);
      const statusClass = getRiskStatusClass(risk.status);
      
      // Generate detailed explanation if not provided by backend
      let explanation = risk.explanation;
      if (!explanation || explanation === 'Điểm và mức độ dựa trên phân tích AI tổng hợp từ dữ liệu dự án') {
        explanation = generateDetailedExplanation(risk);
      }
      
      return '<tr>' +
        '<td class="risk-score ' + scoreClass + '">' + risk.score + '</td>' +
        '<td class="' + levelClass + '">' + risk.level + '</td>' +
        '<td class="editable-cell" data-field="explanation" data-index="' + index + '" style="font-size:12px;color:#6B778C;">' + 
          explanation + 
          '<div class="edit-hint">Nhấp đúp để chỉnh sửa</div>' +
        '</td>' +
        '<td><span class="risk-status ' + statusClass + '">' + risk.status + '</span></td>' +
        '<td class="editable-cell" data-field="description" data-index="' + index + '">' + 
          risk.description + 
          '<div class="edit-hint">Nhấp đúp để chỉnh sửa</div>' +
        '</td>' +
        '<td class="editable-cell" data-field="action" data-index="' + index + '">' + 
          risk.action + 
          '<div class="edit-hint">Nhấp đúp để chỉnh sửa</div>' +
        '</td>' +
        '<td class="pic-info">' + (risk.pic || 'Unassigned') + '</td>' +
        '<td>' +
          '<button class="jira-btn" data-risk-index="' + index + '" data-description="' + 
          risk.description.replace(/"/g, '&quot;') + '" data-action="' + 
          risk.action.replace(/"/g, '&quot;') + '">' +
            '<i class="fab fa-jira"></i>' +
          '</button>' +
        '</td>' +
      '</tr>'
    }).join('');
    
    tableBody.innerHTML = rows;
    
    // Thêm event listeners cho các Jira buttons
    tableBody.querySelectorAll('.jira-btn').forEach(button => {
      button.addEventListener('click', function() {
        const riskIndex = this.getAttribute('data-risk-index');
        const description = this.getAttribute('data-description');
        const action = this.getAttribute('data-action');
        createJiraTicket(parseInt(riskIndex), description, action);
      });
    });
    
    // Thêm event listeners cho editable cells
    tableBody.querySelectorAll('.editable-cell').forEach(cell => {
      cell.addEventListener('dblclick', function() {
        makeEditable(this);
      });
    });
  }
  
  function getRiskScoreClass(score) {
    const scoreNum = typeof score === 'string' ? parseInt(score) : score;
    if (scoreNum <= 4) return 'risk-level-low';
    if (scoreNum <= 9) return 'risk-level-medium';
    if (scoreNum <= 16) return 'risk-level-high';
    return 'risk-level-extreme';
  }
  
  function getRiskLevelClass(level) {
    switch(level.toLowerCase()) {
      case 'low': return 'risk-level-low';
      case 'medium': return 'risk-level-medium';
      case 'high': return 'risk-level-high';
      case 'extreme': return 'risk-level-extreme';
      default: return '';
    }
  }
  
  function getRiskStatusClass(status) {
    if (status.includes('Chấp nhận')) return 'status-accept';
    if (status.includes('Cần xem xét')) return 'status-consider';
    if (status.includes('Cần quản lý')) return 'status-manage';
    if (status.includes('Không chấp nhận')) return 'status-reject';
    return '';
  }
  
  // Generate detailed explanation based on score and level
  function generateDetailedExplanation(risk) {
    const score = typeof risk.score === 'string' ? parseInt(risk.score) : risk.score;
    const level = (risk.level || '').toLowerCase();
    const totalIssues = jiraData ? jiraData.issues.length : 0;
    const overdueCount = jiraData ? jiraData.overdueCount : 0;
    const overdueRate = totalIssues > 0 ? Math.round((overdueCount / totalIssues) * 100) : 0;
    
    // Phân tích chi tiết dữ liệu Jira
    const issueTypeData = getIssueTypeDistribution();
    const assigneeData = getAssigneeWorkload();
    const priorityData = getPriorityDistribution();
    const statusData = getStatusDistribution();
    
    // Tìm vấn đề cụ thể
    const bugCount = issueTypeData['Bug'] || 0;
    const storyCount = issueTypeData['Story'] || 0;
    const taskCount = issueTypeData['Task'] || 0;
    const bugRate = totalIssues > 0 ? Math.round((bugCount / totalIssues) * 100) : 0;
    
    const highPriorityCount = (priorityData['Highest'] || 0) + (priorityData['High'] || 0);
    const criticalCount = priorityData['Critical'] || priorityData['Highest'] || 0;
    
    const inProgressCount = statusData['In Progress'] || 0;
    const blockedCount = statusData['Blocked'] || 0;
    
    // Tìm assignee quá tải (>10 tickets)
    const overloadedAssignees = Object.entries(assigneeData)
      .filter(([name, count]) => count > 10 && name !== 'Unassigned')
      .sort((a, b) => b[1] - a[1]);
    
    // Kiểm tra nguồn gốc rủi ro (từ dashboard nào)
    const riskSource = detectRiskSource(risk);
    
    let explanation = '';
    
    // HEADER: Nguồn rủi ro (từ dashboard nào hoặc comprehensive)
    if (riskSource) {
      explanation += '<div style="background:#e8f2ff;padding:8px;border-radius:4px;margin-bottom:8px;">';
      explanation += '🔍 <strong>Nguồn phát hiện:</strong> ' + riskSource + '<br>';
      explanation += '</div>';
    }
    
    // PHẦN 1: CHỈ RÕ VẤN ĐỀ CỤ THỂ
    explanation += '🎯 <strong>VẤN ĐỀ CỤ THỂ:</strong><br>';
    explanation += '<div style="padding-left:12px;border-left:3px solid #0052cc;margin:8px 0;">';
    
    // Phân tích Issue Type
    if (bugRate > 20) {
      explanation += '🐛 <strong>Issue Type - Bug quá cao:</strong> ' + bugCount + ' bugs (' + bugRate + '% tổng số tickets) - Vượt ngưỡng an toàn 20%<br>';
      explanation += '   → <em>Có vấn đề về chất lượng code hoặc testing không đủ kỹ</em><br>';
    }
    if (taskCount < storyCount * 0.3) {
      explanation += '� <strong>Issue Type - Thiếu tasks:</strong> Chỉ có ' + taskCount + ' tasks so với ' + storyCount + ' stories<br>';
      explanation += '   → <em>Stories chưa được breakdown đủ chi tiết, khó theo dõi tiến độ</em><br>';
    }
    
    // Phân tích Overdue
    if (overdueCount > 0) {
      explanation += '⏰ <strong>Tiến độ - Tickets quá hạn:</strong> ' + overdueCount + ' tickets (' + overdueRate + '%)<br>';
      if (overdueRate > 15) {
        explanation += '   → <em>Tỷ lệ cao - Có vấn đề về estimation hoặc resource allocation</em><br>';
      } else {
        explanation += '   → <em>Cần review lại deadline và priority</em><br>';
      }
    }
    
    // Phân tích Priority
    if (criticalCount > 0) {
      explanation += '🚨 <strong>Priority - Critical/Highest:</strong> ' + criticalCount + ' tickets ưu tiên cao nhất<br>';
      explanation += '   → <em>Cần xử lý ngay để tránh block toàn bộ dự án</em><br>';
    }
    if (highPriorityCount > totalIssues * 0.3) {
      explanation += '🔴 <strong>Priority - High priority quá nhiều:</strong> ' + highPriorityCount + ' tickets high priority (' + Math.round((highPriorityCount/totalIssues)*100) + '%)<br>';
      explanation += '   → <em>Có thể do prioritization không chính xác hoặc scope creep</em><br>';
    }
    
    // Phân tích Workload
    if (overloadedAssignees.length > 0) {
      explanation += '👥 <strong>Workload - Nhân sự quá tải:</strong><br>';
      overloadedAssignees.slice(0, 3).forEach(([name, count]) => {
        explanation += '   • ' + name + ': <strong>' + count + ' tickets</strong> - Quá tải nghiêm trọng!<br>';
      });
      explanation += '   → <em>Cần redistribute work hoặc bổ sung thêm resource</em><br>';
    }
    
    // Phân tích Status
    if (blockedCount > 0) {
      explanation += '🚫 <strong>Status - Tickets bị block:</strong> ' + blockedCount + ' tickets đang bị blocked<br>';
      explanation += '   → <em>Cần remove blockers khẩn cấp</em><br>';
    }
    if (inProgressCount > totalIssues * 0.4) {
      explanation += '🔄 <strong>Status - In Progress quá nhiều:</strong> ' + inProgressCount + ' tickets (' + Math.round((inProgressCount/totalIssues)*100) + '%)<br>';
      explanation += '   → <em>Team đang làm song song quá nhiều tasks, cần focus hơn</em><br>';
    }
    
    explanation += '</div><br>';
    
    // PHẦN 2: ĐIỂM SỐ & CĂN CỨ TÍNH TOÁN
    explanation += '📊 <strong>ĐIỂM SỐ: ' + score + '/20 (Mức độ: ' + risk.level + ')</strong><br>';
    explanation += '<em>Công thức:</em> <strong>Probability × Impact</strong><br>';
    explanation += '<div style="padding-left:12px;margin:8px 0;">';
    
    if (score >= 1 && score <= 4) {
      explanation += '✅ <strong>Probability:</strong> Thấp (1-2) - Overdue ' + overdueRate + '%, workload cân bằng, bugs trong tầm kiểm soát<br>';
      explanation += '✅ <strong>Impact:</strong> Thấp (1-2) - Ảnh hưởng giới hạn, không đe dọa mục tiêu chính<br>';
      explanation += '→ <span style="color:#155724;font-weight:bold;">Rủi ro THẤP</span>: Chấp nhận được, chỉ cần monitoring<br>';
    } else if (score >= 5 && score <= 9) {
      explanation += '⚠️ <strong>Probability:</strong> Trung bình (2-3) - Overdue ' + overdueRate + '%, có dấu hiệu cảnh báo về workload/bugs<br>';
      explanation += '⚠️ <strong>Impact:</strong> Trung bình (2-3) - Ảnh hưởng 1 số module, chưa critical<br>';
      explanation += '→ <span style="color:#856404;font-weight:bold;">Rủi ro TRUNG BÌNH</span>: Cần theo dõi và lập kế hoạch giảm thiểu<br>';
    } else if (score >= 10 && score <= 16) {
      explanation += '🔴 <strong>Probability:</strong> Cao (3-4) - Overdue ' + overdueRate + '%, ' + highPriorityCount + ' high priority, workload không cân bằng<br>';
      explanation += '🔴 <strong>Impact:</strong> Cao (3-4) - Ảnh hưởng nghiêm trọng đến tiến độ/chất lượng/chi phí<br>';
      explanation += '→ <span style="color:#721c24;font-weight:bold;">Rủi ro CAO</span>: Cần hành động khắc phục NGAY<br>';
    } else {
      explanation += '🚨 <strong>Probability:</strong> Rất cao (4-5) - Overdue >' + overdueRate + '%, ' + criticalCount + ' critical issues, team quá tải<br>';
      explanation += '🚨 <strong>Impact:</strong> Rất cao (4-5) - Risk delay milestone, vượt budget, mất khách hàng<br>';
      explanation += '→ <span style="color:#491217;font-weight:bold;">Rủi ro CỰC CAO</span>: KHÔNG CHẤP NHẬN - Báo stakeholder NGAY!<br>';
    }
    
    explanation += '</div><br>';
    
    // PHẦN 3: HÀNH ĐỘNG CỤ THỂ DỰA TRÊN VẤN ĐỀ
    explanation += '✅ <strong>HÀNH ĐỘNG KHUYẾN NGHỊ:</strong><br>';
    explanation += '<div style="padding-left:12px;background:#f8fafc;padding:8px;border-radius:4px;">';
    
    if (bugRate > 20) {
      explanation += '1. Tăng cường code review và unit testing<br>';
      explanation += '2. Organize bug bash session với toàn team<br>';
    }
    if (overdueCount > 0) {
      explanation += '1. Review lại ' + overdueCount + ' tickets quá hạn, re-estimate và re-prioritize<br>';
      explanation += '2. Họp với assignees để hiểu blockers<br>';
    }
    if (overloadedAssignees.length > 0) {
      explanation += '1. Redistribute ' + overloadedAssignees[0][1] + ' tickets của ' + overloadedAssignees[0][0] + ' cho team khác<br>';
      explanation += '2. Xem xét bổ sung resource nếu workload liên tục cao<br>';
    }
    if (criticalCount > 0) {
      explanation += '1. All-hands meeting để focus vào ' + criticalCount + ' critical tickets<br>';
      explanation += '2. Assign senior members cho critical issues<br>';
    }
    if (level === 'extreme' || level === 'high') {
      explanation += '1. <strong>Báo cáo stakeholder</strong> về tình trạng nghiêm trọng<br>';
      explanation += '2. <strong>Re-scope</strong> để giảm tải nếu cần<br>';
    }
    
    explanation += '</div><br>';
    
    // PHẦN 4: NGUỒN DỮ LIỆU
    explanation += '📈 <strong>NGUỒN DỮ LIỆU:</strong><br>';
    explanation += '• ' + totalIssues + ' tickets từ Jira (realtime)<br>';
    explanation += '• Issue Types: Story(' + storyCount + '), Task(' + taskCount + '), Bug(' + bugCount + ')<br>';
    explanation += '• Priority: Critical(' + criticalCount + '), High(' + (highPriorityCount-criticalCount) + ')<br>';
    explanation += '• Workload: ' + Object.keys(assigneeData).length + ' assignees, ' + overloadedAssignees.length + ' người quá tải<br>';
    explanation += '• Độ tin cậy: <strong>Cao</strong> (dữ liệu thực, không ước lượng)<br>';
    
    return explanation;
  }
  
  // Helper function: Detect risk source from dashboard
  function detectRiskSource(risk) {
    const desc = (risk.description || '').toLowerCase();
    const action = (risk.action || '').toLowerCase();
    
    if (desc.includes('quá hạn') || desc.includes('overdue') || desc.includes('delay')) {
      return '📊 Dashboard 1: Ticket quá hạn';
    }
    if (desc.includes('issue type') || desc.includes('bug') && desc.includes('story') || desc.includes('task')) {
      return '📊 Dashboard 2: Issue Type Distribution';
    }
    if (desc.includes('workload') || desc.includes('nhân sự') || desc.includes('assignee') || desc.includes('quá tải')) {
      return '📊 Dashboard 3: Effort nhân sự';
    }
    if (risk.source === 'dashboard') {
      return '📊 Dashboard Analysis';
    }
    return '🤖 AI Comprehensive Assessment';
  }
  
  // ====== EDITABLE CELLS FUNCTIONALITY ======
  
  let currentRisks = []; // Store current risks data
  
  function makeEditable(cell) {
    if (cell.classList.contains('editing')) return;
    
    const originalText = cell.childNodes[0].textContent.trim();
    const field = cell.getAttribute('data-field');
    const index = parseInt(cell.getAttribute('data-index'));
    
    cell.classList.add('editing');
    
    const textarea = document.createElement('textarea');
    textarea.className = 'editable-textarea';
    textarea.value = originalText;
    
    cell.innerHTML = '';
    cell.appendChild(textarea);
    
    textarea.focus();
    textarea.select();
    
    // Save on Enter or blur
    function saveEdit() {
      const newText = textarea.value.trim();
      if (newText && newText !== originalText) {
        // Cập nhật data
        if (currentRisks[index]) {
          currentRisks[index][field] = newText;
          
          // Cập nhật Jira button data
          const jiraBtn = cell.parentElement.querySelector('.jira-btn');
          if (jiraBtn) {
            jiraBtn.setAttribute('data-' + field, newText);
          }
        }
      }
      
      // Khôi phục cell
      cell.classList.remove('editing');
      cell.innerHTML = (newText || originalText) + 
        '<div class="edit-hint">Nhấp đúp để chỉnh sửa</div>';
      
      // Re-add event listener
      cell.addEventListener('dblclick', function() {
        makeEditable(this);
      });
    }
    
    textarea.addEventListener('blur', saveEdit);
    textarea.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        saveEdit();
      }
      if (e.key === 'Escape') {
        cell.classList.remove('editing');
        cell.innerHTML = originalText + 
          '<div class="edit-hint">Nhấp đúp để chỉnh sửa</div>';
        cell.addEventListener('dblclick', function() {
          makeEditable(this);
        });
      }
    });
  }
  
  // ====== JIRA TICKET CREATION ======
  
  // Global variables for ticket creation
  let pendingTicketData = null;
  
  // Function to show confirmation modal
  async function createJiraTicket(riskIndex, description, action) {
    if (!currentProjectKey) {
      alert('Vui lòng chọn dự án trước');
      return;
    }
    
    // Lấy thông tin risk đầy đủ từ currentRisks
    const riskData = currentRisks && currentRisks[riskIndex] ? currentRisks[riskIndex] : null;
    
    // Gọi AI để phân tích trước và hiển thị trong popup
    const button = document.querySelector('[data-risk-index="' + riskIndex + '"]');
    const originalContent = button.innerHTML;
    button.disabled = true;
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Analyzing...';
    
    try {
      // Get AI analysis first
      const aiAnalysisResponse = await fetch('/api/analyze-risk-fields', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ riskData })
      });
      
      let aiFields = { probability: 'Medium', estimatedImpact: 'Medium', riskSource: 'Technical', riskType: 'Progress' };
      if (aiAnalysisResponse.ok) {
        const aiResult = await aiAnalysisResponse.json();
        if (aiResult.ok) {
          aiFields = aiResult.fields;
        }
      }
      
      // Store data for later
      pendingTicketData = {
        riskIndex,
        projectKey: currentProjectKey,
        summary: description,
        description: action,
        issueType: 'Risk',
        riskData,
        aiFields,
        button,
        originalContent
      };
      
      // Show confirmation modal
      showConfirmTicketModal(pendingTicketData);
      
    } catch (error) {
      console.error('Error analyzing risk:', error);
      alert('Lỗi phân tích: ' + error.message);
    } finally {
      button.disabled = false;
      button.innerHTML = originalContent;
    }
  }
  
  // Show confirmation modal with all details
  function showConfirmTicketModal(ticketData) {
    const modal = document.getElementById('confirmTicketModal');
    
    // Populate modal content
    document.getElementById('confirmProjectKey').textContent = ticketData.projectKey;
    document.getElementById('confirmSummary').textContent = ticketData.summary;
    document.getElementById('confirmDescription').textContent = ticketData.description;
    
    // Calculate due date
    const dueDate = new Date();
    dueDate.setDate(dueDate.getDate() + 7);
    const dueDateStr = dueDate.toLocaleDateString('vi-VN');
    
    // Populate AI fields - tách nhỏ để tránh lỗi parsing
    const fields = [
      { label: 'Probability', value: ticketData.aiFields.probability },
      { label: 'Estimated Impact', value: ticketData.aiFields.estimatedImpact },
      { label: 'Risk Source', value: ticketData.aiFields.riskSource },
      { label: 'Risk Type', value: ticketData.aiFields.riskType },
      { label: 'Priority', value: 'Major' },
      { label: 'Due Date', value: dueDateStr },
      { label: 'Trigger', value: 'AI' }
    ];
    
    let aiFieldsHtml = '';
    for (const field of fields) {
      aiFieldsHtml += '<div>';
      aiFieldsHtml += '<strong style="color: #6B778C;">' + field.label + ':</strong>';
      aiFieldsHtml += '<div style="margin-top: 4px; color: #172B4D;">' + field.value + '</div>';
      aiFieldsHtml += '</div>';
    }
    
    document.getElementById('confirmAIFields').innerHTML = aiFieldsHtml;
    
    // Show modal
    modal.style.display = 'block';
  }
  
  // Actually create the ticket after confirmation
  async function actuallyCreateJiraTicket() {
    if (!pendingTicketData) return;
    
    const modal = document.getElementById('confirmTicketModal');
    const button = pendingTicketData.button;
    const originalContent = pendingTicketData.originalContent;
    
    // Close modal
    modal.style.display = 'none';
    
    try {
      button.disabled = true;
      button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating...';
      
      const response = await fetch('/api/create-jira-ticket', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          projectKey: pendingTicketData.projectKey,
          summary: pendingTicketData.summary,
          description: pendingTicketData.description,
          issueType: pendingTicketData.issueType,
          riskData: pendingTicketData.riskData
        })
      });
      
      const result = await response.json();
      
      if (result.ok) {
        button.innerHTML = '<i class="fas fa-check"></i> Đã tạo';
        button.style.background = '#22c55e';
        
        // Show success message với link ticket
        if (result.ticketKey) {
          setTimeout(() => {
            if (confirm('Ticket ' + result.ticketKey + ' đã được tạo thành công! Bạn có muốn mở Jira để xem?')) {
              window.open(result.ticketUrl, '_blank');
            }
          }, 1000);
        }
      } else {
        throw new Error(result.error || 'Tạo ticket thất bại');
      }
      
    } catch (error) {
      console.error('Create ticket error:', error);
      alert('Lỗi tạo ticket: ' + error.message);
      button.innerHTML = originalContent;
    } finally {
      setTimeout(() => {
        button.disabled = false;
        if (button.innerHTML.includes('Đã tạo')) {
          button.innerHTML = originalContent;
          button.style.background = '#0052cc';
        }
      }, 3000);
      
      // Clear pending data
      pendingTicketData = null;
    }
  }
  
  // Cancel ticket creation
  function cancelTicketCreation() {
    const modal = document.getElementById('confirmTicketModal');
    modal.style.display = 'none';
    pendingTicketData = null;
  }
  
  // ====== ADD DASHBOARD RISKS TO COMPREHENSIVE ASSESSMENT ======
  
  function addDashboardToComprehensive(analysisType, dashboardName) {
    const risks = dashboardAnalysisResults[analysisType];
    
    if (!risks || risks.length === 0) {
      alert('Chưa có phân tích AI từ dashboard ' + dashboardName + '. Vui lòng chạy phân tích AI trước.');
      return;
    }
    
    // Tạo risk items từ dashboard analysis với format phù hợp comprehensive table
    const newRisks = risks.map((item, idx) => {
      const priority = item.priority || 'Medium';
      let score = 5; // default
      let level = 'Medium';
      
      // Map priority to score and level
      const priorityLower = priority.toLowerCase();
      if (priorityLower.includes('cao') || priorityLower.includes('high') || priorityLower.includes('urgent')) {
        score = Math.floor(Math.random() * 5) + 12; // 12-16
        level = 'High';
      } else if (priorityLower.includes('thấp') || priorityLower.includes('low')) {
        score = Math.floor(Math.random() * 4) + 1; // 1-4
        level = 'Low';
      } else {
        score = Math.floor(Math.random() * 4) + 5; // 5-9
        level = 'Medium';
      }
      
      // Generate detailed explanation based on dashboard type and actual data
      let explanation = '';
      if (analysisType === 'Overdue') {
        const totalIssues = jiraData.issues.length;
        const overdueCount = jiraData.overdueCount || 0;
        const overduePercent = totalIssues > 0 ? Math.round((overdueCount / totalIssues) * 100) : 0;
        
        explanation = 'Điểm ' + score + '/16 (' + level + ') - Nguồn: Dashboard Ticket Quá hạn. ' +
          'Hiện có ' + overdueCount + ' tickets quá hạn (' + overduePercent + '% tổng số). ' +
          'Mức độ ' + level + ' vì ';
        
        if (level === 'High') {
          explanation += 'tỷ lệ quá hạn cao (>' + (overduePercent > 20 ? '20' : '15') + '%), ảnh hưởng nghiêm trọng đến tiến độ dự án và commitment với khách hàng.';
        } else if (level === 'Medium') {
          explanation += 'tỷ lệ quá hạn ở mức trung bình (10-20%), cần theo dõi chặt chẽ để tránh leo thang.';
        } else {
          explanation += 'tỷ lệ quá hạn thấp (<10%), trong ngưỡng kiểm soát nhưng vẫn cần giám sát.';
        }
        
      } else if (analysisType === 'IssueType') {
        const issueTypes = getIssueTypeDistribution();
        const totalIssues = jiraData.issues.length;
        const bugCount = issueTypes['Bug'] || 0;
        const bugPercent = totalIssues > 0 ? Math.round((bugCount / totalIssues) * 100) : 0;
        
        explanation = 'Điểm ' + score + '/16 (' + level + ') - Nguồn: Dashboard Issue Type. ' +
          'Phân bổ công việc: ' + Object.keys(issueTypes).length + ' loại issue trong dự án. ' +
          'Mức độ ' + level + ' vì ';
        
        if (level === 'High') {
          explanation += 'phát hiện bất thường trong phân bổ (Bug chiếm ' + bugPercent + '%, cao hơn ngưỡng an toàn 15%), ảnh hưởng đến chất lượng sản phẩm.';
        } else if (level === 'Medium') {
          explanation += 'phân bổ issue types ở mức chấp nhận được nhưng cần cân bằng giữa development và maintenance.';
        } else {
          explanation += 'phân bổ issue types hợp lý, Bug rate < 10%, tập trung vào phát triển tính năng mới.';
        }
        
      } else if (analysisType === 'Effort') {
        const assigneeWorkload = getAssigneeWorkload();
        const assignees = Object.keys(assigneeWorkload);
        const totalIssues = jiraData.issues.length;
        const avgWorkload = assignees.length > 0 ? Math.round(totalIssues / assignees.length) : 0;
        const maxWorkload = Math.max(...Object.values(assigneeWorkload));
        const overloadedCount = Object.values(assigneeWorkload).filter(w => w > avgWorkload * 1.5).length;
        
        explanation = 'Điểm ' + score + '/16 (' + level + ') - Nguồn: Dashboard Effort Nhân sự. ' +
          'Có ' + assignees.length + ' assignees, trung bình ' + avgWorkload + ' tickets/người. ' +
          'Mức độ ' + level + ' vì ';
        
        if (level === 'High') {
          explanation += overloadedCount + ' nhân sự bị quá tải (>' + Math.round(avgWorkload * 1.5) + ' tickets), ' +
            'người có workload cao nhất: ' + maxWorkload + ' tickets. Nguy cơ cao về burnout và chất lượng.';
        } else if (level === 'Medium') {
          explanation += 'phân bổ công việc chưa đều, có sự chênh lệch giữa các assignee. Cần rebalance để tối ưu hiệu suất team.';
        } else {
          explanation += 'phân bổ công việc tương đối đồng đều, workload trong ngưỡng kiểm soát cho từng thành viên.';
        }
      }
      
      return {
        score: score,
        level: level,
        explanation: explanation,
        status: level === 'High' ? 'Cần quản lý ngay' : (level === 'Low' ? 'Chấp nhận' : 'Cần xem xét'),
        description: item.risk || 'N/A',
        action: item.action || 'N/A',
        pic: 'AI - ' + dashboardName
      };
    });
    
    // Merge with existing risks
    if (!currentRisks) currentRisks = [];
    currentRisks = currentRisks.concat(newRisks);
    
    // Display updated comprehensive table
    const analysisContent = document.getElementById('riskAnalysisContent');
    analysisContent.style.display = 'block';
    displayComprehensiveRiskAnalysis(currentRisks);
    
    // UPDATE: Disable button và đổi UI sau khi thêm thành công
    const buttonId = 'add' + analysisType + 'ToComprehensive';
    const button = document.getElementById(buttonId);
    if (button) {
      button.disabled = true;
      button.classList.add('added');
      button.innerHTML = '<i class="fas fa-check"></i><span>Đã thêm vào tổng hợp</span>';
      button.title = 'Đã thêm vào phân tích tổng hợp';
    }
    
    // Scroll to comprehensive assessment
    document.querySelector('.risk-analysis-section').scrollIntoView({ behavior: 'smooth', block: 'start' });
    
    // Show success notification
    setTimeout(() => {
      alert('✅ Đã thêm ' + newRisks.length + ' rủi ro từ ' + dashboardName + ' vào phân tích tổng hợp!');
    }, 500);
  }
  
  // ====== EVENT LISTENERS ======
  
  projectSelect.addEventListener('change', function() {
    currentProjectKey = this.value;
  });
  
  loadDataBtn.addEventListener('click', loadIssues);
  
  // KPI Click handlers
  document.querySelectorAll('.clickable-kpi').forEach(box => {
    box.addEventListener('click', function() {
      if (!currentProjectKey) {
        alert('Vui lòng chọn dự án trước');
        return;
      }
      
      const jql = this.getAttribute('data-jql').replace(/PROJECT_KEY/g, currentProjectKey);
      const title = this.getAttribute('data-title');
      showJqlModal(title, jql);
    });
  });
  
  
  // Inline JQL copy buttons
  document.querySelectorAll('.jql-copy-inline').forEach(btn => {
    btn.addEventListener('click', function(e) {
      e.preventDefault();
      const target = this.getAttribute('data-target');
      const el = document.getElementById(target);
      const text = el ? el.textContent : '';
      if (!text) return;
      navigator.clipboard.writeText(text).then(() => {
        const original = this.textContent;
        this.textContent = 'Đã sao chép';
        setTimeout(() => this.textContent = original, 1500);
      }).catch(() => alert('Không thể sao chép JQL'));
    });
  });
// Detail button handlers
  document.getElementById('overdueDetailBtn').addEventListener('click', showOverdueDetails);
  document.getElementById('issueTypeDetailBtn').addEventListener('click', showIssueTypeDetails);
  document.getElementById('effortDetailBtn').addEventListener('click', showEffortDetails);
  
  // AI Analysis button handlers
  document.getElementById('analyzeOverdueBtn').addEventListener('click', () => analyzeWithAI('Overdue', 'overdueRiskTable'));
  document.getElementById('analyzeIssueTypeBtn').addEventListener('click', () => analyzeWithAI('IssueType', 'issueTypeRiskTable'));
  document.getElementById('analyzeEffortBtn').addEventListener('click', () => analyzeWithAI('Effort', 'effortRiskTable'));
  
  // Add to Comprehensive button handlers
  document.getElementById('addOverdueToComprehensive').addEventListener('click', () => addDashboardToComprehensive('Overdue', 'Ticket Quá hạn'));
  document.getElementById('addIssueTypeToComprehensive').addEventListener('click', () => addDashboardToComprehensive('IssueType', 'Issue Type'));
  document.getElementById('addEffortToComprehensive').addEventListener('click', () => addDashboardToComprehensive('Effort', 'Effort Nhân sự'));
  
  // Risk Analysis button handler
  document.getElementById('generateRiskBtn').addEventListener('click', generateRiskAnalysis);
  
  // Risk Info Guide handlers
  document.getElementById('riskInfoBtn').addEventListener('click', function() {
    const guidePanel = document.getElementById('riskScoringGuide');
    if (guidePanel.style.display === 'none' || !guidePanel.style.display) {
      guidePanel.style.display = 'block';
    } else {
      guidePanel.style.display = 'none';
    }
  });
  
  document.getElementById('closeRiskGuide').addEventListener('click', function() {
    document.getElementById('riskScoringGuide').style.display = 'none';
  });
  
  // Modal handlers
  document.getElementById('closeModal').addEventListener('click', hideJqlModal);
  document.getElementById('copyJql').addEventListener('click', copyJqlToClipboard);
  document.getElementById('closeDetailModal').addEventListener('click', hideDetailModal);
  
  // Confirm Ticket Modal handlers
  document.getElementById('closeConfirmModal').addEventListener('click', cancelTicketCreation);
  document.getElementById('cancelCreateTicket').addEventListener('click', cancelTicketCreation);
  document.getElementById('confirmCreateTicket').addEventListener('click', actuallyCreateJiraTicket);
  
  // Close modals when clicking outside
  window.addEventListener('click', function(event) {
    const jqlModal = document.getElementById('jqlModal');
    const detailModal = document.getElementById('detailModal');
    const confirmModal = document.getElementById('confirmTicketModal');
    
    if (event.target === jqlModal) {
      hideJqlModal();
    }
    if (event.target === detailModal) {
      hideDetailModal();
    }
    if (event.target === confirmModal) {
      cancelTicketCreation();
    }
  });
  
  // Load projects khi trang load
  loadProjects();
});
</script>
</body></html>`;
}

function chatBotHTML() {
  return `<!doctype html>
<html lang="vi">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>AI Chat Bot — PMO</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0"></script>
<style>
  /* ====== Enhanced Design System (matching Risk Management) ====== */
  :root{
    --bg:#f0f4f8;
    --card:#ffffff;
    --soft:#f8fafc;
    --text:#1a202c;
    --muted:#718096;
    --line:#e2e8f0;
    --primary:#009639;
    --primary-600:#006b2a;
    --primary-50:#f0fdf4;
    --accent:#22c55e;
    --radius:20px;
    --shadow:0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    --shadow-lg:0 25px 50px -12px rgba(0, 0, 0, 0.25);
    --shadow-xl:0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{margin:0;background:linear-gradient(135deg, #f0f4f8 0%, #e2e8f0 100%);color:var(--text);font:15px/1.6 "Inter",system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}

  /* Header giống ảnh đính kèm */
  .header-container {
    background: var(--card);
    padding: 20px 0;
    border-bottom: 1px solid var(--line);
    box-shadow: var(--shadow);
  }
  .header-content {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 32px;
    display: flex;
    align-items: center;
    justify-content: space-between; /* Giữ lại để đẩy 2 bên ra */
  }
  .header-left {
    display: flex;
    align-items: center;
    gap: 16px;
  }
  .back-button {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    background: transparent;
    border: 1px solid var(--line);
    border-radius: 8px;
    color: var(--primary);
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
  }
  .back-button:hover {
    background: var(--primary-50);
    transform: translateX(-4px);
  }
  .back-button i {
    font-size: 16px;
  }
  /* === THAY ĐỔI QUAN TRỌNG === */
  /* Tạo class mới cho phần tiêu đề để căn giữa */
  .header-center {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    align-items: center;
    gap: 12px;
  }
  .header-title-container {
    display: flex;
    align-items: center;
    gap: 12px;
  }
  .header-icon {
    width: 40px;
    height: 40px;
    background: var(--primary-50);
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--primary);
  }
  .header-icon i {
    font-size: 20px;
  }
  .header-title {
    font-size: 24px;
    font-weight: 700;
    color: var(--primary);
    margin: 0;
  }
  .header-right {
    display: flex;
    gap: 12px;
  }
  .header-button {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 16px;
    background: var(--soft);
    border: 1px solid var(--line);
    border-radius: 10px;
    color: var(--text);
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
  }
  .header-button:hover {
    background: var(--primary-50);
    border-color: var(--primary);
    color: var(--primary);
  }
  .header-button i {
    font-size: 16px;
  }
  .header-button.active {
    background: var(--primary);
    color: white;
    border-color: var(--primary);
  }

  .container{max-width:1400px;margin:0 auto;padding:32px}

  /* Enhanced Quick Questions Section */
  .quick-questions {
    background:var(--card);
    border:1px solid var(--line);
    border-radius:16px;
    padding:16px 20px;
    margin-bottom:24px;
    box-shadow:var(--shadow);
    position:relative;
    overflow:hidden;
    transition:all 0.3s ease;
  }
  .quick-questions::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, var(--primary), var(--accent), var(--primary));
    background-size: 200% 100%;
    animation: gradient 3s ease infinite;
  }
  .quick-questions-title {
    font-size:16px;
    font-weight:700;
    margin:0;
    color:var(--text);
    display:flex;
    align-items:center;
    gap:8px;
    cursor:pointer;
    user-select:none;
    transition:all 0.2s ease;
  }
  .quick-questions-title:hover {
    color:var(--primary);
  }
  .quick-questions-title i.icon-bolt {
    color:var(--primary);
  }
  .quick-questions-title i.icon-toggle {
    margin-left:auto;
    font-size:16px;
    color:var(--primary);
    transition:transform 0.3s ease;
  }
  .quick-questions.collapsed .icon-toggle {
    transform:rotate(-90deg);
  }
  .quick-questions-grid {
    display:grid;
    grid-template-columns:repeat(auto-fit, minmax(200px, 1fr));
    gap:12px;
    max-height:500px;
    overflow:hidden;
    transition:all 0.4s ease;
    margin-top:16px;
  }
  .quick-questions.collapsed .quick-questions-grid {
    max-height:0;
    margin-top:0;
    opacity:0;
  }
  .quick-question-item {
    padding:12px 14px;
    border-radius:12px;
    cursor:pointer;
    display:flex;
    align-items:center;
    gap:14px;
    border:1px solid var(--line);
    background:var(--soft);
    transition:all 0.3s ease;
    position:relative;
    overflow:hidden;
  }
  .quick-question-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(16, 185, 129, 0.1), transparent);
    transition: left 0.5s ease;
  }
  .quick-question-item:hover::before {
    left: 100%;
  }
  .quick-question-item:hover {
    background:var(--primary-50);
    border-color:var(--primary);
    transform:translateY(-4px);
    box-shadow:var(--shadow-lg);
  }
  .quick-question-icon {
    width:36px;
    height:36px;
    border-radius:10px;
    display:flex;
    align-items:center;
    justify-content:center;
    background:var(--card);
    border:1px solid var(--line);
    color:var(--primary);
    font-size:18px;
    box-shadow:var(--shadow);
    transition:all 0.3s ease;
  }
  .quick-question-item:hover .quick-question-icon {
    background:var(--primary);
    color:white;
    transform:rotate(5deg) scale(1.1);
  }
  .quick-question-content {
    flex:1;
  }
  .quick-question-title {
    font-weight:600;
    font-size:14px;
    margin-bottom:2px;
    color:var(--text);
  }
  .quick-question-desc {
    font-size:12px;
    color:var(--muted);
  }

  /* Enhanced Chat Layout */
  .chat-grid{display:grid;grid-template-columns:360px 1fr;gap:28px}
  .panel{background:var(--card);border:1px solid var(--line);border-radius:24px;padding:28px;box-shadow:var(--shadow-xl);position:relative;overflow:hidden;transition:all 0.3s ease}
  .panel::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, var(--primary), var(--accent), var(--primary));
    background-size: 200% 100%;
    animation: gradient 3s ease infinite;
    opacity: 0.8;
  }
  @keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  .panel:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }
  .panel h3{margin:0 0 20px;font-size:18px;font-weight:700;color:var(--text)}
  .split{height:1px;background:linear-gradient(90deg, transparent, var(--line), transparent);margin:24px 0}

  /* Enhanced Sidebar */
  .sidebar-title{font-size:15px;font-weight:700;margin:16px 0;color:var(--text);display:flex;align-items:center;gap:8px}
  .sidebar-title i {color:var(--primary)}
  
  /* Mode Selector - NEW */
  .mode-selector {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-bottom: 16px;
  }
  .mode-option {
    cursor: pointer;
    position: relative;
  }
  .mode-option input[type="radio"] {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }
  .mode-content {
    padding: 14px 16px;
    border-radius: 14px;
    border: 2px solid var(--line);
    background: var(--soft);
    display: flex;
    align-items: center;
    gap: 12px;
    transition: all 0.3s ease;
  }
  .mode-content i {
    font-size: 20px;
    color: var(--primary);
    transition: all 0.3s ease;
  }
  .mode-title {
    font-size: 14px;
    font-weight: 700;
    color: var(--text);
    margin-bottom: 2px;
  }
  .mode-desc {
    font-size: 12px;
    color: var(--muted);
  }
  .mode-option input[type="radio"]:checked + .mode-content {
    background: linear-gradient(135deg, var(--primary-50), rgba(16, 185, 129, 0.08));
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
  }
  .mode-option input[type="radio"]:checked + .mode-content i {
    color: var(--primary);
    transform: scale(1.1);
  }
  .mode-option:hover .mode-content {
    transform: translateX(4px);
    box-shadow: var(--shadow);
  }
  
  /* Clear Conversation Button - NEW */
  .clear-conversation-btn {
    width: 100%;
    padding: 12px 16px;
    border-radius: 12px;
    border: 1px dashed var(--line);
    background: var(--soft);
    color: var(--muted);
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    margin-top: 12px;
    transition: all 0.3s ease;
  }
  .clear-conversation-btn:hover {
    background: #fff5f5;
    border-color: #f87171;
    color: #ef4444;
    border-style: solid;
  }
  .clear-conversation-btn i {
    font-size: 16px;
  }
  
  .sidebar-item{padding:16px;border-radius:16px;margin-bottom:14px;cursor:pointer;display:flex;align-items:center;gap:16px;border:1px solid var(--line);background:var(--soft);transition:all 0.3s ease;position:relative}
  .sidebar-item::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 3px;
    background: var(--primary);
    transform: scaleY(0);
    transition: transform 0.3s ease;
  }
  .sidebar-item:hover::before {
    transform: scaleY(1);
  }
  .sidebar-item:hover{background:var(--primary-50);border-color:var(--primary);transform:translateX(6px)}
  .sidebar-icon{width:44px;height:44px;border-radius:12px;display:flex;align-items:center;justify-content:center;background:var(--card);border:1px solid var(--line);color:var(--primary);font-size:20px;box-shadow:var(--shadow);transition:all 0.3s ease}
  .sidebar-item:hover .sidebar-icon {
    background:var(--primary);
    color:white;
    transform:rotate(5deg);
  }
  .select{width:100%;padding:14px 18px;border:1px solid var(--line);border-radius:16px;background:var(--card);font-size:15px;transition:all 0.3s ease;box-shadow:var(--shadow)}
  .select:focus{outline:none;border-color:var(--primary);box-shadow:0 0 0 4px rgba(16, 185, 129, 0.1)}

  /* Enhanced Zalo Card */
  .zalo-card{margin:20px 0;background:var(--card);border:1px solid var(--line);border-radius:18px;padding:24px;box-shadow:var(--shadow);position:relative}
  .zalo-card h4{margin:0 0 16px;font-size:16px;font-weight:700;color:var(--text)}
  .zalo-qr{width:100%;height:auto;border-radius:14px;border:1px solid var(--line);box-shadow:var(--shadow);transition:transform 0.3s ease}
  .zalo-qr:hover{transform:scale(1.02)}
  .zalo-row{display:flex;gap:14px;margin-top:20px}
  .zalo-row select{flex:1;padding:14px 18px;border:1px solid var(--line);border-radius:16px;background:var(--card);font-size:15px;transition:all 0.3s ease}
  .zalo-row button{padding:14px 18px;border-radius:16px;border:1px solid var(--line);background:var(--card);cursor:pointer;transition:all 0.3s ease;box-shadow:var(--shadow)}
  .zalo-row button:hover{background:var(--primary-50);border-color:var(--primary);transform:translateY(-2px)}
  
  /* Enhanced Zalo Guide */
  .zalo-guide {
    background:linear-gradient(135deg, #f0fdf9 0%, #e6fffa 100%);
    border:1px solid #a7f3d0;
    border-radius:14px;
    padding:20px;
    margin-top:20px;
    font-size:14px;
    box-shadow:var(--shadow);
    position:relative;
  }
  .zalo-guide::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, var(--primary), var(--accent));
    border-radius: 12px 12px 0 0;
  }
  .zalo-guide-title {
    font-weight:700;
    color:var(--primary);
    margin-bottom:12px;
    font-size:16px;
    display:flex;
    align-items:center;
    gap:8px;
  }
  .zalo-guide ol {
    margin:10px 0;
    padding-left:24px;
  }
  .zalo-guide li {
    margin-bottom:10px;
    line-height:1.6;
  }
  .zalo-guide code {
    background:var(--card);
    padding:3px 8px;
    border-radius:6px;
    font-family:ui-monospace,Menlo,Consolas,monospace;
    font-size:13px;
    border:1px solid var(--line);
    color:var(--primary);
    font-weight:600;
  }

  /* Enhanced Chat Area */
  .chat-card{display:flex;flex-direction:column;height:700px}
  .chat-messages{flex:1;overflow-y:auto;background:var(--soft);border-radius:18px;padding:24px;max-height:550px;position:relative}
  .chat-messages::-webkit-scrollbar{width:6px}
  .chat-messages::-webkit-scrollbar-track{background:var(--soft);border-radius:3px}
  .chat-messages::-webkit-scrollbar-thumb{background:var(--line);border-radius:3px}
  .chat-messages::-webkit-scrollbar-thumb:hover{background:var(--muted)}
  .message{margin-bottom:20px;display:flex;gap:16px;animation:fadeInUp 0.4s ease}
  @keyframes fadeInUp {
    from { opacity:0; transform:translateY(20px); }
    to { opacity:1; transform:translateY(0); }
  }
  .message.user{flex-direction:row-reverse}
  .message-avatar{width:44px;height:44px;border-radius:14px;display:flex;align-items:center;justify-content:center;background:linear-gradient(135deg,var(--primary),var(--primary-600));color:white;flex-shrink:0;font-size:20px;box-shadow:var(--shadow)}
  .message.bot .message-avatar{background:linear-gradient(135deg, #64748b 0%, #475569 100%)}
  .message-content{max-width:70%;padding:16px 20px;border-radius:18px;background:var(--card);border:1px solid var(--line);box-shadow:var(--shadow);position:relative}
  .message.user .message-content{background:linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);border-color:#93c5fd}
  .message.bot .message-content{background:var(--card);border-color:var(--line)}
  .message-time{font-size:12px;color:var(--muted);margin-top:8px}

  .message-form{margin-top:20px;display:flex;flex-direction:column;gap:20px}
  .input-container{display:flex;gap:14px}
  .message-input{flex:1;border:1px solid var(--line);border-radius:50px;padding:16px 24px;font-size:16px;background:var(--card);outline:none;transition:all 0.3s ease;box-shadow:var(--shadow)}
  .message-input:focus{border-color:var(--primary);box-shadow:0 0 0 4px rgba(16, 185, 129, 0.1)}
  .send-button{width:56px;height:56px;border-radius:50%;background:linear-gradient(135deg,var(--primary),var(--primary-600));color:white;border:none;display:flex;align-items:center;justify-content:center;cursor:pointer;transition:all 0.3s ease;box-shadow:var(--shadow)}
  .send-button:hover{transform:scale(1.1);box-shadow:var(--shadow-lg)}
  .send-button:active{transform:scale(0.95)}
  .send-button:disabled{background:#cbd5e1;cursor:not-allowed;transform:none}

  /* Enhanced Results Container - Compact & Collapsible */
  .result-container{margin-top:16px;background:var(--card);border:1px solid var(--line);border-radius:12px;display:none;box-shadow:var(--shadow);position:relative;overflow:hidden;transition:all 0.3s ease}
  .result-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, var(--primary), var(--accent));
  }
  .result-header{padding:10px 16px;cursor:pointer;display:flex;justify-content:space-between;align-items:center;transition:all 0.2s ease;border-radius:12px 12px 0 0}
  .result-header:hover{background:var(--soft)}
  .result-title{font-weight:600;font-size:14px;color:var(--text);display:flex;align-items:center;gap:8px}
  .result-title i{font-size:14px}
  .toggle-icon{font-size:12px;color:var(--primary);transition:transform 0.3s ease}
  .result-container:not(.collapsed) .toggle-icon{transform:rotate(180deg)}
  .result-body{padding:0 16px 16px;max-height:0;overflow:hidden;transition:all 0.3s ease}
  .result-container:not(.collapsed) .result-body{max-height:1000px;padding:12px 16px 16px}
  .result-container.collapsed .result-body{padding:0 16px}
  .result-actions{display:flex;gap:8px;margin-bottom:12px}
  .action-button{display:flex;align-items:center;gap:6px;padding:8px 14px;border-radius:10px;border:1px solid var(--line);background:var(--card);cursor:pointer;font-size:13px;font-weight:600;transition:all 0.3s ease;box-shadow:var(--shadow)}
  .action-button i{font-size:13px}
  .action-button:hover{background:var(--soft);transform:translateY(-1px);box-shadow:var(--shadow-lg)}
  .action-button.zalo{color:#0068FF;border-color:#dbeafe;background:#f0f9ff}
  .action-button.zalo:hover{background:#dbeafe}

  .jql-display{background:linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);border:1px solid var(--line);border-radius:10px;padding:12px 14px;padding-right:80px;font-family:ui-monospace,Menlo,Consolas,monospace;font-size:13px;position:relative;box-shadow:var(--shadow)}
  .jql-display pre{margin:0;white-space:pre-wrap;word-break:break-word;line-height:1.5}
  .jql-copy{position:absolute;top:10px;right:10px;background:var(--card);border:1px solid var(--line);border-radius:8px;padding:6px 10px;cursor:pointer;font-size:12px;font-weight:600;transition:all 0.3s ease;box-shadow:var(--shadow)}
  .jql-copy:hover{background:var(--primary-50);border-color:var(--primary);transform:translateY(-1px)}

  .loading{display:inline-block;width:20px;height:20px;border:2px solid #f3f3f3;border-top-color:var(--primary);border-radius:50%;animation:spin 1s linear infinite;margin-right:12px}
  @keyframes spin{to{transform:rotate(360deg)}}

  .footer{padding:28px;text-align:center;color:var(--muted);font-size:14px;margin-top:48px}

  /* Clarification buttons */
  .clarification-btn {
    white-space: normal !important;
    word-break: break-word;
    text-align: left;
    line-height: 1.4;
    min-height: 36px;
    max-width: 100%;
  }
  .clarification-btn:hover {
    background: var(--primary) !important;
    color: white !important;
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }

  /* Floating Result Toggle Button - Compact */
  .floating-result-btn {
    position: fixed;
    bottom: 24px;
    left: 24px;
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: white;
    color: var(--primary);
    border: 2px solid var(--primary);
    display: none;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    box-shadow: 0 4px 12px rgba(0, 150, 57, 0.15);
    transition: all 0.3s ease;
    z-index: 999;
    font-size: 18px;
  }
  .floating-result-btn:hover {
    background: var(--primary);
    color: white;
    transform: translateY(-3px) scale(1.05);
    box-shadow: 0 6px 20px rgba(0, 150, 57, 0.25);
  }
  .floating-result-btn.has-result {
    display: flex;
  }
  .floating-result-btn .badge {
    position: absolute;
    top: -4px;
    right: -4px;
    background: #ef4444;
    color: white;
    border-radius: 50%;
    width: 18px;
    height: 18px;
    font-size: 10px;
    font-weight: 700;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  }

  /* Floating Zalo Button - Compact */
  .floating-zalo-btn {
    position: fixed;
    bottom: 24px;
    right: 24px;
    min-width: 120px;
    height: 48px;
    border-radius: 24px;
    background: white;
    color: #0068FF;
    border: 2px solid #0068FF;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
    cursor: pointer;
    box-shadow: 0 4px 12px rgba(0, 104, 255, 0.15);
    transition: all 0.3s ease;
    z-index: 999;
    font-size: 14px;
    font-weight: 600;
    padding: 0 16px;
  }
  .floating-zalo-btn:hover {
    background: #0068FF;
    color: white;
    transform: translateY(-3px) scale(1.05);
    box-shadow: 0 6px 20px rgba(0, 104, 255, 0.25);
  }
  .floating-zalo-btn:active {
    transform: translateY(-1px) scale(1.02);
  }
  .floating-zalo-btn i {
    font-size: 18px;
  }

  /* Chart Modal */
  .chart-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    animation: fadeIn 0.3s ease;
  }
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  .chart-modal-content {
    background: var(--card);
    border-radius: 20px;
    box-shadow: var(--shadow-xl);
    max-width: 800px;
    width: 90%;
    max-height: 90vh;
    overflow: hidden;
    animation: slideUp 0.3s ease;
  }
  @keyframes slideUp {
    from { opacity: 0; transform: translateY(50px); }
    to { opacity: 1; transform: translateY(0); }
  }
  .chart-modal-header {
    padding: 24px;
    border-bottom: 1px solid var(--line);
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: linear-gradient(135deg, var(--primary-50), var(--soft));
  }
  .chart-modal-header h3 {
    margin: 0;
    font-size: 20px;
    font-weight: 700;
    color: var(--primary);
    display: flex;
    align-items: center;
    gap: 10px;
  }
  .chart-modal-close {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border: none;
    background: var(--card);
    color: var(--muted);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    font-size: 16px;
  }
  .chart-modal-close:hover {
    background: var(--error);
    color: white;
    transform: rotate(90deg);
  }
  .chart-modal-body {
    padding: 32px;
    max-height: calc(90vh - 100px);
    overflow-y: auto;
  }
  .chart-modal-body canvas {
    max-height: 500px;
  }

  @media (max-width:1100px){
    .chat-grid{grid-template-columns:1fr}
    .container{padding:20px}
    .quick-questions-grid {
      grid-template-columns:repeat(auto-fit, minmax(180px, 1fr));
    }
    .header-content {
      flex-direction: column;
      gap: 16px;
    }
    .header-right {
      width: 100%;
      justify-content: center;
    }
    /* Ẩn tiêu đề ở giữa trên mobile để tránh chồng chéo */
    .header-center {
        display: none;
    }
    .clarification-options {
      flex-direction: column !important;
    }
    .clarification-btn {
      width: 100% !important;
      text-align: center !important;
    }
  }
</style>
</head>
<body>
  <!-- Header giống ảnh đính kèm -->
  <header class="header-container">
    <div class="header-content">
      <div class="header-left">
        <a href="/" class="back-button">
          <i class="fas fa-arrow-left"></i>
          Về menu PMO
        </a>
      </div>
      <!-- === THAY ĐỔI QUAN TRỌNG === -->
      <!-- Đưa tiêu đề ra ngoài và đặt trong class mới để căn giữa -->
      <div class="header-center">
        <div class="header-icon">
          <i class="fas fa-robot"></i>
        </div>
        <h1 class="header-title">AI Chat Bot</h1>
      </div>
      <div class="header-right">
        <a href="/meetingnote" class="header-button">
          <i class="fa-solid fa-microphone-lines"></i>
          Meeting Note
        </a>
        <a href="/risk" class="header-button">
          <i class="fa-solid fa-triangle-exclamation"></i>
          Risk Management
        </a>
        <a href="/chatbot" class="header-button active">
          <i class="fa-solid fa-robot"></i>
          Chat Bot
        </a>
      </div>
    </div>
  </header>

  <main class="container">
    <!-- Enhanced Quick Questions Section -->
    <section class="quick-questions collapsed" id="quickQuestions">
      <h3 class="quick-questions-title" id="quickQuestionsTitle">
        <i class="fas fa-bolt icon-bolt"></i> Câu hỏi nhanh
        <i class="fas fa-chevron-down icon-toggle"></i>
      </h3>
      <div class="quick-questions-grid">
        <div class="quick-question-item example-query" data-query="Tổng quan tiến độ dự án">
          <div class="quick-question-icon"><i class="fas fa-chart-line"></i></div>
          <div class="quick-question-content">
            <div class="quick-question-title">Tổng quan tiến độ</div>
            <div class="quick-question-desc">Đánh giá tình hình chung</div>
          </div>
        </div>
        <div class="quick-question-item example-query" data-query="Rủi ro dự án 3 tháng gần đây">
          <div class="quick-question-icon"><i class="fas fa-exclamation-triangle"></i></div>
          <div class="quick-question-content">
            <div class="quick-question-title">Rủi ro 3 tháng</div>
            <div class="quick-question-desc">Nhận diện rủi ro gần đây</div>
          </div>
        </div>
        <div class="quick-question-item example-query" data-query="Tasks trễ hạn trong sprint hiện tại">
          <div class="quick-question-icon"><i class="fas fa-clock"></i></div>
          <div class="quick-question-content">
            <div class="quick-question-title">Tasks trễ hạn</div>
            <div class="quick-question-desc">Active sprint</div>
          </div>
        </div>
        <div class="quick-question-item example-query" data-query="Hiệu suất nhóm 6 tháng gần nhất">
          <div class="quick-question-icon"><i class="fas fa-users"></i></div>
          <div class="quick-question-content">
            <div class="quick-question-title">Hiệu suất 6 tháng</div>
            <div class="quick-question-desc">Phân bổ công việc</div>
          </div>
        </div>
        <div class="quick-question-item example-query" data-query="Vấn đề chất lượng">
          <div class="quick-question-icon"><i class="fas fa-bug"></i></div>
          <div class="quick-question-content">
            <div class="quick-question-title">Vấn đề chất lượng</div>
            <div class="quick-question-desc">Bugs cần ưu tiên</div>
          </div>
        </div>
      </div>
    </section>

    <!-- Enhanced Chat Layout -->
    <section id="chat" class="chat-grid">
      <!-- Enhanced Sidebar -->
      <div class="panel">
        <!-- Mode Selector - NEW -->
        <div class="sidebar-title"><i class="fas fa-comment-dots"></i> Chế độ hội thoại</div>
        <div class="mode-selector">
          <label class="mode-option">
            <input type="radio" name="chatMode" value="menu" checked>
            <div class="mode-content">
              <i class="fas fa-list-ul"></i>
              <div>
                <div class="mode-title">Menu hướng dẫn</div>
                <div class="mode-desc">Chọn từ danh sách có sẵn</div>
              </div>
            </div>
          </label>
          <label class="mode-option">
            <input type="radio" name="chatMode" value="natural">
            <div class="mode-content">
              <i class="fas fa-magic"></i>
              <div>
                <div class="mode-title">Trò chuyện tự nhiên</div>
                <div class="mode-desc">Hỏi thoải mái, AI sẽ hiểu</div>
              </div>
            </div>
          </label>
        </div>
        
        <!-- Clear Conversation Button - NEW -->
        <button class="clear-conversation-btn" id="clearConversationBtn" style="display:none;">
          <i class="fas fa-broom"></i> Kết thúc hội thoại
        </button>
        
        <div class="split"></div>

        <div class="sidebar-title"><i class="fas fa-folder"></i> Chọn Project</div>
        <div class="sidebar-item" style="background:transparent;padding:0;border:none">
          <select id="projectSelect" class="select">
            <option value="">-- Tất cả dự án --</option>
          </select>
        </div>

        <div class="split"></div>

        <div class="sidebar-title"><i class="fab fa-zalo"></i> Kết nối Zalo</div>
        <div class="zalo-card">
          <img class="zalo-qr" src="https://i.postimg.cc/vBk8QLXr/Screenshot-2025-10-09-111413.png" alt="QR Zalo Bot">
          
          <div class="zalo-guide">
            <div class="zalo-guide-title"><i class="fas fa-info-circle"></i> Hướng dẫn kết nối Zalo:</div>
            <ol>
              <li>Quét mã QR để bắt đầu cuộc trò chuyện với bot Zalo</li>
              <li>Gửi tin nhắn chứa <code>id</code> để nhận mã định danh của bạn</li>
              <li>Gõ <code>/name TênCủaBạn</code> để đặt tên hiển thị và nhận thông báo</li>
            </ol>
          </div>
          
          <div class="zalo-row">
            <button id="btnLoadContacts" title="Tải danh bạ"><i class="fas fa-sync-alt"></i></button>
            <select id="zaloContactSelect">
              <option value="">-- Chưa tải danh bạ --</option>
            </select>
          </div>
        </div>
      </div>

      <!-- Enhanced Chat Main -->
      <div class="panel chat-card">
        <div class="chat-messages" id="chatMessages">
          <div class="message bot">
            <div class="message-avatar"><i class="fas fa-robot"></i></div>
            <div>
              <div class="message-content">
                Xin chào! Tôi có thể giúp gì cho bạn
              </div>
              <div class="message-time">—</div>
            </div>
          </div>
        </div>

        <div class="message-form">
          <div class="input-container">
            <input type="text" class="message-input" id="messageInput" placeholder="Nhập câu hỏi của bạn...">
            <button class="send-button" id="sendButton"><i class="fas fa-paper-plane"></i></button>
          </div>

          <!-- Enhanced Results - Collapsible -->
          <div class="result-container collapsed" id="resultContainer">
            <div class="result-header" id="resultHeader">
              <div class="result-title">
                <i class="fas fa-chart-bar"></i> Kết quả tìm kiếm
                <i class="fas fa-chevron-down toggle-icon" id="toggleIcon"></i>
              </div>
            </div>

            <div class="result-body" id="resultBody">
              <div class="result-actions">
                <button class="action-button" id="closeResults"><i class="fas fa-times"></i> Đóng</button>
                <button class="action-button zalo" id="zaloButton"><i class="fab fa-zalo"></i> Gửi qua Zalo</button>
              </div>
              <div class="jql-display">
                <pre id="jqlQuery"></pre>
                <button class="jql-copy" id="copyJql">Sao chép JQL</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <!-- Floating Result Toggle Button -->
  <button class="floating-result-btn" id="floatingResultBtn" title="Xem kết quả tìm kiếm">
    <i class="fas fa-chart-bar"></i>
    <span class="badge" id="resultBadge" style="display:none;">1</span>
  </button>

  <!-- Floating Zalo Button - Redesigned -->
  <button class="floating-zalo-btn" id="floatingZaloBtn" title="Gửi kết quả qua Zalo">
    <i class="fab fa-zalo"></i>
    <span>Gửi Zalo</span>
  </button>

  <footer class="footer">© 2025 BIDV — Công cụ AI cho PMO</footer>

<script>
document.addEventListener("DOMContentLoaded", function(){
const chatMessages = document.getElementById('chatMessages');
  const messageInput = document.getElementById('messageInput');
  const sendButton = document.getElementById('sendButton');
  const resultContainer = document.getElementById('resultContainer');
  const jqlQuery = document.getElementById('jqlQuery');
  const copyJql = document.getElementById('copyJql');
  const projectSelect = document.getElementById('projectSelect');

  // Floating buttons
  const floatingResultBtn = document.getElementById('floatingResultBtn');
  const resultBadge = document.getElementById('resultBadge');

  // Zalo UI
  const btnLoadContacts = document.getElementById('btnLoadContacts');
  const zaloContactSelect = document.getElementById('zaloContactSelect');
  
  // Natural Chat Mode - NEW
  const chatModeRadios = document.querySelectorAll('input[name="chatMode"]');
  const clearConversationBtn = document.getElementById('clearConversationBtn');
  let currentChatMode = 'menu'; // 'menu' or 'natural'
  let conversationHistory = []; // Store conversation history for natural mode
  const MAX_HISTORY = 10;

  // State
  window.__projectKey = (projectSelect && projectSelect.value) ? projectSelect.value : '';
  let lastResultsCache = null; // để gửi qua Zalo
  let lastBotResponse = ''; // lưu response của bot để gửi qua Zalo
  let clarificationState = null; // để lưu trạng thái clarification

  // === NATURAL CHAT MODE FUNCTIONS ===
  
  function initConversationHistory() {
    try {
      const saved = sessionStorage.getItem('conversationHistory');
      if (saved) {
        conversationHistory = JSON.parse(saved);
        if (!Array.isArray(conversationHistory)) conversationHistory = [];
      }
    } catch (e) {
      conversationHistory = [];
    }
  }
  
  function saveConversationHistory() {
    try {
      sessionStorage.setItem('conversationHistory', JSON.stringify(conversationHistory));
    } catch (e) {
      console.error('Failed to save conversation history', e);
    }
  }
  
  function addToConversationHistory(role, content) {
    conversationHistory.push({
      role: role, // 'user' or 'assistant'
      content: content,
      timestamp: Date.now()
    });
    
    // Keep only last MAX_HISTORY messages
    if (conversationHistory.length > MAX_HISTORY) {
      conversationHistory = conversationHistory.slice(-MAX_HISTORY);
    }
    
    saveConversationHistory();
  }
  
  function clearConversationHistory() {
    conversationHistory = [];
    try {
      sessionStorage.removeItem('conversationHistory');
    } catch (e) {}
    
    // Clear chat display
    chatMessages.innerHTML = '';
    addBotMessage('🎉 Đã kết thúc hội thoại! Hãy bắt đầu cuộc trò chuyện mới.');
  }
  
  function switchChatMode(mode) {
    currentChatMode = mode;
    
    if (mode === 'natural') {
      clearConversationBtn.style.display = 'block';
      // Show welcome message for natural mode
      if (conversationHistory.length === 0) {
        addBotMessage(\`💬 <b>Chế độ Trò chuyện tự nhiên đã bật!</b>

Bạn có thể hỏi thoải mái, ví dụ:
• "Dự án ABC có vấn đề gì?"
• "Tiến độ sprint hiện tại thế nào?"
• "Có task nào quá hạn không?"

🤖 Tôi sẽ tự động hiểu và hỏi lại nếu cần thêm thông tin.\`);
      }
    } else {
      clearConversationBtn.style.display = 'none';
    }
  }
  
  // Mode selector event listeners
  chatModeRadios.forEach(radio => {
    radio.addEventListener('change', () => {
      switchChatMode(radio.value);
    });
  });
  
  // Clear conversation button
  if (clearConversationBtn) {
    clearConversationBtn.addEventListener('click', () => {
      if (confirm('Bạn có chắc muốn kết thúc hội thoại hiện tại?')) {
        clearConversationHistory();
      }
    });
  }
  
  // Initialize conversation history from sessionStorage
  initConversationHistory();

  // Load projects từ Jira API
  async function loadProjects() {
    try {
      const response = await fetch('/api/jira-projects', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (!response.ok) {
        throw new Error('Failed to load projects');
      }
      
      const data = await response.json();
      if (!data.ok) {
        throw new Error(data.error || 'Failed to load projects');
      }
      
      projectSelect.innerHTML = '<option value="">-- Tất cả dự án --</option>';
      
      data.projects.forEach(project => {
        const option = document.createElement('option');
        option.value = project.key;
        option.textContent = project.key + ' - ' + project.name;
        projectSelect.appendChild(option);
      });
      
    } catch (error) {
      console.error('Error loading projects:', error);
      projectSelect.innerHTML = '<option value="">-- Lỗi tải dự án --</option>';
    }
  }

  if (projectSelect) {
    projectSelect.addEventListener('change', () => {
      window.__projectKey = projectSelect.value || '';
    });
  }

  // Load projects khi trang được tải
  loadProjects();

  // Load danh bạ
  async function loadContacts(){
    try{
      zaloContactSelect.innerHTML = '<option value="">Đang tải danh bạ...</option>';
      const res = await fetch('/zalo/contacts/list').then(r=>r.json());
      if (!res.ok) throw new Error(res.error || 'contacts list failed');
      const contacts = res.contacts || [];
      if (contacts.length === 0) {
        zaloContactSelect.innerHTML = '<option value="">Chưa có liên hệ — gõ /name trong Zalo</option>';
        return;
      }
      zaloContactSelect.innerHTML = contacts.map(c =>
        '<option value="'+escapeHtml(c.display_name)+'">'+escapeHtml(c.display_name)+'</option>'
      ).join('');
    }catch(e){
      zaloContactSelect.innerHTML = '<option value="">Lỗi tải danh bạ</option>';
      console.error(e);
    }
  }
  if (btnLoadContacts) btnLoadContacts.addEventListener('click', loadContacts);

  // Toggle quick questions collapse/expand
  const quickQuestions = document.getElementById('quickQuestions');
  const quickQuestionsTitle = document.getElementById('quickQuestionsTitle');
  if (quickQuestionsTitle && quickQuestions) {
    quickQuestionsTitle.addEventListener('click', (e) => {
      // Don't toggle if clicking on a question item
      if (!e.target.closest('.example-query')) {
        quickQuestions.classList.toggle('collapsed');
      }
    });
  }

  // Ví dụ query click
  const exampleQueries = document.querySelectorAll('.example-query');
  exampleQueries.forEach(q => q.addEventListener('click', () => {
    const t = q.getAttribute('data-query');
    messageInput.value = t;
    sendMessage();
  }));

  function addUserMessage(message) {
    const el = document.createElement('div');
    el.className = 'message user';
    el.innerHTML = \`
      <div class="message-avatar"><i class="fas fa-user"></i></div>
      <div>
        <div class="message-content">\${escapeHtml(message)}</div>
        <div class="message-time">\${nowHM()}</div>
      </div>\`;
    chatMessages.appendChild(el);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }
  function addBotMessage(message, options = null) {
    const el = document.createElement('div');
    el.className = 'message bot';
    
    let optionsHtml = '';
    if (options && Array.isArray(options)) {
      optionsHtml = \`
        <div class="clarification-options" style="margin-top: 12px; display: flex; flex-wrap: wrap; gap: 8px;">
          \${options.map(option => \`
            <button class="clarification-btn" data-option-id="\${escapeHtml(option.id)}" data-action="\${escapeHtml(option.action)}" style="
              padding: 8px 16px;
              background: var(--primary-50);
              border: 1px solid var(--primary);
              border-radius: 20px;
              color: var(--primary);
              font-size: 14px;
              font-weight: 600;
              cursor: pointer;
              transition: all 0.2s ease;
            ">\${escapeHtml(option.text)}</button>
          \`).join('')}
        </div>
      \`;
    }
    
    el.innerHTML = \`
      <div class="message-avatar"><i class="fas fa-robot"></i></div>
      <div>
        <div class="message-content">\${message}\${optionsHtml}</div>
        <div class="message-time">\${nowHM()}</div>
      </div>\`;
    chatMessages.appendChild(el);
    chatMessages.scrollTop = chatMessages.scrollHeight;

    // Thêm event listeners cho các nút clarification
    if (options) {
      el.querySelectorAll('.clarification-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const optionId = btn.getAttribute('data-option-id');
          const action = btn.getAttribute('data-action');
          handleClarificationOption(optionId, action);
          
          // Disable tất cả buttons sau khi chọn
          el.querySelectorAll('.clarification-btn').forEach(b => {
            b.disabled = true;
            b.style.opacity = '0.5';
            b.style.cursor = 'not-allowed';
          });
          // Highlight button được chọn
          btn.style.background = 'var(--primary)';
          btn.style.color = 'white';
        });
      });
    }
  }

  function showResults(results) {
    // Chỉ lưu cache để gửi Zalo, không hiển thị bảng
    lastResultsCache = results || [];
  }

  function handleClarificationOption(optionId, action) {
    // Hiển thị lựa chọn của user
    const optionText = document.querySelector('[data-option-id="' + optionId + '"]')?.textContent || optionId;
    addUserMessage('Đã chọn: ' + optionText);
    
    // Check if this is a classification type selection
    if (action === 'select_classification') {
      const classificationType = optionId.replace('classify-', '');
      window.__chartClassification = classificationType;
      
      // Now offer chart type options
      const chartOptions = [
        { id: 'pie', text: '📊 Biểu đồ tròn (Pie Chart)', icon: 'fa-chart-pie' },
        { id: 'bar', text: '📊 Biểu đồ cột (Bar Chart)', icon: 'fa-chart-bar' },
        { id: 'line', text: '📈 Biểu đồ đường (Line Chart)', icon: 'fa-chart-line' }
      ];
      
      const questionPrefix = '🤖 ';
      const classificationNames = {
        'priority': 'Priority (Ưu tiên)',
        'status': 'Status (Trạng thái)',
        'type': 'Issue Type (Loại ticket)',
        'assignee': 'Assignee (Người phụ trách)'
      };
      const classificationName = classificationNames[classificationType] || classificationType;
      
      const message = questionPrefix + '📈 Chọn loại biểu đồ để hiển thị dữ liệu theo ' + classificationName + ':';
      addBotMessage(message, chartOptions);
      return;
    }
    
    // Check if this is a chart type selection
    if (['pie', 'bar', 'line'].includes(optionId)) {
      createChart(optionId);
      return;
    }
    
    // NATURAL MODE: Send user choice as regular message
    if (currentChatMode === 'natural' && clarificationState?.clarificationStep === 'natural_clarification') {
      sendNaturalClarificationResponse(optionText);
      return;
    }
    
    // Xử lý theo action type
    if (action === 'execute_query') {
      // Thực hiện query trực tiếp
      executeDirectQuery(optionId);
    } else if (clarificationState) {
      // Tiếp tục clarification flow
      processClarificationChoice(optionId, action);
    }
  }
  
  function sendNaturalClarificationResponse(userChoice) {
    sendButton.disabled = true;
    addBotMessage('<span class="loading"></span>Đang xử lý...');
    
    fetch('/chat-process', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: userChoice,
        projectKey: window.__projectKey,
        mode: 'natural',
        chatId: 'web-user',
        clarificationStep: 'natural_clarification',
        clarificationData: clarificationState?.clarificationData || {},
        conversationHistory: conversationHistory
      })
    })
    .then(r => r.json())
    .then(data => {
      const loadingMessage = chatMessages.lastElementChild;
      if (loadingMessage && loadingMessage.querySelector('.loading')) loadingMessage.remove();
      
      if (data.success) {
        // Add assistant response to history
        if (data.response) {
          addToConversationHistory('assistant', data.response);
        }
        
        if (data.needsClarification) {
          // Continue multi-step clarification
          clarificationState = {
            clarificationStep: data.clarificationStep,
            clarificationData: data.clarificationData
          };
          addBotMessage(data.response, data.options);
        } else {
          // Final response
          clarificationState = null;
          const botResponse = escapeHtml(data.response || '');
          addBotMessage(botResponse);
          lastBotResponse = data.response || '';
          jqlQuery.textContent = data.jql || '';
          showResults(data.results);
          
          if (data.jql) {
            floatingResultBtn.classList.add('has-result');
            resultBadge.style.display = 'flex';
            setTimeout(() => {
              offerChartCreation(data.results || [], data.statistics || null);
            }, 300);
          }
        }
      } else {
        clarificationState = null;
        const msg = data.error || 'Có lỗi khi xử lý.';
        addBotMessage('<b>Lỗi:</b> ' + escapeHtml(msg));
      }
      
      sendButton.disabled = false;
    })
    .catch(err => {
      const loadingMessage = chatMessages.lastElementChild;
      if (loadingMessage && loadingMessage.querySelector('.loading')) loadingMessage.remove();
      addBotMessage('Đã xảy ra lỗi. Vui lòng thử lại.');
      clarificationState = null;
      sendButton.disabled = false;
      console.error(err);
    });
  }

  function executeDirectQuery(queryType) {
    sendButton.disabled = true;
    addBotMessage('<span class="loading"></span>Đang phân tích dữ liệu...');

    const requestBody = {
      message: queryType,
      projectKey: window.__projectKey,
      clarificationStep: 'execute_query',
      clarificationData: clarificationState ? clarificationState.clarificationData : {}
    };

    fetch('/chat-process', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody)
    })
    .then(r => r.json())
    .then(data => {
      const loadingMessage = chatMessages.lastElementChild;
      if (loadingMessage && loadingMessage.querySelector('.loading')) loadingMessage.remove();

      if (data.success) {
        clearClarificationState();
        const botResponse = escapeHtml(data.response || '');
        addBotMessage(botResponse);
        lastBotResponse = data.response || '';
        jqlQuery.textContent = data.jql || '';
        showResults(data.results);
        if (data.jql) {
          resultContainer.style.display = 'block';
        } else {
          resultContainer.style.display = 'none';
        }
      } else {
        clearClarificationState();
        const msg = (data && (data.error || data.details)) ? (data.error + (data.details ? (' (' + data.details + ')') : '')) : 'Xin lỗi, tôi không thể xử lý yêu cầu của bạn.';
        addBotMessage('<b>Lỗi:</b> ' + escapeHtml(msg));
        resultContainer.style.display = 'none';
        showResults([]);
      }
      sendButton.disabled = false;
    })
    .catch(err => {
      const loadingMessage = chatMessages.lastElementChild;
      if (loadingMessage && loadingMessage.querySelector('.loading')) loadingMessage.remove();
      addBotMessage('Đã xảy ra lỗi khi xử lý yêu cầu của bạn. Vui lòng thử lại sau.');
      clearClarificationState();
      sendButton.disabled = false;
      resultContainer.style.display = 'none';
      showResults([]);
      console.error(err);
    });
  }

  function processClarificationChoice(selectedOption, action) {
    sendButton.disabled = true;
    addBotMessage('<span class="loading"></span>Đang xử lý lựa chọn của bạn...');

    const requestBody = {
      message: selectedOption,
      projectKey: window.__projectKey,
      clarificationStep: action || clarificationState.clarificationStep,
      clarificationData: clarificationState.clarificationData
    };

    fetch('/chat-process', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody)
    })
    .then(r => r.json())
    .then(data => {
      const loadingMessage = chatMessages.lastElementChild;
      if (loadingMessage && loadingMessage.querySelector('.loading')) loadingMessage.remove();

      if (data.success) {
        if (data.needsClarification) {
          // Tiếp tục clarification flow
          clarificationState = {
            clarificationStep: data.clarificationStep,
            clarificationData: data.clarificationData
          };
          addBotMessage(data.response, data.options);
        } else {
          // Hoàn thành clarification, hiển thị kết quả
          clearClarificationState();
          const botResponse = escapeHtml(data.response || '');
          addBotMessage(botResponse);
          lastBotResponse = data.response || '';
          jqlQuery.textContent = data.jql || '';
          showResults(data.results);
          if (data.jql) {
            resultContainer.style.display = 'block';
          } else {
            resultContainer.style.display = 'none';
          }
        }
      } else {
        clearClarificationState();
        const msg = (data && (data.error || data.details)) ? (data.error + (data.details ? (' (' + data.details + ')') : '')) : 'Xin lỗi, tôi không thể xử lý lựa chọn của bạn.';
        addBotMessage('<b>Lỗi:</b> ' + escapeHtml(msg));
        resultContainer.style.display = 'none';
        showResults([]);
      }
      sendButton.disabled = false;
    })
    .catch(err => {
      const loadingMessage = chatMessages.lastElementChild;
      if (loadingMessage && loadingMessage.querySelector('.loading')) loadingMessage.remove();
      addBotMessage('Đã xảy ra lỗi khi xử lý lựa chọn của bạn. Vui lòng thử lại sau.');
      clearClarificationState();
      sendButton.disabled = false;
      resultContainer.style.display = 'none';
      showResults([]);
      console.error(err);
    });
  }

  function clearClarificationState() {
    clarificationState = null;
  }

  // Offer chart creation when response contains "Tình hình"
  function offerChartCreation(results, statistics) {
    // Step 1: Ask user to choose classification type
    const classificationOptions = [
      { id: 'classify-priority', text: '🎯 Phân loại theo Priority (Ưu tiên)', action: 'select_classification' },
      { id: 'classify-status', text: '📊 Phân loại theo Status (Trạng thái)', action: 'select_classification' },
      { id: 'classify-type', text: '🏷️ Phân loại theo Issue Type (Loại ticket)', action: 'select_classification' },
      { id: 'classify-assignee', text: '� Phân loại theo Assignee (Người phụ trách)', action: 'select_classification' }
    ];
    
    const questionPrefix = '🤖 ';
    const message = questionPrefix + '📊 Bạn muốn phân tích dữ liệu theo tiêu chí nào?';
    addBotMessage(message, classificationOptions);
    
    // Set up chart creation state - Lưu cả statistics từ backend
    window.__chartCreationData = results;
    window.__chartStatistics = statistics; // Lưu statistics đã tính sẵn từ backend
    window.__chartClassification = 'priority'; // Default
  }

  // Create and display chart
  function createChart(chartType) {
    const results = window.__chartCreationData || [];
    if (!results || results.length === 0) {
      addBotMessage('❌ Không có dữ liệu để tạo biểu đồ.');
      return;
    }
    
    addBotMessage('⏳ Đang tạo biểu đồ...');
    
    // Process data for charts
    const chartData = processDataForChart(results, chartType);
    displayChart(chartType, chartData);
    
    addBotMessage('✅ Biểu đồ đã được tạo thành công! Xem bên dưới.');
  }

  // Process Jira data for charts (similar to Risk Management module)
  function processDataForChart(issues, chartType) {
    // Ưu tiên sử dụng statistics đã tính sẵn từ backend
    const backendStats = window.__chartStatistics;
    
    if (backendStats && backendStats.status && backendStats.priority && backendStats.assignee) {
      // Dùng data từ backend (đã được tính chính xác theo filter)
      console.log('[Chart] Sử dụng statistics từ backend:', backendStats);
      
      // Calculate type counts from raw issues (vì backend chưa có type)
      const typeCounts = {};
      issues.forEach(issue => {
        const issueType = issue.fields?.issuetype?.name || 'Unknown';
        typeCounts[issueType] = (typeCounts[issueType] || 0) + 1;
      });
      
      return {
        status: backendStats.status,
        priority: backendStats.priority,
        assignee: backendStats.assignee,
        type: typeCounts,
        total: issues.length
      };
    }
    
    // Fallback: Tính lại từ raw data (nếu backend không trả về statistics)
    console.log('[Chart] Fallback: Tính statistics từ raw data');
    const statusCounts = {};
    const priorityCounts = {};
    const assigneeCounts = {};
    const typeCounts = {};
    
    issues.forEach(issue => {
      // Count by status
      const status = issue.fields?.status?.name || 'Unknown';
      statusCounts[status] = (statusCounts[status] || 0) + 1;
      
      // Count by priority
      const priority = issue.fields?.priority?.name || 'None';
      priorityCounts[priority] = (priorityCounts[priority] || 0) + 1;
      
      // Count by assignee
      const assignee = issue.fields?.assignee?.displayName || 'Unassigned';
      assigneeCounts[assignee] = (assigneeCounts[assignee] || 0) + 1;
      
      // Count by issue type
      const issueType = issue.fields?.issuetype?.name || 'Unknown';
      typeCounts[issueType] = (typeCounts[issueType] || 0) + 1;
    });
    
    return {
      status: statusCounts,
      priority: priorityCounts,
      assignee: assigneeCounts,
      type: typeCounts,
      total: issues.length
    };
  }

  // Display chart in a modal
  function displayChart(chartType, chartData) {
    // Get selected classification type (default to 'priority' if not set)
    const classificationType = window.__chartClassification || 'priority';
    
    // Get appropriate data based on classification
    const dataSource = chartData[classificationType] || chartData.priority;
    const labels = Object.keys(dataSource);
    const data = Object.values(dataSource);
    
    // Create chart modal
    const modal = document.createElement('div');
    modal.className = 'chart-modal';
    
    // Define chart titles
    const chartTitles = {
      'priority': 'Phân tích tickets theo Priority (Ưu tiên)',
      'status': 'Phân tích tickets theo Status (Trạng thái)',
      'type': 'Phân tích tickets theo Issue Type (Loại ticket)',
      'assignee': 'Phân tích tickets theo Assignee (Người phụ trách)'
    };
    const chartTitle = chartTitles[classificationType] || 'Phân tích tickets';
    
    modal.innerHTML = \`
      <div class="chart-modal-content">
        <div class="chart-modal-header">
          <h3><i class="fas fa-chart-bar"></i> Biểu đồ phân tích</h3>
          <button class="chart-modal-close" onclick="this.closest('.chart-modal').remove()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="chart-modal-body">
          <canvas id="dynamicChart"></canvas>
        </div>
      </div>
    \`;
    document.body.appendChild(modal);
    
    // Create chart using Chart.js
    const ctx = document.getElementById('dynamicChart').getContext('2d');
    
    // Generate vibrant colors for each data point
    const colors = generateChartColors(labels.length);
    
    const config = {
      type: chartType,
      data: {
        labels: labels,
        datasets: [{
          label: 'Số lượng tickets',
          data: data,
          backgroundColor: colors.background,
          borderColor: colors.border,
          borderWidth: 2
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: true,
        plugins: {
          legend: {
            position: 'top',
            labels: {
              font: {
                size: 14,
                family: 'Inter'
              }
            }
          },
          title: {
            display: true,
            text: chartTitle,
            font: {
              size: 18,
              weight: 'bold',
              family: 'Inter'
            }
          }
        }
      }
    };
    
    new Chart(ctx, config);
  }
  
  // Helper function to generate colors for charts
  function generateChartColors(count) {
    const baseColors = [
      { bg: 'rgba(0, 150, 57, 0.8)', border: 'rgba(0, 150, 57, 1)' },      // Green
      { bg: 'rgba(54, 162, 235, 0.8)', border: 'rgba(54, 162, 235, 1)' },  // Blue
      { bg: 'rgba(255, 206, 86, 0.8)', border: 'rgba(255, 206, 86, 1)' },  // Yellow
      { bg: 'rgba(255, 99, 132, 0.8)', border: 'rgba(255, 99, 132, 1)' },  // Red
      { bg: 'rgba(153, 102, 255, 0.8)', border: 'rgba(153, 102, 255, 1)' },// Purple
      { bg: 'rgba(255, 159, 64, 0.8)', border: 'rgba(255, 159, 64, 1)' },  // Orange
      { bg: 'rgba(75, 192, 192, 0.8)', border: 'rgba(75, 192, 192, 1)' },  // Teal
      { bg: 'rgba(255, 99, 255, 0.8)', border: 'rgba(255, 99, 255, 1)' },  // Pink
      { bg: 'rgba(128, 128, 128, 0.8)', border: 'rgba(128, 128, 128, 1)' } // Gray
    ];
    
    const backgrounds = [];
    const borders = [];
    
    for (let i = 0; i < count; i++) {
      const colorIndex = i % baseColors.length;
      backgrounds.push(baseColors[colorIndex].bg);
      borders.push(baseColors[colorIndex].border);
    }
    
    return {
      background: backgrounds,
      border: borders
    };
  }

  // Chat send
  function sendMessage() {
    const message = messageInput.value.trim();
    if (!message) return;
    addUserMessage(message);
    messageInput.value = '';
    sendButton.disabled = true;
    
    // Add to conversation history (natural mode)
    if (currentChatMode === 'natural') {
      addToConversationHistory('user', message);
    }
    
    // Check if we're in clarification flow
    if (clarificationState && clarificationState.clarificationStep) {
      // If in project_search_input step, treat message as search term
      if (clarificationState.clarificationStep === 'project_search_input') {
        // Don't add loading here - processClarificationChoice will handle it
        processClarificationChoice(message, clarificationState.clarificationStep);
        return;
      }
    }
    
    addBotMessage('<span class="loading"></span>Đang xử lý câu hỏi của bạn...');

    fetch('/chat-process', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        message, 
        projectKey: window.__projectKey,
        mode: currentChatMode,
        chatId: 'web-user',
        conversationHistory: currentChatMode === 'natural' ? conversationHistory : []
      })
    })
    .then(r => r.json())
    .then(data => {
      const loadingMessage = chatMessages.lastElementChild;
      if (loadingMessage && loadingMessage.querySelector('.loading')) loadingMessage.remove();

      if (data.success) {
        // Add assistant response to history (natural mode)
        if (currentChatMode === 'natural' && data.response) {
          addToConversationHistory('assistant', data.response);
        }
        
        if (data.needsClarification) {
          // Bắt đầu clarification flow (menu mode) hoặc AI clarification (natural mode)
          if (currentChatMode === 'natural') {
            // Natural mode: AI asks for clarification naturally
            clarificationState = {
              clarificationStep: data.clarificationStep || 'natural_clarification',
              clarificationData: data.clarificationData || {}
            };
            addBotMessage(data.response, data.options);
          } else {
            // Menu mode: Show numbered options
            clarificationState = {
              clarificationStep: data.clarificationStep || 'select_scope',
              clarificationData: data.clarificationData || {
                originalMessage: data.originalMessage || message,
                clarificationType: data.clarificationType,
                platform: 'webapp'
              }
            };
            addBotMessage(data.response, data.options);
          }
        } else {
          // Xử lý thông thường
          const botResponse = escapeHtml(data.response || '');
          addBotMessage(botResponse);
          lastBotResponse = data.response || ''; // Lưu response gốc để gửi Zalo
          jqlQuery.textContent = data.jql || '';
          showResults(data.results);
          
          // Hiển thị floating button khi có kết quả
          if (data.jql) {
            floatingResultBtn.classList.add('has-result');
            resultBadge.style.display = 'flex'; // Show notification badge
            
            // Offer chart creation when there's a JQL query
            setTimeout(() => {
              offerChartCreation(data.results || [], data.statistics || null);
            }, 300);
          } else {
            floatingResultBtn.classList.remove('has-result');
            resultBadge.style.display = 'none';
            resultContainer.style.display = 'none';
          }
        }
      } else {
        const msg = (data && (data.error || data.details)) ? (data.error + (data.details ? (' (' + data.details + ')') : '')) : 'Xin lỗi, tôi không thể xử lý câu hỏi của bạn.';
        addBotMessage('<b>Lỗi:</b> ' + escapeHtml(msg));
        lastBotResponse = '';
        resultContainer.style.display = 'none';
        floatingResultBtn.classList.remove('has-result');
        resultBadge.style.display = 'none';
        showResults([]);
      }
      sendButton.disabled = false;
    })
    .catch(err => {
      const loadingMessage = chatMessages.lastElementChild;
      if (loadingMessage && loadingMessage.querySelector('.loading')) loadingMessage.remove();
      addBotMessage('Đã xảy ra lỗi khi xử lý câu hỏi của bạn. Vui lòng thử lại sau.');
      lastBotResponse = '';
      sendButton.disabled = false;
      resultContainer.style.display = 'none';
      floatingResultBtn.classList.remove('has-result');
      resultBadge.style.display = 'none';
      showResults([]);
      console.error(err);
    });
  }

  // Toggle result container via floating button
  if (floatingResultBtn) {
    floatingResultBtn.addEventListener('click', () => {
      if (resultContainer.style.display === 'none' || !resultContainer.style.display) {
        resultContainer.style.display = 'block';
        resultContainer.classList.remove('collapsed');
        resultBadge.style.display = 'none'; // Hide badge when opened
      } else {
        resultContainer.style.display = 'none';
      }
    });
  }

  // Toggle result container collapse/expand via header
  const resultHeader = document.getElementById('resultHeader');
  if (resultHeader) {
    resultHeader.addEventListener('click', () => {
      resultContainer.classList.toggle('collapsed');
    });
  }

  const closeResults = document.getElementById('closeResults');
  if (closeResults) closeResults.addEventListener('click', (e) => { 
    e.stopPropagation(); // Prevent header click
    resultContainer.style.display = 'none';
    floatingResultBtn.classList.remove('has-result'); // Hide floating button
  });

  copyJql.addEventListener('click', () => {
    const text = jqlQuery.textContent || '';
    if (!text.trim()) return;
    navigator.clipboard.writeText(text)
      .then(() => { copyJql.textContent = 'Đã sao chép!'; setTimeout(() => { copyJql.textContent = 'Sao chép JQL'; }, 2000); })
      .catch(err => { console.error('Failed to copy: ', err); });
  });

  sendButton.addEventListener('click', sendMessage);
  messageInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') { sendMessage(); } });

  // Function to send message via Zalo
  async function sendViaZalo() {
    try {
      const receiver = zaloContactSelect && zaloContactSelect.value ? zaloContactSelect.value : '';
      if (!receiver) {
        alert('Hãy bấm "Tải danh bạ" và chọn người nhận trước khi gửi.');
        return;
      }
      const defaultMsg = makeDefaultZaloMessage();
      const text = prompt('Nhập nội dung tin nhắn:', defaultMsg);
      if (text == null || !text.trim()) return; // user cancel

      const res = await fetch('/zalo/push-by-name', {
        method: 'POST',
        headers: { 'content-type':'application/json' },
        body: JSON.stringify({ display_name: receiver, text })
      }).then(r=>r.json());
      if (!res.ok) { alert('Gửi thất bại: ' + (res.error || '')); return; }
      alert('Đã gửi tin nhắn qua Zalo!');
    } catch (e) {
      alert('Lỗi gửi Zalo: ' + String(e));
    }
  }

  // Gửi qua Zalo: nút trong result container
  const zaloButton = document.getElementById('zaloButton');
  if (zaloButton) zaloButton.addEventListener('click', sendViaZalo);

  // Floating Zalo Button - luôn hiển thị
  const floatingZaloBtn = document.getElementById('floatingZaloBtn');
  if (floatingZaloBtn) floatingZaloBtn.addEventListener('click', sendViaZalo);

  function makeDefaultZaloMessage(){
    try{
      // Gửi nội dung tin nhắn thay vì danh sách ticket
      if (lastBotResponse && lastBotResponse.trim()) {
        return lastBotResponse.trim();
      }
      return 'Kết quả từ Chat Bot PMO';
    }catch{ return 'Kết quả từ Chat Bot PMO'; }
  }

  function nowHM(){ const n=new Date(); return n.toLocaleTimeString('vi-VN',{hour:'2-digit',minute:'2-digit'}); }
  function escapeHtml(t){ const m={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'}; return String(t).replace(/[&<>\"']/g, ch => m[ch]); }

  // Auto load contacts và projects
  loadContacts();
});
</script>
</body>
</html>`;
}


// ============================================================================
// 8) ROUTER (export default)
// ============================================================================

// ---- Auth helpers & Index HTML ----
function parseCookies(cookieHeader) {
  const out = {};
  if (!cookieHeader) return out;
  cookieHeader.split(/;\s*/).forEach(p => {
    const [k, ...rest] = p.split("=");
    if (!k) return;
    out[decodeURIComponent(k.trim())] = decodeURIComponent(rest.join("=").trim() || "");
  });
  return out;
}
function bytesToHex(bytes) {
  return [...new Uint8Array(bytes)].map(b => b.toString(16).padStart(2, '0')).join('');
}
async function signToken(secret, payload) {
  const enc = new TextEncoder();
  const key = await crypto.subtle.importKey('raw', enc.encode(String(secret)), { name: 'HMAC', hash: 'SHA-256' }, false, ['sign']);
  const sig = await crypto.subtle.sign('HMAC', key, enc.encode(payload));
  return bytesToHex(sig);
}
async function makeSessionToken(env, username, maxAgeSeconds) {
  const now = Math.floor(Date.now() / 1000);
  const exp = now + (maxAgeSeconds || 7200); // default 2h
  const payload = `${username}.${exp}`;
  const secret = env.SESSION_SECRET || env.PASSWORD || 'fallback-secret';
  const sig = await signToken(secret, payload);
  return `${payload}.${sig}`;
}
async function verifySessionToken(env, token) {
  if (!token || typeof token !== 'string') return false;
  const parts = token.split('.');
  if (parts.length !== 3) return false;
  const [username, expStr, sig] = parts;
  const exp = Number(expStr);
  if (!username || !exp || exp < Math.floor(Date.now() / 1000)) return false;
  const payload = `${username}.${exp}`;
  const secret = env.SESSION_SECRET || env.PASSWORD || 'fallback-secret';
  const expectedSig = await signToken(secret, payload);
  return sig === expectedSig;
}
function buildSessionCookie(token, remember) {
  const attrs = [
    `session=${encodeURIComponent(token)}`,
    'Path=/',
    'HttpOnly',
    'Secure',
    'SameSite=Lax',
    remember ? 'Max-Age=' + (60*60*24*14) : 'Max-Age=' + (60*60*2),
  ];
  return attrs.join('; ');
}
function html(body, status=200, extraHeaders={}){
  return new Response(body, { status, headers: { 'content-type': 'text/html; charset=utf-8', ...corsHeaders(), ...extraHeaders } });
}
const INDEX_HTML = `<!DOCTYPE html>

<html lang="vi">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>Đăng nhập - BIDV PMO</title>
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet"/>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&amp;display=swap" rel="stylesheet"/>
<style>
        /* --- Design System --- */
        :root {
            --bg: #f6f8fb;
            --card: #ffffff;
            --soft: #f1f5f9;
            --text: #111827;
            --muted: #6b7280;
            --line: #e5e7eb;
            --primary: #009639;
            --primary-600: #006b2a;
            --accent: #22c55e;
            --error: #e53e3e;
            --success: #10b981;
            --radius: 12px;
            --shadow: 0 4px 12px rgba(16,24,40,.08);
            --shadow-lg: 0 10px 25px rgba(16,24,40,.12);
            --gradient: linear-gradient(135deg, var(--primary), var(--primary-600));
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
            background: var(--bg);
            color: var(--text);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            overflow-x: hidden;
        }

        /* Animated background particles */
        .particles {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 0;
        }

        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: var(--primary);
            border-radius: 50%;
            opacity: 0.3;
            animation: float 15s infinite linear;
        }

        @keyframes float {
            0% {
                transform: translateY(100vh) rotate(0deg);
                opacity: 0;
            }
            10% {
                opacity: 0.3;
            }
            90% {
                opacity: 0.3;
            }
            100% {
                transform: translateY(-100vh) rotate(360deg);
                opacity: 0;
            }
        }

        /* Top banner */
        .top-banner {
            background: var(--gradient);
            color: white;
            padding: 40px 20px;
            text-align: center;
            position: relative;
            overflow: hidden;
            z-index: 1;
        }

        .top-banner::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, 
                rgba(255,255,255,0.1) 0%, 
                rgba(255,255,255,0.05) 50%, 
                rgba(255,255,255,0.1) 100%);
            animation: shimmer 3s infinite;
        }

        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .banner-content {
            max-width: 1200px;
            margin: 0 auto;
            position: relative;
            z-index: 1;
        }

        .banner-content h1 {
            font-size: 32px;
            font-weight: 800;
            margin-bottom: 12px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
            animation: fadeInDown 0.8s ease-out;
        }

        .banner-content p {
            font-size: 18px;
            opacity: 0.95;
            margin-bottom: 30px;
            animation: fadeInDown 0.8s ease-out 0.2s both;
        }

        @keyframes fadeInDown {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Stats badges */
        .stats-badges {
            display: flex;
            justify-content: center;
            gap: 20px;
            flex-wrap: wrap;
            animation: fadeInUp 0.8s ease-out 0.4s both;
        }

        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .stat-badge {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 50px;
            padding: 12px 20px;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            position: relative;
            overflow: hidden;
        }

        .stat-badge::before {
            content: "";
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .stat-badge:hover::before {
            left: 100%;
        }

        .stat-badge:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-5px) scale(1.05);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }

        .stat-badge i {
            font-size: 18px;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        .stat-badge .stat-number {
            font-size: 20px;
            font-weight: 700;
        }

        .stat-badge .stat-label {
            font-size: 14px;
            opacity: 0.9;
        }

        /* Main content area */
        .main-content {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 40px 20px;
            position: relative;
            z-index: 1;
        }

        /* Login container */
        .login-container {
            width: 100%;
            max-width: 420px;
            background: var(--card);
            border-radius: 20px;
            padding: 40px;
            box-shadow: var(--shadow-lg);
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            position: relative;
            overflow: hidden;
        }

        .login-container::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: var(--gradient);
        }

        .login-container:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(16,24,40,.15);
        }

        .login-header {
            text-align: center;
            margin-bottom: 35px;
            position: relative;
        }

        .login-header::after {
            content: "";
            position: absolute;
            bottom: -15px;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 3px;
            background: var(--gradient);
            border-radius: 3px;
        }

        .login-header h2 {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 8px;
            background: var(--gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .login-header p {
            color: var(--muted);
            font-size: 15px;
        }

        /* Form elements */
        .form-group {
            position: relative;
            margin-bottom: 25px;
        }

        .form-control {
            width: 100%;
            padding: 16px 15px 16px 50px;
            border: 2px solid var(--line);
            border-radius: var(--radius);
            font-size: 15px;
            background: var(--soft);
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            background: var(--card);
            box-shadow: 0 0 0 4px rgba(0, 150, 57, 0.1);
            transform: translateY(-2px);
        }

        .form-control.error {
            border-color: var(--error);
            animation: shake 0.5s ease-out;
        }

        .form-control.success {
            border-color: var(--success);
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
            20%, 40%, 60%, 80% { transform: translateX(5px); }
        }

        .form-label {
            position: absolute;
            left: 50px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 15px;
            color: var(--muted);
            pointer-events: none;
            transition: all 0.3s ease;
        }

        .form-control:focus ~ .form-label,
        .form-control:not(:placeholder-shown) ~ .form-label {
            top: -12px;
            left: 15px;
            font-size: 12px;
            color: var(--primary);
            background: var(--card);
            padding: 0 6px;
            font-weight: 600;
        }

        .input-icon {
            position: absolute;
            left: 18px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--muted);
            transition: all 0.3s ease;
            font-size: 16px;
        }

        .form-control:focus ~ .input-icon { 
            color: var(--primary);
            transform: translateY(-50%) scale(1.1);
        }

        .toggle-password { 
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .toggle-password:hover {
            color: var(--primary);
            transform: translateY(-50%) scale(1.1);
        }

        /* Form options */
        .form-options {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .remember-me {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .remember-me input[type="checkbox"] {
            width: 18px;
            height: 18px;
            accent-color: var(--primary);
            cursor: pointer;
        }

        .remember-me label {
            font-size: 14px;
            color: var(--muted);
            cursor: pointer;
            user-select: none;
            transition: color 0.3s ease;
        }

        .remember-me label:hover {
            color: var(--primary);
        }

        .forgot-password {
            font-size: 14px;
        }

        .forgot-password a {
            color: var(--primary);
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            position: relative;
        }

        .forgot-password a::after {
            content: "";
            position: absolute;
            bottom: -2px;
            left: 0;
            width: 0;
            height: 2px;
            background: var(--primary);
            transition: width 0.3s ease;
        }

        .forgot-password a:hover::after {
            width: 100%;
        }

        /* Login button */
        .login-button {
            width: 100%;
            appearance: none;
            border: 0;
            border-radius: var(--radius);
            padding: 16px 24px;
            font-weight: 700;
            font-size: 16px;
            cursor: pointer;
            display: inline-flex;
            gap: 10px;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            background: var(--gradient);
            color: #fff;
            box-shadow: 0 6px 12px rgba(0,150,57,.25);
            margin-top: 10px;
        }

        .login-button::before {
            content: "";
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: left 0.5s;
        }

        .login-button:hover::before {
            left: 100%;
        }

        .login-button:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0,150,57,.35);
        }

        .login-button:active:not(:disabled) {
            transform: translateY(-1px);
        }

        .login-button:disabled { 
            opacity: 0.7; 
            cursor: not-allowed; 
        }

        /* Messages */
        .message {
            display: none;
            padding: 12px 16px;
            border-radius: var(--radius);
            margin-bottom: 20px;
            text-align: center;
            font-size: 14px;
            font-weight: 500;
            animation: slideDown 0.3s ease-out;
        }

        .message.success {
            background: rgba(16, 185, 129, 0.1);
            color: var(--success);
            border: 1px solid rgba(16, 185, 129, 0.2);
        }

        .message.error {
            background: rgba(229, 62, 62, 0.1);
            color: var(--error);
            border: 1px solid rgba(229, 62, 62, 0.2);
        }

        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Footer */
        .footer {
            text-align: center;
            padding: 25px;
            color: var(--muted);
            font-size: 13px;
            position: relative;
            z-index: 1;
        }

        .footer a {
            color: var(--primary);
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .footer a:hover {
            color: var(--primary-600);
        }

        /* Loading spinner */
        .spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,0.3);
            border-top-color: white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Responsive design */
        @media (max-width: 480px) {
            .login-container {
                padding: 30px 20px;
            }
            
            .top-banner {
                padding: 30px 15px;
            }
            
            .banner-content h1 {
                font-size: 26px;
            }
            
            .stats-badges {
                gap: 12px;
            }
            
            .stat-badge {
                padding: 10px 15px;
            }
        }
    </style>
</head>
<body>
<!-- Animated background particles -->
<div class="particles" id="particles"></div>
<!-- Top banner -->
<header class="top-banner">
<div class="banner-content">
<h1>Chào mừng trở lại!</h1>
<p>Nền tảng quản lý dự án thông minh, hiệu quả và tự động.</p>
<!-- Stats badges -->
<div class="stats-badges">
<div class="stat-badge">
<i class="fas fa-project-diagram"></i>
<span class="stat-number">500+</span>
<span class="stat-label">Dự án</span>
</div>
<div class="stat-badge">
<i class="fas fa-check-circle"></i>
<span class="stat-number">98%</span>
<span class="stat-label">Hoàn thành đúng hạn</span>
</div>
<div class="stat-badge">
<i class="fas fa-headset"></i>
<span class="stat-number">24/7</span>
<span class="stat-label">Hỗ trợ</span>
</div>
</div>
</div>
</header>
<!-- Main content area -->
<main class="main-content">
<div class="login-container">
<div class="login-header">
<h2>Đăng nhập</h2>
<p>Vui lòng nhập thông tin tài khoản của bạn.</p>
</div>
<!-- Messages -->
<div class="message success" id="successMessage">
<i class="fas fa-check-circle"></i> Đăng nhập thành công!
            </div>
<div class="message error" id="errorMessage">
<i class="fas fa-exclamation-circle"></i> <span id="errorText">Tên người dùng hoặc mật khẩu không chính xác.</span>
</div>
<form id="loginForm" novalidate="">
<div class="form-group">
<input class="form-control" id="username" name="username" placeholder=" " required="" type="text"/>
<label class="form-label" for="username">Tên người dùng</label>
<i class="fas fa-user input-icon"></i>
</div>
<div class="form-group">
<input class="form-control" id="password" name="password" placeholder=" " required="" type="password"/>
<label class="form-label" for="password">Mật khẩu</label>
<i class="fas fa-lock input-icon toggle-password" onclick="togglePasswordVisibility()"></i>
</div>
<div class="form-options">
<div class="remember-me">
<input id="remember" name="remember" type="checkbox"/>
<label for="remember">Ghi nhớ đăng nhập</label>
</div>
<div class="forgot-password">
<a href="#">Quên mật khẩu?</a>
</div>
</div>
<button class="login-button" id="loginButton" type="submit">
<i class="fas fa-arrow-right" id="buttonIcon"></i>
<span id="buttonText">Đăng nhập</span>
<div class="spinner" id="spinner"></div>
</button>
</form>
</div>
</main>
<!-- Footer -->
<footer class="footer">
<p>© 2025 BIDV PMO. <a href="#">Chính sách bảo mật</a> | <a href="#">Điều khoản sử dụng</a></p>
</footer>
<script>
    // Animated background particles
    function createParticles() {
        const particlesContainer = document.getElementById('particles');
        if (!particlesContainer) return;
        const particleCount = 30;
        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.classList.add('particle');
            particle.style.left = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() * 15 + 's';
            particle.style.animationDuration = (15 + Math.random() * 10) + 's';
            particlesContainer.appendChild(particle);
        }
    }
    createParticles();

    // DOM elements
    const form = document.getElementById('loginForm');
    const usernameInput = document.getElementById('username');
    const passwordInput = document.getElementById('password');
    const loginButton = document.getElementById('loginButton');
    const buttonText = document.getElementById('buttonText');
    const buttonIcon = document.getElementById('buttonIcon');
    const spinner = document.getElementById('spinner');
    const successMessage = document.getElementById('successMessage');
    const errorMessage = document.getElementById('errorMessage');
    const errorText = document.getElementById('errorText');

    function hideAllMessages() {
        successMessage.style.display = 'none';
        errorMessage.style.display = 'none';
    }
    function showMessage(type, message) {
        hideAllMessages();
        if (type === 'success') {
            successMessage.style.display = 'block';
            setTimeout(() => { successMessage.style.display = 'none'; }, 2000);
        } else if (type === 'error') {
            errorText.textContent = message;
            errorMessage.style.display = 'block';
            setTimeout(() => { errorMessage.style.display = 'none'; }, 3000);
        }
    }
    function togglePasswordVisibility() {
        const type = passwordInput.type === 'password' ? 'text' : 'password';
        passwordInput.type = type;
        const icon = document.querySelector('.toggle-password');
        icon.classList.toggle('fa-lock');
        icon.classList.toggle('fa-lock-open');
    }
    window.togglePasswordVisibility = togglePasswordVisibility;

    function validateForm() {
        let isValid = true;
        usernameInput.classList.remove('error', 'success');
        passwordInput.classList.remove('error', 'success');
        if (usernameInput.value.trim() === '') {
            usernameInput.classList.add('error'); isValid = false;
        } else usernameInput.classList.add('success');
        if (passwordInput.value.trim() === '') {
            passwordInput.classList.add('error'); isValid = false;
        } else passwordInput.classList.add('success');
        return isValid;
    }

    form.addEventListener('submit', async (event) => {
        event.preventDefault();
        hideAllMessages();
        if (!validateForm()) {
            showMessage('error', 'Vui lòng điền đầy đủ thông tin.');
            return;
        }
        loginButton.disabled = true;
        buttonText.textContent = 'Đang xử lý';
        buttonIcon.style.display = 'none';
        spinner.style.display = 'block';
        try {
            const res = await fetch('/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    username: usernameInput.value.trim(),
                    password: passwordInput.value.trim(),
                    remember: document.getElementById('remember').checked
                })
            });
            spinner.style.display = 'none';
            buttonIcon.style.display = 'block';
            if (res.ok) {
                buttonText.textContent = 'Thành công';
                buttonIcon.className = 'fas fa-check';
                loginButton.style.background = 'var(--accent)';
                showMessage('success', 'Đăng nhập thành công! Đang chuyển hướng...');
                setTimeout(() => { window.location.href = '/home'; }, 800);
            } else {
                const data = await res.json().catch(() => ({}));
                buttonText.textContent = 'Thất bại';
                buttonIcon.className = 'fas fa-times';
                loginButton.style.background = 'var(--error)';
                showMessage('error', data?.error || 'Tên người dùng hoặc mật khẩu không chính xác.');
                setTimeout(() => {
                    loginButton.disabled = false;
                    buttonText.textContent = 'Đăng nhập';
                    buttonIcon.className = 'fas fa-arrow-right';
                    loginButton.style.background = '';
                }, 1500);
            }
        } catch (e) {
            spinner.style.display = 'none';
            loginButton.disabled = false;
            buttonText.textContent = 'Đăng nhập';
            buttonIcon.className = 'fas fa-arrow-right';
            showMessage('error', 'Không thể kết nối máy chủ. Thử lại sau.');
        }
    });
</script>
</body>
</html>`;
export default {
  async fetch(req, env, ctx) {
    const url = new URL(req.url);
// Endpoint for OCR extraction
if (req.method === 'POST' && url.pathname === '/ocr-extract') {
  try {
    const { imageUrl, imageKey } = await safeJson(req);
    if (!imageUrl && !imageKey) return json({ ok: false, error: 'Missing imageUrl or imageKey' }, 400);

    // Tạo public URL từ key nếu cần
    const publicUrl = imageUrl || (() => {
      if (!env.R2_PUBLIC_BASE_URL) throw new StepError('config', 'Missing R2_PUBLIC_BASE_URL');
      const base = env.R2_PUBLIC_BASE_URL.replace(/\/$/, '');
      const safeKey = String(imageKey).split('/').map(encodeURIComponent).join('/');
      return `${base}/${safeKey}`;
    })();

    // Kiểm tra API keys
    if (!env.MISTRAL_API_KEY) return json({ ok: false, error: 'Missing MISTRAL_API_KEY' }, 500);
    if (!env.XAI_API_KEY) return json({ ok: false, error: 'Missing XAI_API_KEY' }, 500);

    // BƯỚC 1: Sử dụng Mistral AI để OCR toàn bộ text từ ảnh
    console.log('Step 1: OCR with Mistral AI...');
    const mistralBody = {
      model: "pixtral-12b-2409",
      messages: [
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: 'Hãy trích xuất toàn bộ văn bản có trong ảnh này một cách chính xác và chi tiết nhất. Chỉ trả về nội dung văn bản, không thêm bất kỳ giải thích hay mô tả nào khác.'
            },
            {
              type: 'image_url',
              image_url: {
                url: publicUrl
              }
            }
          ]
        }
      ],
      temperature: 0,
      max_tokens: 2000
    };

    const mistralResponse = await fetch('https://api.mistral.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${env.MISTRAL_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(mistralBody)
    });

    if (!mistralResponse.ok) {
      const errorText = await mistralResponse.text();
      throw new StepError('mistral', `Mistral AI ${mistralResponse.status}: ${errorText}`);
    }

    const mistralData = await mistralResponse.json();

    let extractedText = '';
    try {
      if (mistralData.choices && mistralData.choices.length > 0 && mistralData.choices[0].message) {
        extractedText = mistralData.choices[0].message.content || '';
      }
    } catch (e) {
      console.error('Error parsing Mistral response:', e);
      throw new StepError('mistral', 'Không thể xử lý kết quả từ Mistral AI');
    }

    if (!extractedText.trim()) {
      throw new StepError('mistral', 'Mistral AI không thể trích xuất text từ ảnh');
    }

    console.log('Mistral extracted text:', extractedText);

    // BƯỚC 2: Sử dụng Grok mini để trích xuất email từ text
    console.log('Step 2: Extract emails with Grok mini...');
    const grokBase = env.XAI_BASE_URL || 'https://api.x.ai/v1';
    const grokBody = {
      model: 'grok-4-fast',
      messages: [
        {
          role: 'user',
          content: `
    Nhiệm vụ: Tìm tất cả các địa chỉ email trong đoạn văn bản dưới đây.
    
    Yêu cầu:
    - Chỉ xuất danh sách email, mỗi email trên một dòng.
    - Không thêm giải thích hay ký tự thừa.
    - Nếu phát hiện lỗi OCR phổ biến (ví dụ: nhầm i ↔ l ↔ I ↔ L, hoặc thiếu dấu chấm, dấu @ sai vị trí), hãy hiệu chỉnh hợp lý để khôi phục địa chỉ email thật.
    - Ưu tiên các miền email phổ biến như gmail.com, outlook.com, yahoo.com, hotmail.com, công ty.vn, v.v.
    - Chỉ trả về email hợp lệ theo cú pháp chuẩn (tên@miền).
    
    Text:
    ${extractedText}
    `
        }
      ],
      temperature: 0,
      max_tokens: 500
    };
    

    const grokResponse = await fetch(`${grokBase}/chat/completions`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${env.XAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(grokBody)
    });

    if (!grokResponse.ok) {
      const errorText = await grokResponse.text();
      throw new StepError('grok', `Grok AI ${grokResponse.status}: ${errorText}`);
    }

    const grokData = await grokResponse.json();

    let result = { text: extractedText, emails: '' };

    try {
      if (grokData.choices && grokData.choices.length > 0 && grokData.choices[0].message) {
        const grokContent = grokData.choices[0].message.content || '';
        
        // Trích xuất email từ kết quả Grok
        const emailRegex = /[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi;
        const emailMatches = grokContent.match(emailRegex);
        if (emailMatches) {
          result.emails = Array.from(new Set(emailMatches.map(email => email.toLowerCase()))).join('; ');
        }
        
        // Fallback: nếu Grok không tìm thấy email, tự extract từ text gốc
        if (!result.emails) {
          const fallbackMatches = extractedText.match(emailRegex);
          if (fallbackMatches) {
            result.emails = Array.from(new Set(fallbackMatches.map(email => email.toLowerCase()))).join('; ');
          }
        }
      }
    } catch (e) {
      console.error('Error parsing Grok response:', e);
      // Fallback: tự extract email từ text gốc nếu Grok fail
      const emailRegex = /[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi;
      const fallbackMatches = extractedText.match(emailRegex);
      if (fallbackMatches) {
        result.emails = Array.from(new Set(fallbackMatches.map(email => email.toLowerCase()))).join('; ');
      }
    }

    console.log('Final result:', result);
    return json({ ok: true, ...result });
  } catch (err) {
    const e = toStepError(err);
    console.error('OCR extraction error:', e);
    return json({ ok: false, error: e.message }, 500);
  }
}
// Endpoint for getting Jira Account ID
if (req.method === 'POST' && url.pathname === '/jira-get-account-id') {
  try {
    const { email } = await safeJson(req);
    if (!email) return json({ ok: false, error: 'Missing email' }, 400);

    const BASE_JIRA = envJiraBase(env);
    const API_URL = `${BASE_JIRA}/rest/api/3/user/search`;

    console.log(`Searching for Jira user with email: ${email}`);

    const r = await fetch(`${API_URL}?query=${encodeURIComponent(email)}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        'Accept': 'application/json',
        'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
      }
    });

    if (!r.ok) {
      const errorText = await r.text();
      console.error('Jira API error:', errorText);
      throw new StepError('jira', `Jira ${r.status}: ${errorText}`);
    }

    const data = await r.json();
    console.log('Jira API response:', data);

    if (data && data.length > 0) {
      // Return the first match's account ID
      const user = data[0];
      console.log(`Found user: ${user.displayName}, accountId: ${user.accountId}`);
      return json({
        ok: true,
        accountId: user.accountId,
        displayName: user.displayName,
        emailAddress: user.emailAddress
      });
    } else {
      // No user found
      console.log(`No user found with email: ${email}`);
      return json({
        ok: true,
        accountId: null,
        message: `No user found with email: ${email}`
      });
    }
  } catch (err) {
    const e = toStepError(err);
    console.error('Jira get account ID error:', e);
    return json({ ok: false, error: e.message }, 500);
  }
}

// Endpoint for processing text with AI (Grok/Gemini) to extract emails
if (req.method === 'POST' && url.pathname === '/process-text-emails') {
  try {
    const { text, aiModel = 'grok4' } = await safeJson(req);
    if (!text || !text.trim()) {
      return json({ ok: false, error: 'Missing text content' }, 400);
    }

    console.log(`Processing text with AI ${aiModel} for email extraction`);

    // Kiểm tra API key và tự động fallback nếu cần
    let finalAiModel = aiModel;
    if (aiModel === 'gemini2.5pro') {
      if (!env.GEMINI_API_KEY) {
        console.warn('GEMINI_API_KEY not found, fallback to Grok');
        finalAiModel = 'grok4';
        if (!env.XAI_API_KEY) throw new Error('Missing both GEMINI_API_KEY and XAI_API_KEY');
      }
    } else {
      if (!env.XAI_API_KEY) throw new Error('Missing XAI_API_KEY');
    }

    // Tạo prompt cho AI để trích xuất email
    const prompt = `Phân tích đoạn văn bản sau và trích xuất tất cả các địa chỉ email có trong đó. Trả về danh sách email cách nhau bằng dấu chấm phẩy (;). Nếu không tìm thấy email nào, trả về chuỗi rỗng.

Văn bản cần phân tích:
${text}

Yêu cầu:
- Chỉ trả về danh sách email, cách nhau bằng dấu ;
- Không thêm giải thích hay text khác
- Định dạng: email1@domain.com;email2@domain.com
- Nếu không có email, trả về chuỗi rỗng`;

    // Gọi AI model tương ứng
    let aiResponse;
    if (finalAiModel === 'gemini2.5pro') {
      aiResponse = await askGemini(env, prompt);
    } else {
      // Default: Grok 4
      aiResponse = await askGrok(env, prompt);
    }
    
    console.log(`${finalAiModel} response:`, aiResponse);

    // Xử lý và chuẩn hóa kết quả
    let emails = '';
    if (aiResponse && aiResponse.trim()) {
      // Trích xuất email từ response (đề phòng AI trả về kèm text khác)
      const emailMatches = aiResponse.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g);
      if (emailMatches && emailMatches.length > 0) {
        // Loại bỏ duplicate và chuẩn hóa
        const uniqueEmails = [...new Set(emailMatches.map(email => email.toLowerCase().trim()))];
        emails = uniqueEmails.join(';');
      }
    }

    console.log('Extracted emails:', emails);

    return json({
      ok: true,
      emails: emails,
      aiModel: finalAiModel,
      message: emails ? `Tìm thấy ${emails.split(';').length} email` : 'Không tìm thấy email'
    });

  } catch (err) {
    const e = toStepError(err);
    console.error('Process text emails error:', e);
    return json({ ok: false, error: e.message }, 500);
  }
}

// Endpoint for getting User info from Account ID
if (req.method === 'POST' && url.pathname === '/jira-get-user-info') {
  try {
    const { accountId } = await safeJson(req);
    if (!accountId) return json({ ok: false, error: 'Missing accountId' }, 400);

    const BASE_JIRA = envJiraBase(env);
    const API_URL = `${BASE_JIRA}/rest/api/3/user?accountId=${encodeURIComponent(accountId)}`;

    console.log(`Getting Jira user info for accountId: ${accountId}`);

    const r = await fetch(API_URL, {
      method: 'GET',
      headers: {
        'Authorization': `Basic ${btoa(atlassianEmail(env) + ':' + env.ATLASSIAN_API_TOKEN)}`,
        'Accept': 'application/json'
      }
    });

    if (!r.ok) {
      const errorText = await r.text();
      console.error('Jira API error:', errorText);
      return json({ ok: false, error: `Jira ${r.status}: ${errorText}` }, 500);
    }

    const userData = await r.json();
    console.log('Jira user info:', userData);

    return json({
      ok: true,
      accountId: userData.accountId,
      displayName: userData.displayName,
      emailAddress: userData.emailAddress
    });
  } catch (err) {
    const e = toStepError(err);
    console.error('Jira get user info error:', e);
    return json({ ok: false, error: e.message }, 500);
  }
}

// Endpoint for getting Project Components
if (req.method === 'POST' && url.pathname === '/jira-get-components') {
  try {
    const { projectKey } = await safeJson(req);
    if (!projectKey) return json({ ok: false, error: 'Missing projectKey' }, 400);

    const BASE_JIRA = envJiraBase(env);
    const API_URL = `${BASE_JIRA}/rest/api/3/project/${encodeURIComponent(projectKey)}/components`;

    console.log(`Getting components for project: ${projectKey}`);

    const r = await fetch(API_URL, {
      method: 'GET',
      headers: {
        'Authorization': `Basic ${btoa(atlassianEmail(env) + ':' + env.ATLASSIAN_API_TOKEN)}`,
        'Accept': 'application/json'
      }
    });

    if (!r.ok) {
      const errorText = await r.text();
      console.error('Jira components API error:', errorText);
      return json({ ok: false, error: `Jira ${r.status}: ${errorText}` }, 500);
    }

    const components = await r.json();
    console.log('Project components:', components);

    return json({
      ok: true,
      components: components
    });

  } catch (err) {
    const e = toStepError(err);
    console.error('Jira get components error:', e);
    return json({ ok: false, error: e.message }, 500);
  }
}

// Endpoint for creating single Jira ticket from Meeting Note (used by createAllJiraTickets)
if (req.method === 'POST' && url.pathname === '/jira-create-ticket') {
  try {
    const { summary, description, assignee, dueDate, projectKey, componentId, parentKey, issueType, priority } = await safeJson(req);
    
    if (!summary) {
      return json({ ok: false, error: 'Missing summary' }, 400);
    }

    const BASE_JIRA = envJiraBase(env);
    
    // Get project key from request or use default
    const jiraProjectKey = projectKey || 'AIG';

    const payload = {
      fields: {
        project: { key: jiraProjectKey },
        summary: summary,
        description: {
          type: 'doc',
          version: 1,
          content: [
            {
              type: 'paragraph',
              content: [
                {
                  type: 'text',
                  text: description || summary
                }
              ]
            }
          ]
        },
        issuetype: { name: issueType || 'Task' },
        priority: { name: priority || 'Medium' }
      }
    };

    // Add assignee if provided (accountId from PIC dropdown)
    if (assignee) {
      payload.fields.assignee = { accountId: assignee };
    }

    // Add due date if provided
    if (dueDate) {
      payload.fields.duedate = dueDate;
    }

    // Add component if provided
    if (componentId) {
      payload.fields.components = [{ id: componentId }];
    }
    
    // Add Start Date custom field (customFieldId=10035) with today's date
    const today = new Date().toISOString().split('T')[0]; // Format: YYYY-MM-DD
    payload.fields['customfield_10035'] = today;

    // Add parent link if parentKey is provided
    if (parentKey) {
      payload.fields.parent = { key: parentKey };
    }

    console.log('Creating Jira ticket with payload:', JSON.stringify(payload, null, 2));

    const response = await fetch(`${BASE_JIRA}/rest/api/3/issue`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        'Accept': 'application/json',
        'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Jira API error:', errorData);
      return json({ 
        ok: false, 
        error: `Jira API Error ${response.status}: ${errorData.errors ? JSON.stringify(errorData.errors) : errorData.errorMessages || 'Unknown error'}` 
      }, response.status);
    }

    const ticketData = await response.json();
    console.log('Ticket created successfully:', ticketData);

    return json({
      ok: true,
      key: ticketData.key,
      id: ticketData.id,
      self: ticketData.self
    });

  } catch (error) {
    console.error('Error creating Jira ticket:', error);
    return json({ ok: false, error: error.message }, 500);
  }
}

    // CORS preflight
    if (req.method === 'OPTIONS') {
      return new Response(null, { status: 204, headers: corsHeaders() });
    }


    // Home (UI) — serve index.html (login)
    if (req.method === 'GET' && url.pathname === '/') {
      const cookies = parseCookies(req.headers.get('Cookie') || '');
      const sess = cookies['session'];
      if (sess && await verifySessionToken(env, sess)) {
        return Response.redirect(new URL('/home', url), 302);
      }
      return html(INDEX_HTML);
    }

    // Login
    if (req.method === 'POST' && url.pathname === '/login') {
      try {
        const body = await safeJson(req);
        const username = String(body?.username || '').trim();
        const password = String(body?.password || '').trim();
        const remember = Boolean(body?.remember);
        if (!username || !password) return json({ ok:false, error:'Missing credentials' }, 400);
        if (username !== env.USER || password !== env.PASSWORD) {
          return json({ ok:false, error:'Tên người dùng hoặc mật khẩu không chính xác.' }, 401);
        }
        const token = await makeSessionToken(env, username, remember ? 60*60*24*14 : 60*60*2);
        return new Response(JSON.stringify({ ok:true }), {
          status: 200,
          headers: { 'content-type': 'application/json', 'Set-Cookie': buildSessionCookie(token, remember), ...corsHeaders() }
        });
      } catch (err) {
        return json({ ok:false, error: toStepError(err).message }, 500);
      }
    }

    // Protected home
    if (req.method === 'GET' && url.pathname === '/home') {
      const cookies = parseCookies(req.headers.get('Cookie') || '');
      const sess = cookies['session'];
      if (sess && await verifySessionToken(env, sess)) {
        return html(homeHTML());
      }
      return Response.redirect(new URL('/', url), 302);
    }

    // Logout
    if (req.method === 'POST' && url.pathname === '/logout') {
      return new Response(null, { status: 204, headers: { 'Set-Cookie': 'session=; Path=/; HttpOnly; Secure; SameSite=Lax; Max-Age=0', ...corsHeaders() } });
    }

    // Meeting Note UI

    // Meeting Note UI
    if (req.method === 'GET' && url.pathname === '/meetingnote') {
      return new Response(meetingNoteHTML(), { headers: { 'content-type': 'text/html; charset=utf-8', ...corsHeaders() } });
    }

    // Chat Bot UI
    if (req.method === 'GET' && url.pathname === '/chatbot') {
      return new Response(chatBotHTML(), { headers: { 'content-type': 'text/html; charset=utf-8', ...corsHeaders() } });
    }

    // Risk Radar UI
if (req.method === 'GET' && url.pathname === '/risk') {
  return new Response(riskRadarHTML(), {
    headers: { 'content-type': 'text/html; charset=utf-8', ...corsHeaders() }
  });
}


    // Chat processing (UI web gọi)
if (req.method === 'POST' && url.pathname === '/chat-process') {
  const { message, projectKey, clarificationStep, clarificationData, mode, chatId, conversationHistory } = await safeJson(req);
  
  const out = await processChatMessage(env, message, { 
    projectKey, 
    clarificationStep, 
    clarificationData,
    mode: mode || 'menu',
    chatId: chatId || 'web-default',
    platform: 'webapp'
  });
  
  return json(out, out.success ? 200 : 500);
}

    // Presign PUT lên R2
    if (req.method === 'POST' && url.pathname === '/sign-put') {
      const { key } = await safeJson(req);
      if (!key) return json({ error: 'Missing key' }, 400);
      const signed = await presignURL(env, 'PUT', key, 15 * 60);
      return json({ url: signed });
    }

    // Create Jira Ticket
    if (req.method === 'POST' && url.pathname === '/create-jira-ticket') {
      try {
        const requestBody = await safeJson(req);
        if (!requestBody.fields) {
          return json({ success: false, error: 'Missing fields in request body' }, 400);
        }

        // Handle parentKey if provided
        if (requestBody.parentKey) {
          requestBody.fields.parent = { key: requestBody.parentKey };
          delete requestBody.parentKey; // Remove from root level
        }

        const BASE_JIRA = envJiraBase(env);
        const API_URL = `${BASE_JIRA}/rest/api/3/issue`;

        console.log('Creating Jira ticket with payload:', JSON.stringify(requestBody, null, 2));

        const response = await fetch(API_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json; charset=utf-8',
            'Accept': 'application/json',
            'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
          },
          body: JSON.stringify(requestBody)
        });

        const responseData = await response.json();

        if (!response.ok) {
          console.error('Jira API error:', responseData);
          return json({ 
            success: false, 
            error: `Jira API Error ${response.status}: ${responseData.errors ? JSON.stringify(responseData.errors) : responseData.message || 'Unknown error'}` 
          }, response.status);
        }

        console.log('Ticket created successfully:', responseData);

        return json({
          success: true,
          key: responseData.key,
          id: responseData.id,
          self: responseData.self
        });

      } catch (error) {
        console.error('Error creating Jira ticket:', error);
        return json({ success: false, error: error.message }, 500);
      }
    }

    // Pipeline: Deepgram → R2 → AI (Grok/Gemini)
    if (req.method === 'POST' && url.pathname === '/transcribe') {
      const { key, templateType = 'mom', aiModel = 'grok4' } = await safeJson(req);
      if (!key) return json({ ok: false, step: 'input', error: 'Missing key' }, 400);

      const steps = { deepgram: { ok: false }, saveR2: { ok: false }, ai: { ok: false } };
      try {
        if (!env.R2_PUBLIC_BASE_URL) throw new StepError('config', 'Missing R2_PUBLIC_BASE_URL');
        if (!env.DEEPGRAM_API_KEY) throw new StepError('config', 'Missing DEEPGRAM_API_KEY');
        
        // Kiểm tra API key và tự động fallback nếu cần
        let finalAiModel = aiModel;
        if (aiModel === 'gemini2.5pro') {
          if (!env.GEMINI_API_KEY) {
            console.warn('GEMINI_API_KEY not found, fallback to Grok');
            finalAiModel = 'grok4';
            if (!env.XAI_API_KEY) throw new StepError('config', 'Missing both GEMINI_API_KEY and XAI_API_KEY');
          }
        } else if (aiModel === 'gpt5nano') {
          if (!env.OPENAI_API_KEY) {
            console.warn('OPENAI_API_KEY not found, fallback to Grok');
            finalAiModel = 'grok4';
            if (!env.XAI_API_KEY) throw new StepError('config', 'Missing both OPENAI_API_KEY and XAI_API_KEY');
          }
        } else {
          if (!env.XAI_API_KEY) throw new StepError('config', 'Missing XAI_API_KEY');
        }

        const base = env.R2_PUBLIC_BASE_URL.replace(/\/$/, '');
        const safeKey = String(key).split('/').map(encodeURIComponent).join('/');
        const audioUrl = `${base}/${safeKey}`;

        // 1) Deepgram → transcript
        const dgUrl = 'https://api.deepgram.com/v1/listen?model=nova-2-general&language=vi&smart_format=true&paragraphs=true&utterances=true&utt_split=900&diarize=true';
        const dgRes = await fetch(dgUrl, {
          method: 'POST',
          headers: { Authorization: `Token ${env.DEEPGRAM_API_KEY}`, 'Content-Type': 'application/json' },
          body: JSON.stringify({ url: audioUrl })
        });
        if (!dgRes.ok) throw new StepError('deepgram', `Deepgram ${dgRes.status}: ${await dgRes.text()}`);
        const dgJson = await dgRes.json();
        const transcript = extractTranscript(dgJson).trim();
        if (!transcript) throw new StepError('deepgram', 'Không trích xuất được transcript');
        steps.deepgram.ok = true;

        // 2) Lưu transcript.txt lên R2 (public)
        const txtKey = key.replace(/\.[^/.]+$/, '') + '.transcript.txt';
        const signedTxt = await presignURL(env, 'PUT', txtKey, 60);
        const putRes = await fetch(signedTxt, { method: 'PUT', headers: { 'content-type': 'text/plain; charset=utf-8' }, body: transcript });
        if (!putRes.ok) throw new StepError('saveR2', `Upload transcript ${putRes.status}: ${await putRes.text()}`);
        const transcriptUrl = `${base}/${txtKey.split('/').map(encodeURIComponent).join('/')}`;
        steps.saveR2.ok = true;

        // 3) AI Model → JSON (Grok, Gemini hoặc GPT-5 Nano với fallback)
        let llmJson, llmText, aiResponse;
        let actualModel = finalAiModel;
        let fallbackUsed = false;
        
        if (finalAiModel === 'gemini2.5pro') {
          try {
            const { json, raw, response } = await callGemini(env, transcript, templateType);
            llmJson = json;
            llmText = raw;
            aiResponse = response;
          } catch (geminiError) {
            console.error('Gemini error:', geminiError);
            
            // Check if it's a geo-restriction error
            const errorMsg = String(geminiError.message || '');
            const isGeoError = errorMsg.includes('User location is not supported') || 
                              errorMsg.includes('FAILED_PRECONDITION') ||
                              errorMsg.includes('location') ||
                              geminiError.step === 'gemini';
            
            if (isGeoError) {
              console.log('⚠️ Gemini geo-restricted, automatically falling back to Grok...');
              fallbackUsed = true;
              // Fallback to Grok
              try {
                const { json, raw, response } = await callGrok(env, transcript, templateType);
                llmJson = json;
                llmText = raw;
                aiResponse = response;
                actualModel = 'grok-beta';
              } catch (grokError) {
                // If both fail, throw the original Gemini error
                throw geminiError;
              }
            } else {
              // If it's not a geo error, throw immediately
              throw geminiError;
            }
          }
        } else if (finalAiModel === 'gpt5nano') {
          try {
            const { json, raw, response } = await callGPT5Nano(env, transcript, templateType);
            llmJson = json;
            llmText = raw;
            aiResponse = response;
          } catch (gptError) {
            console.error('GPT-5 Nano error:', gptError);
            console.log('⚠️ GPT-5 Nano failed, automatically falling back to Grok...');
            fallbackUsed = true;
            // Fallback to Grok
            try {
              const { json, raw, response } = await callGrok(env, transcript, templateType);
              llmJson = json;
              llmText = raw;
              aiResponse = response;
              actualModel = 'grok-beta';
            } catch (grokError) {
              // If both fail, throw the original GPT error
              throw gptError;
            }
          }
        } else {
          // Default: Grok 4
          const { json, raw, response } = await callGrok(env, transcript, templateType);
          llmJson = json;
          llmText = raw;
          aiResponse = response;
        }
        steps.ai.ok = true;

        // 4) Preview Confluence
        const previewHtml = buildConfluenceTableHTML(llmJson, templateType);

        return json({
          ok: true,
          steps,
          transcriptUrl,
          llmJson,
          llmText,
          aiResponse,
          aiModel: actualModel,
          fallbackUsed,
          fallbackReason: fallbackUsed ? '' : undefined,
          previewHtml
        });
      } catch (err) {
        const e = toStepError(err);
        if (e.step && steps[e.step]) steps[e.step].ok = false, steps[e.step].error = e.message;
        return json({ ok: false, step: e.step || 'unknown', error: e.message, steps }, 500);
      }
    }
// Tạo page Confluence sử dụng API V2
if (req.method === 'POST' && url.pathname === '/create-confluence') {
  const { llmJson, transcriptUrl, title, spaceKey, parentId, storageHtml: incomingHtml, titleStrategy, attendeeIds, template } = await safeJson(req);

  try {
    // Kiểm tra các tham số bắt buộc
    if (!spaceKey) {
      throw new StepError('confluence', 'Missing spaceKey');
    }

    // Lấy thông tin xác thực Atlassian
    const email = atlassianEmail(env);
    const apiToken = env.ATLASSIAN_API_TOKEN;
    if (!email || !apiToken) {
      throw new StepError('confluence', 'Missing Atlassian credentials (ATLASSIAN_EMAIL, ATLASSIAN_API_TOKEN)');
    }

    // Tạo tiêu đề trang theo template
    let pageTitle = title;
    if (titleStrategy === 'autonumber' || !title) {
      const now = new Date();
      const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
      
      if (template === 'progress') {
        pageTitle = `BÁO CÁO TIẾN ĐỘ DỰ ÁN TRỌNG ĐIỂM - ${dateStr}`;
      } else if (template === 'risk') {
        pageTitle = `BÁO CÁO QUẢN LÝ RỦI RO - ${dateStr}`;
      } else {
        // Meeting notes template (default)
        const meetingType = llmJson?.assessment === 'Chậm tiến độ' ? 'BÁO CÁO TIẾN ĐỘ DỰ ÁN (CHẬM TIẾN ĐỘ)' : 'BÁO CÁO TIẾN ĐỘ DỰ ÁN';
        pageTitle = `${meetingType} - ${dateStr}`;
      }
    }

    // Xác định template type để sử dụng
    const templateType = template || 'mom';

    // Ưu tiên sử dụng HTML từ client (đã bao gồm dữ liệu PIC người dùng nhập)
    let storageHtml;
    if (incomingHtml) {
      // Sử dụng HTML từ client (đã có dữ liệu PIC)
      storageHtml = incomingHtml;
    } else if (llmJson && (llmJson.discussion_topics || llmJson.action_items || llmJson.progress_items || llmJson.risk_items)) {
      // Chỉ sử dụng llmJson nếu không có HTML từ client
      // Sử dụng hàm buildConfluenceTableHTML với template type
      storageHtml = buildConfluenceTableHTML(llmJson, templateType).trim();
    } else {
      // Tạo bảng trống nếu không có dữ liệu
      storageHtml = buildConfluenceTableHTML({}, templateType).trim();
    }

    // Tạo nội dung trang: giữ nguyên storage format cho tables, chỉ cải thiện mentions
const pageContent = storageHtml;

// Tạo mentions với ADF format, nhưng combine với storage content
const _attendees = Array.isArray(attendeeIds) ? attendeeIds.filter(x => x && typeof x === 'string') : [];

// Nếu có attendees, tạo ADF document với mentions + storage content
if (_attendees.length > 0) {
  // Tạo paragraph mentions bằng ADF
  const mentionContent = [];
  
  mentionContent.push({
    type: "text",
    text: "Thành phần tham dự: "
  });

  _attendees.forEach((accountId, index) => {
    const cleanAccountId = (String(accountId).match(/[A-Za-z0-9:\-]+/g) || []).join('');
    if (cleanAccountId && cleanAccountId.length >= 8) {
      mentionContent.push({
        type: "mention",
        attrs: {
          id: cleanAccountId,
          text: `@${cleanAccountId}`
        }
      });

      if (index < _attendees.length - 1) {
        mentionContent.push({
          type: "text",
          text: ", "
        });
      }
    }
  });

  // Fallback approach: Sử dụng storage format kết hợp mentions được cải thiện
  const mentionsHTML = '<p><strong>Thành phần tham dự:</strong> ' + _attendees.map(function(a){
    const cleanAccountId = (String(a).match(/[A-Za-z0-9:\-]+/g)||[]).join('');
    // Sử dụng user mention format tối ưu cho V2 editor
    return '<ac:link><ri:user ri:account-id="' + cleanAccountId + '"/></ac:link>';
  }).join(', ') + '</p><p></p>';
  
  var finalContent = mentionsHTML + pageContent;
  var useADF = false; // Sử dụng storage format để giữ tables
} else {
  // Không có attendees, sử dụng storage format thông thường
  var finalContent = pageContent;
  var useADF = false;
}

// Chuẩn bị payload để tạo trang Confluence
    // === Build payload for Confluence v2 ===
    // Resolve spaceId from spaceKey
    const v2Headers = {
      'Content-Type': 'application/json; charset=utf-8',
      'Accept': 'application/json',
      'Authorization': 'Basic ' + btoa(`${email}:${apiToken}`)
    };
    
    let spaceId = null;
    try {
      const spaceRes = await fetch(confluenceApiV2Url(env, `/spaces?keys=${encodeURIComponent(spaceKey)}`), {
        method: 'GET',
        headers: v2Headers
      });
      
      if (!spaceRes.ok) {
        throw new StepError('confluence', `Failed to fetch space info: ${spaceRes.status} - ${await spaceRes.text()}`);
      }
      
      const spaceData = await spaceRes.json();
      if (spaceData.results && spaceData.results.length > 0) {
        spaceId = spaceData.results[0].id;
      } else {
        throw new StepError('confluence', `Space '${spaceKey}' not found or no access permission`);
      }
    } catch (e) {
      if (e instanceof StepError) throw e;
      throw new StepError('confluence', `Error fetching space info: ${e.message}`);
    }
    
    if (!spaceId) {
      throw new StepError('confluence', `Không tìm thấy spaceId cho spaceKey '${spaceKey}' (v2).`);
    }

    // Compose body - sử dụng ADF chỉ khi có mentions, ngược lại dùng storage
    const createPayloadV2 = {
      spaceId,
      status: 'current',
      title: pageTitle,
      parentId: parentId || undefined,
      body: { 
        representation: useADF ? 'atlas_doc_format' : 'storage', 
        value: finalContent 
      }
    };

    // Check if page already exists in v2 by title within space
    let existingPage = null;
    let finalPageTitle = pageTitle;
    
    try {
      // Tìm kiếm page với title gốc
      const searchV2Url = confluenceApiV2Url(env, `/pages?space-id=${encodeURIComponent(spaceId)}&title=${encodeURIComponent(pageTitle)}`);
      const searchRes = await fetch(searchV2Url, { method: 'GET', headers: v2Headers });
      
      if (!searchRes.ok) {
        console.warn(`Failed to search for existing page: ${searchRes.status} - ${await searchRes.text()}`);
      } else {
        const searchData = await searchRes.json();
        if (searchData.results && searchData.results.length > 0) {
          // Page đã tồn tại - Tìm số thứ tự tiếp theo
          let counter = 1;
          let foundAvailable = false;
          
          while (!foundAvailable && counter < 1000) {
            const numberedTitle = `${pageTitle} - ${String(counter).padStart(3, '0')}`;
            const checkUrl = confluenceApiV2Url(env, `/pages?space-id=${encodeURIComponent(spaceId)}&title=${encodeURIComponent(numberedTitle)}`);
            const checkRes = await fetch(checkUrl, { method: 'GET', headers: v2Headers });
            
            if (checkRes.ok) {
              const checkData = await checkRes.json();
              if (!checkData.results || checkData.results.length === 0) {
                // Tìm thấy title trống
                finalPageTitle = numberedTitle;
                foundAvailable = true;
              } else {
                counter++;
              }
            } else {
              // Lỗi khi check, dùng counter hiện tại
              finalPageTitle = numberedTitle;
              foundAvailable = true;
            }
          }
          
          if (!foundAvailable) {
            // Fallback: thêm timestamp
            const timestamp = Date.now();
            finalPageTitle = `${pageTitle} - ${timestamp}`;
          }
        }
      }
    } catch (e) {
      console.warn(`Error searching for existing page: ${e.message}`);
    }

    let pageUrl = '';
    
    // Luôn tạo page mới với finalPageTitle (đã có số thứ tự nếu trùng)
    // Cập nhật payload với title cuối cùng
    createPayloadV2.title = finalPageTitle;
    
    const createUrl = confluenceApiV2Url(env, '/pages');
    
    // Debug logging
    console.log('Using format:', useADF ? 'ADF' : 'Storage');
    console.log('Final page title:', finalPageTitle);
    console.log('Content length:', finalContent?.length || 0);
    if (useADF) {
      console.log('ADF content preview:', finalContent.substring(0, 500));
    }
    console.log('Full payload:', JSON.stringify(createPayloadV2, null, 2));
    
    const createRes = await fetch(createUrl, {
      method: 'POST',
      headers: v2Headers,
      body: JSON.stringify(createPayloadV2)
    });
    
    if (!createRes.ok) {
      const errorText = await createRes.text();
      console.error('Create page error response:', errorText);
      throw new StepError('confluence', `Create page (v2) failed: ${createRes.status} - ${errorText}`);
    }
    
    const createData = await createRes.json();
    pageUrl = `${envConfluenceBase(env)}/spaces/${spaceKey}/pages/${createData.id}`;
    
    // Đảm bảo page sử dụng V2 editor
    await setPageEditorProperty(env, createData.id, email, apiToken);
    
    return json({
      ok: true,
      pageUrl,
      title: finalPageTitle,
      spaceKey,
      spaceId
    });
  } catch (err) {
    const e = toStepError(err);
    console.error('Confluence page creation error:', e);
    return json({
      ok: false,
      step: e.step || 'confluence',
      error: e.message
    }, 500);
  }
}
    // Tạo ticket Jira
    if (req.method === 'POST' && url.pathname === '/create-jira-ticket') {
      const { tickets } = await safeJson(req);
      try {
        if (!tickets || !Array.isArray(tickets) || tickets.length === 0) {
          throw new StepError('jira', 'Invalid tickets data');
        }

        if (!atlassianEmail(env) || !env.ATLASSIAN_API_TOKEN) {
          throw new StepError('jira', 'Missing Atlassian credentials (ATLASSIAN_EMAIL, ATLASSIAN_API_TOKEN)');
        }

        const BASE_JIRA = envJiraBase(env);
        const API_URL = `${BASE_JIRA}/rest/api/3/issue`;

        const results = [];
        for (const ticket of tickets) { const { summary, description, issueType, priority, dueDate } = ticket;

          if (!summary) {
            results.push({ ok: false, error: 'Missing summary' });
            continue;
          }

          const payload = {
            fields: {
              project: { key: 'TRADE' },
              summary: summary,
              description: {
                type: 'doc',
                version: 1,
                content: [
                  {
                    type: 'paragraph',
                    content: [
                      {
                        type: 'text',
                        text: description || ''
                      }
                    ]
                  }
                ]
              },
              issuetype: { name: issueType || 'Task' },
              priority: { name: priority || 'Medium' },
                          ...(dueDate ? { duedate: dueDate } : {})} } ;

          const r = await fetch(API_URL, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json; charset=utf-8',
              'Accept': 'application/json',
              'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
            },
            body: JSON.stringify(payload)
          });

          const text = await r.text();
          if (!r.ok) {
            results.push({ ok: false, error: `Jira ${r.status}: ${text}` });
            continue;
          }

          const data = JSON.parse(text);
          results.push({
            ok: true,
            key: data.key,
            id: data.id,
            self: data.self,
            url: `${BASE_JIRA}/browse/${data.key}`
          });
        }

        const allSuccess = results.every(r => r.ok);
        return json({
          ok: allSuccess,
          results
        });
      } catch (err) {
        const e = toStepError(err);
        return json({ ok: false, step: e.step || 'jira', error: e.message }, 500);
      }
    }

// === JIRA API ENDPOINTS ===

// Get Jira Projects
if (req.method === 'GET' && url.pathname === '/api/jira-projects') {
  try {
    const email = atlassianEmail(env);
    const apiToken = env.ATLASSIAN_API_TOKEN;
    
    if (!email || !apiToken) {
      return json({ ok: false, error: 'Missing Atlassian credentials' }, 401);
    }
    
    const BASE_JIRA = envJiraBase(env);
    const API_URL = `${BASE_JIRA}/rest/api/3/project/search`;
    
    const response = await fetch(API_URL, {
      method: 'GET',
      headers: {
        'Authorization': 'Basic ' + btoa(`${email}:${apiToken}`),
        'Accept': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`Jira API error: ${response.status} - ${await response.text()}`);
    }
    
    const data = await response.json();
    const projects = data.values.map(project => ({
      key: project.key,
      name: project.name,
      id: project.id
    }));
    
    return json({ ok: true, projects });
    
  } catch (err) {
    console.error('Jira projects error:', err);
    return json({ ok: false, error: err.message }, 500);
  }
}

// Get Confluence Spaces - Enhanced with better error handling
if (req.method === 'GET' && url.pathname === '/api/confluence-spaces') {
  try {
    const email = atlassianEmail(env);
    const apiToken = env.ATLASSIAN_API_TOKEN;
    
    if (!email || !apiToken) {
      console.error('Missing Atlassian credentials');
      return json({ ok: false, error: 'Missing Atlassian credentials' }, 401);
    }
    
    const confluenceBase = envConfluenceBase(env);
    // Use the correct API endpoint with proper parameters
    const API_URL = `${confluenceBase}/api/v2/spaces?limit=100&sort=name`;
    
    console.log('Fetching Confluence spaces from:', API_URL);
    
    const response = await fetch(API_URL, {
      method: 'GET',
      headers: {
        'Authorization': 'Basic ' + btoa(`${email}:${apiToken}`),
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Confluence API error:', response.status, errorText);
      throw new Error(`Confluence API error: ${response.status} - ${errorText}`);
    }
    
    const data = await response.json();
    console.log('Confluence API response status:', response.status);
    console.log('Number of spaces returned:', data.results ? data.results.length : 0);
    
    // Transform data with enhanced filtering and sorting
    const spaces = (data.results || [])
      .filter(space => {
        // Filter out archived or deleted spaces
        return space.status === 'current' && space.type !== 'personal';
      })
      .map(space => {
        console.log('Processing space:', space.key, space.name, space.type, space.status, 'alias:', space.currentActiveAlias);
        return {
          key: space.key,
          name: space.name,
          id: space.id,
          type: space.type,
          status: space.status,
          currentActiveAlias: space.currentActiveAlias || space.key // Fallback to key if no alias
        };
      })
      .sort((a, b) => {
        // Sort by name for better UX
        return a.name.localeCompare(b.name);
      });
    
    console.log('Final filtered and sorted spaces:', spaces.length, 'spaces');
    
    return json({ 
      ok: true, 
      spaces,
      total: spaces.length,
      message: spaces.length > 0 ? 'Spaces loaded successfully' : 'No active spaces found'
    });
    
  } catch (err) {
    console.error('Confluence spaces error:', err.message);
    // Return a more detailed error response
    return json({ 
      ok: false, 
      error: err.message,
      spaces: [], // Always provide empty array for fallback
      fallback: true 
    }, 500);
  }
}

// Get Jira Issues
if (req.method === 'POST' && url.pathname === '/api/jira-issues') {
  try {
    const { projectKey } = await safeJson(req);
    
    if (!projectKey) {
      return json({ ok: false, error: 'Missing projectKey' }, 400);
    }
    
    const email = atlassianEmail(env);
    const apiToken = env.ATLASSIAN_API_TOKEN;
    
    if (!email || !apiToken) {
      return json({ ok: false, error: 'Missing Atlassian credentials' }, 401);
    }
    
    const BASE_JIRA = envJiraBase(env);
    
    // Build JQL query - đơn giản hơn để test
    const jql = `project = ${projectKey}`;
    console.log('JQL Query:', jql);
    
    const API_URL = `${BASE_JIRA}/rest/api/3/search/jql`;
    console.log('API URL:', API_URL);
    
    const requestBody = {
      jql: jql,
      maxResults: 1000,
      fields: ['key', 'summary', 'status', 'issuetype', 'priority', 'created', 'updated', 'duedate', 'assignee']
    };
    console.log('Request body:', JSON.stringify(requestBody, null, 2));
    
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Authorization': 'Basic ' + btoa(`${email}:${apiToken}`),
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });
    
    console.log('Response status:', response.status);
    console.log('Response headers:', Object.fromEntries(response.headers.entries()));
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Jira API error response:', errorText);
      throw new Error(`Jira API error: ${response.status} - ${errorText}`);
    }
    
    const data = await response.json();
    console.log('Response data:', JSON.stringify(data, null, 2));
    const issues = data.issues || [];
    console.log('Issues count:', issues.length);
    
    // Process data for charts
    const processedData = processJiraDataForCharts(issues);
    
    return json({ ok: true, issues, ...processedData });
    
  } catch (err) {
    console.error('Jira issues error:', err);
    return json({ ok: false, error: err.message }, 500);
  }
}

// Helper function to process Jira data for charts
function processJiraDataForCharts(issues) {
  const now = new Date();
  const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
  
  // Phân loại theo issue type
  const storyIssues = issues.filter(issue => issue.fields.issuetype.name === 'Story');
  const taskIssues = issues.filter(issue => issue.fields.issuetype.name === 'Task');
  const bugIssues = issues.filter(issue => issue.fields.issuetype.name === 'Bug');
  const riskIssues = issues.filter(issue => issue.fields.issuetype.name === 'Risk');
  
  // Count overdue issues
  const overdueCount = issues.filter(issue => {
    const dueDate = issue.fields.duedate;
    if (!dueDate) return false;
    return new Date(dueDate) < now && issue.fields.status.name !== 'Done';
  }).length;
  
  // Count by priority/risk level
  const highRisk = issues.filter(issue => 
    issue.fields.priority && issue.fields.priority.name === 'Highest'
  ).length;
  
  const mediumRisk = issues.filter(issue => 
    issue.fields.priority && (issue.fields.priority.name === 'High' || issue.fields.priority.name === 'Medium')
  ).length;
  
  const lowRisk = issues.filter(issue => 
    issue.fields.priority && issue.fields.priority.name === 'Low'
  ).length;
  
  // Backlog growth (simplified)
  const recentIssues = issues.filter(issue => 
    new Date(issue.fields.created) > oneWeekAgo
  ).length;
  
  const backlogGrowth = recentIssues > 0 ? `+${recentIssues}` : '0%';
  
  // Tạo dữ liệu xu hướng rủi ro (6 tháng)
  const trendData = {
    high: [highRisk, Math.max(0, highRisk - 1), Math.max(0, highRisk - 2), Math.max(0, highRisk + 1), Math.max(0, highRisk + 2), highRisk],
    medium: [mediumRisk, Math.max(0, mediumRisk + 1), Math.max(0, mediumRisk - 1), Math.max(0, mediumRisk + 2), Math.max(0, mediumRisk - 1), mediumRisk],
    low: [lowRisk, Math.max(0, lowRisk + 2), Math.max(0, lowRisk + 1), Math.max(0, lowRisk - 1), Math.max(0, lowRisk + 1), lowRisk]
  };

  // Phân tích rủi ro chi tiết
  const riskAnalysis = [
    {
      level: 'Cao',
      count: highRisk,
      cause: highRisk > 0 ? 'Priority cao, deadline gấp' : 'Không có rủi ro cao',
      action: highRisk > 0 ? 'Ưu tiên xử lý, phân bổ thêm nguồn lực' : 'Duy trì hiện trạng'
    },
    {
      level: 'Trung bình',
      count: mediumRisk,
      cause: mediumRisk > 0 ? 'Scope thay đổi, phụ thuộc bên ngoài' : 'Không có rủi ro trung bình',
      action: mediumRisk > 0 ? 'Theo dõi sát, có kế hoạch dự phòng' : 'Duy trì hiện trạng'
    },
    {
      level: 'Thấp',
      count: lowRisk,
      cause: lowRisk > 0 ? 'Rủi ro nhỏ, có thể kiểm soát' : 'Không có rủi ro thấp',
      action: lowRisk > 0 ? 'Theo dõi định kỳ' : 'Duy trì hiện trạng'
    }
  ];

  // Cảnh báo và khuyến nghị
  const alerts = [];
  
  if (overdueCount > 5) {
    alerts.push({
      type: 'Ticket quá hạn',
      severity: 'Cao',
      description: `${overdueCount} ticket quá hạn có thể ảnh hưởng đến tiến độ`,
      recommendation: 'Ưu tiên xử lý ticket quá hạn, điều chỉnh timeline',
      owner: 'PM/Team Lead'
    });
  }
  
  if (highRisk > 3) {
    alerts.push({
      type: 'Rủi ro cao',
      severity: 'Cao',
      description: `${highRisk} ticket có priority cao cần xử lý`,
      recommendation: 'Phân bổ thêm nguồn lực, tăng cường theo dõi',
      owner: 'PM'
    });
  }
  
  if (recentIssues > 10) {
    alerts.push({
      type: 'Backlog tăng nhanh',
      severity: 'Trung bình',
      description: `Thêm ${recentIssues} ticket trong tuần qua`,
      recommendation: 'Review scope, freeze scope nếu cần',
      owner: 'PO'
    });
  }

  // Tính toán dữ liệu effort theo assignee
  const assigneeWorkload = {};
  issues.forEach(issue => {
    const assignee = issue.fields.assignee ? issue.fields.assignee.displayName : 'Unassigned';
    assigneeWorkload[assignee] = (assigneeWorkload[assignee] || 0) + 1;
  });
  
  // Sắp xếp theo số lượng ticket (descending) và lấy top 10
  const sortedAssignees = Object.entries(assigneeWorkload)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 10);
  
  const effortData = {
    labels: sortedAssignees.map(([name]) => name),
    data: sortedAssignees.map(([,count]) => count)
  };

  // Dữ liệu các issue type chính
  const epicIssues = issues.filter(issue => issue.fields.issuetype.name === 'Epic');
  const subtaskIssues = issues.filter(issue => issue.fields.issuetype.name === 'Sub-task' || issue.fields.issuetype.name === 'Subtask');
  
  // Tính toán dữ liệu overdue theo tuần (5 tuần gần nhất)
  const weeklyOverdue = [];
  for (let i = 4; i >= 0; i--) {
    const weekStart = new Date(now.getTime() - (i + 1) * 7 * 24 * 60 * 60 * 1000);
    const weekEnd = new Date(now.getTime() - i * 7 * 24 * 60 * 60 * 1000);
    
    const weekOverdueCount = issues.filter(issue => {
      const dueDate = issue.fields.duedate;
      if (!dueDate) return false;
      const due = new Date(dueDate);
      return due >= weekStart && due < weekEnd && due < now && issue.fields.status.name !== 'Done';
    }).length;
    
    weeklyOverdue.push(weekOverdueCount);
  }

  return {
    totalIssues: issues.length,
    overdueCount,
    sprintDelayCount: Math.floor(overdueCount * 0.7), // Estimate sprint delays
    highRisk,
    mediumRisk,
    lowRisk,
    backlogGrowth,
    // Dữ liệu cho 3 dashboard chính
    overdueData: weeklyOverdue,
    issueTypeData: [storyIssues.length, taskIssues.length, bugIssues.length, epicIssues.length, subtaskIssues.length],
    effortData: effortData,
    // Dữ liệu chi tiết
    storyCount: storyIssues.length,
    taskCount: taskIssues.length,
    bugCount: bugIssues.length,
    riskCount: riskIssues.length,
    epicCount: epicIssues.length,
    subtaskCount: subtaskIssues.length
  };
}

// === GROK AI ANALYSIS API ===
if (req.method === 'POST' && url.pathname === '/api/grok-analysis') {
  try {
    const { prompt, analysisType, projectKey, data } = await safeJson(req);
    
    if (!prompt || !analysisType) {
      return json({ ok: false, error: 'Missing required parameters' }, 400);
    }
    
    // Tạo structured prompt cho AI
    const structuredPrompt = `
Bạn là một chuyên gia phân tích rủi ro dự án. Hãy phân tích dữ liệu sau và đưa ra kết quả CHÍNH XÁC dưới dạng JSON array.

Loại phân tích: ${analysisType}
Dự án: ${projectKey}
Dữ liệu: ${JSON.stringify(data)}

Yêu cầu trả về CHÍNH XÁC dưới định dạng JSON array như sau (không kèm markdown hoặc text khác):
[
  {
    "risk": "Mô tả ngắn gọn về rủi ro được nhận diện",
    "action": "Hành động cụ thể để giải quyết",
    "priority": "Cao|Trung bình|Thấp"
  }
]

Hãy đưa ra tối đa 3-5 mục phân tích quan trọng nhất.
`;

    // Gọi Grok API
    const grokResponse = await askGrok(env, structuredPrompt);
    
    // Parse JSON response từ Grok
    let analysis;
    try {
      // Tìm JSON array trong response
      const jsonMatch = grokResponse.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        analysis = JSON.parse(jsonMatch[0]);
      } else {
        // Fallback: tạo analysis từ text response
        analysis = parseTextToAnalysis(grokResponse, analysisType);
      }
    } catch (parseError) {
      console.error('JSON parse error:', parseError);
      // Fallback: tạo analysis từ text response
      analysis = parseTextToAnalysis(grokResponse, analysisType);
    }
    
    return json({ ok: true, analysis, rawResponse: grokResponse });
    
  } catch (err) {
    console.error('Grok analysis error:', err);
    return json({ ok: false, error: err.message }, 500);
  }
}

// === COMPREHENSIVE RISK ANALYSIS API ===
if (req.method === 'POST' && url.pathname === '/api/comprehensive-risk-analysis') {
  try {
    const { projectKey, data } = await safeJson(req);
    
    if (!projectKey || !data) {
      return json({ ok: false, error: 'Missing required parameters' }, 400);
    }
    
    // Tạo prompt chi tiết cho AI phân tích toàn diện
    const comprehensivePrompt = `
Bạn là chuyên gia phân tích rủi ro dự án cao cấp. Hãy phân tích toàn diện dữ liệu dự án ${projectKey}:

Dữ liệu dự án:
- Tổng số tickets: ${data.totalIssues}
- Tickets quá hạn: ${data.overdueCount}
- Phân bố issue types: ${JSON.stringify(data.issueTypes)}
- Tải công việc theo assignee: ${JSON.stringify(data.assigneeWorkload)}
- Phân bố priority: ${JSON.stringify(data.priorityDistribution)}
- Phân bố status: ${JSON.stringify(data.statusDistribution)}
- Metrics thời gian: ${JSON.stringify(data.timeMetrics)}

Yêu cầu trả về CHÍNH XÁC dưới dạng JSON array với 3-5 rủi ro quan trọng nhất:
[
  {
    "score": "điểm số cụ thể từ 1-20 (không phải range)", 
    "level": "Low|Medium|High|Extreme",
    "status": "Chấp nhận được|Cần xem xét|Cần quản lý|Không chấp nhận",
    "description": "Mô tả rủi ro cụ thể",
    "action": "Hành động khuyến nghị cụ thể",
    "pic": "Tên cụ thể của assignee chịu trách nhiệm (từ danh sách: ${Object.keys(data.assigneeWorkload).join(', ')})"
  }
]

Chú ý: 
- Score là số cụ thể từ 1-20, tính theo mức độ nghiêm trọng
- PIC lấy từ danh sách assignee hoặc vai trò phù hợp (PM, Tech Lead, QA Lead, etc.)
`;

    // Gọi Grok API
    const grokResponse = await askGrok(env, comprehensivePrompt);
    
    // Parse JSON response
    let risks;
    try {
      const jsonMatch = grokResponse.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        risks = JSON.parse(jsonMatch[0]);
      } else {
        risks = generateDefaultRiskAnalysis(data);
      }
    } catch (parseError) {
      console.error('JSON parse error:', parseError);
      risks = generateDefaultRiskAnalysis(data);
    }
    
    return json({ ok: true, risks, rawResponse: grokResponse });
    
  } catch (err) {
    console.error('Comprehensive risk analysis error:', err);
    return json({ ok: false, error: err.message }, 500);
  }
}

// === AI-POWERED RISK FIELD ANALYSIS ===
async function analyzeRiskFieldsWithAI(env, riskData) {
  try {
    // Nếu không có riskData, dùng giá trị mặc định
    if (!riskData) {
      return {
        probability: 'Medium',
        estimatedImpact: 'Medium',
        riskSource: 'Technical',
        riskType: 'Progress'
      };
    }
    
    const prompt = `Phân tích dữ liệu rủi ro sau và xác định giá trị cho các trường:

Thông tin rủi ro:
- Score: ${riskData.score || 'N/A'}
- Level: ${riskData.level || 'N/A'}
- Status: ${riskData.status || 'N/A'}
- Description: ${riskData.description || 'N/A'}
- Action: ${riskData.action || 'N/A'}

Hãy phân tích và trả về JSON với format chính xác sau (KHÔNG có text khác):
{
  "probability": "Low|Medium|High",
  "estimatedImpact": "Low|Medium|High",
  "riskSource": "Customer|Human Resource|Project Environment|Project Management|Project Requirement|Technical|Stakeholder",
  "riskType": "Progress|Resource|Scope|Quality"
}

Logic phân tích:
- Probability: Dựa vào level (Low/Medium/High/Extreme) và score
- Estimated Impact: Dựa vào level, status và mức độ nghiêm trọng của description
- Risk Source: Phân tích description để xác định nguồn gốc (kỹ thuật, con người, môi trường, khách hàng...)
- Risk Type: Phân tích description để xác định loại (tiến độ, nguồn lực, phạm vi, chất lượng)

Chỉ trả về JSON, không giải thích.`;

    const grokResponse = await askGrok(env, prompt);
    
    // Parse JSON từ response
    const jsonMatch = grokResponse.match(/\{[\s\S]*?\}/);
    if (jsonMatch) {
      const aiAnalysis = JSON.parse(jsonMatch[0]);
      
      // Validate và normalize giá trị
      return {
        probability: ['Low', 'Medium', 'High'].includes(aiAnalysis.probability) ? 
          aiAnalysis.probability : 'Medium',
        estimatedImpact: ['Low', 'Medium', 'High'].includes(aiAnalysis.estimatedImpact) ? 
          aiAnalysis.estimatedImpact : 'Medium',
        riskSource: ['Customer', 'Human Resource', 'Project Environment', 'Project Management', 
          'Project Requirement', 'Technical', 'Stakeholder'].includes(aiAnalysis.riskSource) ? 
          aiAnalysis.riskSource : 'Technical',
        riskType: ['Progress', 'Resource', 'Scope', 'Quality'].includes(aiAnalysis.riskType) ? 
          aiAnalysis.riskType : 'Progress'
      };
    }
    
    // Fallback: Phân tích đơn giản dựa vào level
    const level = riskData.level || 'Medium';
    let probability = 'Medium';
    let estimatedImpact = 'Medium';
    
    if (level === 'Extreme') {
      probability = 'High';
      estimatedImpact = 'High';
    } else if (level === 'High') {
      probability = 'High';
      estimatedImpact = 'Medium';
    } else if (level === 'Low') {
      probability = 'Low';
      estimatedImpact = 'Low';
    }
    
    // Phân tích Risk Source từ description
    const desc = (riskData.description || '').toLowerCase();
    let riskSource = 'Technical';
    if (desc.includes('khách hàng') || desc.includes('customer')) riskSource = 'Customer';
    else if (desc.includes('nhân sự') || desc.includes('resource') || desc.includes('team')) riskSource = 'Human Resource';
    else if (desc.includes('môi trường') || desc.includes('environment')) riskSource = 'Project Environment';
    else if (desc.includes('quản lý') || desc.includes('management')) riskSource = 'Project Management';
    else if (desc.includes('yêu cầu') || desc.includes('requirement')) riskSource = 'Project Requirement';
    else if (desc.includes('stakeholder') || desc.includes('cổ đông')) riskSource = 'Stakeholder';
    
    // Phân tích Risk Type từ description
    let riskType = 'Progress';
    if (desc.includes('tiến độ') || desc.includes('timeline') || desc.includes('overdue') || desc.includes('quá hạn')) riskType = 'Progress';
    else if (desc.includes('nguồn lực') || desc.includes('resource') || desc.includes('workload')) riskType = 'Resource';
    else if (desc.includes('phạm vi') || desc.includes('scope')) riskType = 'Scope';
    else if (desc.includes('chất lượng') || desc.includes('quality') || desc.includes('bug')) riskType = 'Quality';
    
    return { probability, estimatedImpact, riskSource, riskType };
    
  } catch (error) {
    console.error('AI risk analysis error:', error);
    // Fallback to default values
    return {
      probability: 'Medium',
      estimatedImpact: 'Medium',
      riskSource: 'Technical',
      riskType: 'Progress'
    };
  }
}

// === AI RISK FIELDS ANALYSIS API (for preview) ===
if (req.method === 'POST' && url.pathname === '/api/analyze-risk-fields') {
  try {
    const { riskData } = await safeJson(req);
    const aiFields = await analyzeRiskFieldsWithAI(env, riskData);
    return json({ ok: true, fields: aiFields });
  } catch (err) {
    console.error('AI risk fields analysis error:', err);
    return json({ ok: false, error: err.message }, 500);
  }
}

// === JIRA TICKET CREATION API ===
if (req.method === 'POST' && url.pathname === '/api/create-jira-ticket') {
  try {
    const { projectKey, summary, description, issueType, riskData } = await safeJson(req);
    
    if (!projectKey || !summary || !description) {
      return json({ ok: false, error: 'Missing required parameters' }, 400);
    }
    
    const email = atlassianEmail(env);
    const apiToken = env.ATLASSIAN_API_TOKEN;
    
    if (!email || !apiToken) {
      return json({ ok: false, error: 'Missing Atlassian credentials' }, 401);
    }
    
    const BASE_JIRA = envJiraBase(env);
    
    // Sử dụng AI để phân tích và xác định custom fields
    const aiFields = await analyzeRiskFieldsWithAI(env, riskData);
    
    // Tính due date = ngày hiện tại + 7 ngày
    const dueDate = new Date();
    dueDate.setDate(dueDate.getDate() + 7);
    const dueDateStr = dueDate.toISOString().split('T')[0]; // Format: YYYY-MM-DD
    
    // Lấy thông tin project để tìm project lead
    const projectResponse = await fetch(`${BASE_JIRA}/rest/api/3/project/${projectKey}`, {
      method: 'GET',
      headers: {
        'Authorization': 'Basic ' + btoa(`${email}:${apiToken}`),
        'Accept': 'application/json'
      }
    });
    
    let assigneeAccountId = null;
    if (projectResponse.ok) {
      const projectData = await projectResponse.json();
      assigneeAccountId = projectData.lead?.accountId;
    }
    
    // Tạo ticket với đầy đủ custom fields
    const createTicketPayload = {
      fields: {
        project: { key: projectKey },
        summary: summary,
        description: {
          type: 'doc',
          version: 1,
          content: [
            {
              type: 'paragraph',
              content: [
                {
                  type: 'text',
                  text: description
                }
              ]
            }
          ]
        },
        issuetype: { name: issueType || 'Task' },
        priority: { name: 'Major' },  // Theo yêu cầu: Priority = Major
        duedate: dueDateStr,  // Due date = ngày tạo + 7 ngày
        // Custom fields
        customfield_10038: { value: aiFields.probability },  // Probability
        customfield_10039: { value: aiFields.estimatedImpact },  // Estimated Impact
        customfield_10040: {  // Trigger - Atlassian Document Format
          type: 'doc',
          version: 1,
          content: [
            {
              type: 'paragraph',
              content: [
                {
                  type: 'text',
                  text: 'AI'
                }
              ]
            }
          ]
        },
        customfield_10036: { value: aiFields.riskSource },  // Risk Source
        customfield_10037: { value: aiFields.riskType }  // Risk Type
      }
    };
    
    // Thêm assignee nếu có
    if (assigneeAccountId) {
      createTicketPayload.fields.assignee = { accountId: assigneeAccountId };
    }
    
    const createResponse = await fetch(`${BASE_JIRA}/rest/api/3/issue`, {
      method: 'POST',
      headers: {
        'Authorization': 'Basic ' + btoa(`${email}:${apiToken}`),
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(createTicketPayload)
    });
    
    if (!createResponse.ok) {
      const errorText = await createResponse.text();
      throw new Error(`Jira create ticket error: ${createResponse.status} - ${errorText}`);
    }
    
    const ticketData = await createResponse.json();
    const ticketKey = ticketData.key;
    const ticketUrl = `${BASE_JIRA}/browse/${ticketKey}`;
    
    return json({ 
      ok: true, 
      ticketKey, 
      ticketUrl,
      message: `Ticket ${ticketKey} đã được tạo thành công`,
      aiFields: aiFields  // Trả về để debug
    });
    
  } catch (err) {
    console.error('Create Jira ticket error:', err);
    return json({ ok: false, error: err.message }, 500);
  }
}

// Helper function tạo default risk analysis
function generateDefaultRiskAnalysis(data) {
  const risks = [];
  
  // Tìm người có nhiều ticket nhất để làm PIC chính
  const assigneeEntries = Object.entries(data.assigneeWorkload);
  const mainPIC = assigneeEntries.length > 0 ? 
    assigneeEntries.reduce((a, b) => a[1] > b[1] ? a : b)[0] : 'Unassigned';
  
  // Lấy danh sách assignee cụ thể
  const assigneeList = assigneeEntries.map(([name]) => name);
  
  // Phân tích overdue
  if (data.overdueCount > 0) {
    const overdueRatio = data.overdueCount / data.totalIssues;
    let score, level, status;
    
    if (overdueRatio > 0.3) {
      score = Math.min(20, Math.round(overdueRatio * 50 + 10)); // 10-20
      level = 'Extreme'; status = 'Không chấp nhận';
    } else if (overdueRatio > 0.2) {
      score = Math.min(16, Math.round(overdueRatio * 40 + 8)); // 8-16  
      level = 'High'; status = 'Cần quản lý';
    } else if (overdueRatio > 0.1) {
      score = Math.min(9, Math.round(overdueRatio * 30 + 5)); // 5-9
      level = 'Medium'; status = 'Cần xem xét';
    } else {
      score = Math.max(1, Math.round(overdueRatio * 20 + 1)); // 1-4
      level = 'Low'; status = 'Chấp nhận được';
    }
    
    // Tìm assignee có nhiều overdue nhất hoặc main PIC
    const overduePIC = assigneeList.find(name => 
      name.toLowerCase().includes('lead') || 
      name.toLowerCase().includes('manager')
    ) || mainPIC;
    
    risks.push({
      score: score.toString(),
      level: level,
      status: status,
      description: `${data.overdueCount} tickets quá hạn (${Math.round(overdueRatio * 100)}% tổng số) ảnh hưởng tiến độ`,
      action: 'Khẩn trương xem lại timeline, tăng cường theo dõi và hỗ trợ team',
      pic: overduePIC !== 'Unassigned' ? overduePIC : 'Project Manager'
    });
  }
  
  // Phân tích workload
  const workloadValues = Object.values(data.assigneeWorkload);
  const maxWorkload = Math.max(...workloadValues);
  const avgWorkload = workloadValues.reduce((a, b) => a + b, 0) / workloadValues.length;
  
  if (maxWorkload > avgWorkload * 2) {
    risks.push({
      score: '5-9',
      level: 'Medium', 
      status: 'Cần quản lý',
      description: `Phân bố công việc không đều, có người gánh ${maxWorkload} tickets (TB: ${Math.round(avgWorkload)})`,
      action: 'Cân bằng lại workload, hỗ trợ nhân sự quá tải'
    });
  }
  
  // Phân tích bug ratio
  const bugCount = data.issueTypes['Bug'] || 0;
  const bugRatio = bugCount / data.totalIssues;
  
  if (bugRatio > 0.2) {
    let score, level, status;
    if (bugRatio > 0.4) {
      score = Math.min(18, Math.round(bugRatio * 30 + 6));
      level = 'Extreme'; status = 'Không chấp nhận';
    } else if (bugRatio > 0.3) {
      score = Math.min(14, Math.round(bugRatio * 25 + 5));
      level = 'High'; status = 'Cần quản lý';
    } else {
      score = Math.min(9, Math.round(bugRatio * 20 + 3));
      level = 'Medium'; status = 'Cần xem xét';
    }
    
    risks.push({
      score: score.toString(),
      level: level,
      status: status,
      description: `Tỉ lệ bug cao (${Math.round(bugRatio * 100)}%) cho thấy vấn đề về chất lượng`,
      action: 'Tăng cường code review, testing và quy trình kiểm thử',
      pic: assigneeList.find(name => name.toLowerCase().includes('lead')) || assigneeList[0] || 'Tech Lead'
    });
  }
  
  return risks.length > 0 ? risks : [{
    score: '2',
    level: 'Low',
    status: 'Chấp nhận được',
    description: 'Dự án đang hoạt động bình thường',
    action: 'Tiếp tục theo dõi và duy trì quy trình hiện tại',
    pic: mainPIC !== 'Unassigned' ? mainPIC : 'Project Lead'
  }];
}

// Helper function để parse text response thành analysis format
function parseTextToAnalysis(textResponse, analysisType) {
  const defaultAnalysis = {
    'Overdue': [
      {
        risk: 'Tickets quá hạn ảnh hưởng đến timeline dự án',
        action: 'Ưu tiên xử lý tickets quá hạn, re-plan timeline',
        priority: 'Cao'
      },
      {
        risk: 'Có thể có bottleneck trong quy trình làm việc',
        action: 'Review quy trình, tăng cường communication',
        priority: 'Trung bình'
      }
    ],
    'IssueType': [
      {
        risk: 'Phân bổ issue type không cân bằng',
        action: 'Review và điều chỉnh scope, ưu tiên tasks',
        priority: 'Trung bình'
      },
      {
        risk: 'Có thể thiếu planning hoặc quá nhiều bug',
        action: 'Tăng cường code review và testing',
        priority: 'Cao'
      }
    ],
    'Effort': [
      {
        risk: 'Phân bổ công việc không đều, có người quá tải',
        action: 'Re-assign tickets, balancing workload',
        priority: 'Cao'
      },
      {
        risk: 'Risk về burnout và quality giảm',
        action: 'Monitor team capacity, thêm resources nếu cần',
        priority: 'Trung bình'
      }
    ]
  };
  
  return defaultAnalysis[analysisType] || [
    {
      risk: 'Cần phân tích thêm dữ liệu',
      action: 'Thu thập thêm thông tin và monitoring',
      priority: 'Trung bình'
    }
  ];
}

// === AI STRUCTURED INSIGHT API ENDPOINTS ===

// Get Confluence Page Content API
if (req.method === 'POST' && url.pathname === '/api/confluence-page-content') {
  try {
    const { pageId } = await safeJson(req);
    
    if (!pageId) {
      return json({ ok: false, error: 'Missing pageId' }, 400);
    }
    
    const email = atlassianEmail(env);
    const apiToken = env.ATLASSIAN_API_TOKEN;
    
    if (!email || !apiToken) {
      return json({ ok: false, error: 'Missing Atlassian credentials' }, 401);
    }
    
    const confluenceBase = envConfluenceBase(env);
    const API_URL = `${confluenceBase}/api/v2/pages/${pageId}?expand=body.atlas_doc_format&body-format=atlas_doc_format`;
    
    console.log('Fetching Confluence page content from:', API_URL);
    
    const response = await fetch(API_URL, {
      method: 'GET',
      headers: {
        'Authorization': 'Basic ' + btoa(`${email}:${apiToken}`),
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('Confluence page API error:', response.status, errorText);
      throw new Error(`Failed to fetch page content: ${response.status} - ${errorText}`);
    }
    
    const pageData = await response.json();
    console.log('Page data received:', !!pageData.body);
    
    // Extract the ADF content value
    let contentValue = '';
    if (pageData.body && pageData.body.atlas_doc_format && pageData.body.atlas_doc_format.value) {
      contentValue = pageData.body.atlas_doc_format.value;
    } else if (pageData.body && pageData.body.storage && pageData.body.storage.value) {
      // Fallback to storage format if ADF not available
      contentValue = pageData.body.storage.value;
    }
    
    return json({ 
      ok: true, 
      content: {
        value: contentValue,
        title: pageData.title,
        id: pageData.id,
        type: pageData.type
      }
    });
    
  } catch (err) {
    console.error('Confluence page content error:', err);
    return json({ ok: false, error: err.message }, 500);
  }
}

// AI Structured Analysis API
if (req.method === 'POST' && url.pathname === '/api/structured-analysis') {
  try {
    const { content } = await safeJson(req);
    
    if (!content) {
      return json({ ok: false, error: 'Missing content to analyze' }, 400);
    }
    
    // Create structured prompt for Grok AI - Focus on Action Items only
    const structuredPrompt = `
Bạn là một chuyên gia phân tích Confluence pages với khả năng trích xuất Action Items/Tasks một cách CHI TIẾT và RÕ RÀNG.

NỘI DUNG CONFLUENCE CẦN PHÂN TÍCH:
${content}

NHIỆM VỤ: Tìm kiếm và trích xuất TẤT CẢ các Action Items/Tasks từ nội dung trên với độ chi tiết cao nhất.

QUY TRÌNH PHÂN TÍCH:

1️⃣ TÌM KIẾM ACTION ITEMS TỪ CÁC NGUỒN SAU:
   ✓ Bảng có tiêu đề: "Action Items", "Tasks", "To Do", "Hành động", "Công việc", "Nhiệm vụ"
   ✓ Danh sách có đánh dấu checkbox [ ], [x], ☐, ✓
   ✓ Các mục có động từ hành động: "Hoàn thành", "Thực hiện", "Chuẩn bị", "Kiểm tra", "Gửi", "Review", "Update", "Create", "Fix"
   ✓ Phần kết luận cuộc họp có ghi rõ công việc cần làm
   ✓ Các ghi chú có tag người dùng (@mention) kèm công việc
   ✓ Bullet points hoặc numbered lists mô tả nhiệm vụ cụ thể

2️⃣ BÓC TÁCH THÔNG TIN CHI TIẾT CHO MỖI ACTION ITEM:

   📋 CONTENT (Nội dung công việc):
      - Trích xuất MÔ TẢ ĐẦY ĐỦ và CỤ THỂ của nhiệm vụ
      - Bao gồm cả ngữ cảnh liên quan (ví dụ: "Review PR #123 cho feature login", không chỉ "Review PR")
      - Giữ nguyên các số liệu, tên file, tên module quan trọng
      - Nếu có nhiều bước con, ghi rõ từng bước
      - Độ dài: 10-200 từ tùy độ phức tạp

   📅 DEADLINE (Thời hạn):
      - Ưu tiên format: YYYY-MM-DD (ví dụ: 2025-11-15)
      - Chấp nhận: "31/10/2025", "Q4 2025", "End of month", "Next week"
      - Tìm từ các cột: "Due date", "Deadline", "Target", "Hạn", "Ngày"
      - Tìm trong mô tả: "trước ngày X", "vào ngày Y", "deadline Z"
      - Nếu không tìm thấy: để trống ""

   👤 ASSIGNEE (Người phụ trách):
      - QUAN TRỌNG: Tìm ACCOUNT_ID trong Confluence ADF format
      - Format hợp lệ: "712020:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
      - Tìm trong các thuộc tính JSON: "accountId", "id", "userAccountId", "attrs.id"
      - Nếu có @mention (user tag), BẮT BUỘC lấy accountId từ đó
      - CHỈ dùng TÊN nếu HOÀN TOÀN không tìm thấy accountId
      - Nếu không có người được giao: để trống ""

   📝 NOTES (Ghi chú bổ sung):
      - Priority/Mức độ ưu tiên: "High", "Medium", "Low", "P0", "P1", "Critical"
      - Status/Trạng thái: "In Progress", "Pending", "Blocked", "Completed"
      - Dependencies/Phụ thuộc: "Cần hoàn thành task X trước", "Đợi approval từ Y"
      - Kết quả mong đợi: "Expected outcome: ..."
      - Liên kết Jira: "ABC-123", "Link ticket: ..."
      - Ghi chú khác từ cột "Notes", "Remarks", "Comment"
      - Độ dài: 5-150 từ

3️⃣ TIÊU CHÍ LỌC VÀ ƯU TIÊN:
   ✅ BẮT BUỘC bao gồm:
      - Tasks có deadline rõ ràng
      - Tasks đã được gán người phụ trách
      - Tasks có động từ hành động cụ thể
      - Tasks có mức độ ưu tiên cao
   
   ⚠️ CÂN NHẮC bao gồm:
      - Tasks mô tả rõ ràng nhưng chưa có deadline
      - Tasks trong phần kết luận meeting
      - Follow-up actions từ discussions
   
   ❌ BỎ QUA:
      - Các câu hỏi mở (không phải hành động cụ thể)
      - Meeting notes thuần túy (không có action)
      - Background information/Context
      - Decisions đã được thực hiện trong quá khứ

4️⃣ GIỚI HẠN VÀ THỨ TỰ:
   - Trích xuất TỐI ĐA 20 action items quan trọng nhất
   - Sắp xếp theo thứ tự ưu tiên: 
     1. High priority có deadline gần
     2. Medium priority có assignee
     3. Các items còn lại theo thứ tự xuất hiện
   - Mỗi item PHẢI có content, các trường khác có thể trống

OUTPUT FORMAT - TRẢ VỀ CHÍNH XÁC JSON ARRAY:

[
  {
    "content": "Mô tả chi tiết và đầy đủ của action item (bắt buộc, 10-200 từ)",
    "deadline": "YYYY-MM-DD hoặc mô tả thời hạn (có thể trống)",
    "assignee": "712020:uuid hoặc tên người (có thể trống)", 
    "notes": "Priority, Status, Dependencies, Expected outcome, Jira links, v.v. (có thể trống)"
  }
]

VÍ DỤ OUTPUT CHUẨN:
[
  {
    "content": "Review và merge Pull Request #456 cho tính năng user authentication, đảm bảo pass tất cả unit tests và integration tests",
    "deadline": "2025-11-01",
    "assignee": "712020:a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "notes": "Priority: High | Status: In Progress | Blocked by: Security review | Link: ABC-789"
  },
  {
    "content": "Chuẩn bị slide thuyết trình cho Sprint Review meeting, bao gồm demo video và metrics dashboard",
    "deadline": "2025-10-31",
    "assignee": "Nguyễn Văn A",
    "notes": "Priority: Medium | Expected: 20-slide deck with live demo"
  }
]

LƯU Ý CUỐI CÙNG:
- CHỈ trả về JSON array, KHÔNG kèm markdown, explanation hay text khác
- Nếu không tìm thấy action items nào, trả về: []
- Đảm bảo JSON hợp lệ, có thể parse được
- Mỗi object PHẢI có field "content", các field khác optional

HÃY BẮT ĐẦU PHÂN TÍCH VÀ TRÍCH XUẤT!
`;

    // Call Grok AI
    const grokResponse = await askGrok(env, structuredPrompt);
    
    // Parse JSON response from Grok
    let analysis = [];
    try {
      // Try to find JSON array in response
      const jsonMatch = grokResponse.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        analysis = JSON.parse(jsonMatch[0]);
      } else {
        // Fallback: try to parse entire response as JSON
        analysis = JSON.parse(grokResponse);
      }
      
      // Validate the analysis format
      if (!Array.isArray(analysis)) {
        throw new Error('Response is not an array');
      }
      
      // Ensure each item has required fields
      analysis = analysis.map(item => ({
        content: String(item.content || ''),
        deadline: String(item.deadline || ''),
        assignee: String(item.assignee || ''),
        notes: String(item.notes || '')
      }));
      
    } catch (parseError) {
      console.error('JSON parse error:', parseError);
      console.log('Raw Grok response:', grokResponse);
      
      // Fallback: create default structure if parsing fails
      analysis = [{
        content: 'Không thể phân tích tự động nội dung này. Vui lòng kiểm tra lại định dạng page.',
        deadline: '',
        assignee: '',
        notes: 'Raw response: ' + grokResponse.substring(0, 200) + '...'
      }];
    }
    
    return json({ 
      ok: true, 
      analysis,
      rawResponse: grokResponse,
      totalItems: analysis.length
    });
    
  } catch (err) {
    console.error('Structured analysis error:', err);
    return json({ ok: false, error: err.message }, 500);
  }
}

// === ZALO: Webhook nhận sự kiện ===
if (req.method === 'POST' && url.pathname === '/zalo/webhook') {
  try {
    const got = req.headers.get('x-bot-api-secret-token')
            || req.headers.get('X-Bot-Api-Secret-Token')
            || new URL(req.url).searchParams.get('secret'); // tiện test
    const expected =
      env.ZALO_SECRET_TOKEN
      || env.ZALO_WEBHOOK_SECRET_TOKEN
      || env.ZALO_WEBHOOK_SECRET
      || env.ZALO_BOT_WEBHOOK_SECRET;
    if (!expected || got !== expected) {
      return json({ ok: false, error: 'Invalid webhook secret' }, 403);
    }

    const body = await safeJson(req);

    const eventName =
      body?.result?.event_name ||
      body?.event_name ||
      body?.event?.name ||
      body?.name || '';

    const chatId =
      body?.result?.message?.chat?.id ||
      body?.message?.chat?.id ||
      body?.data?.message?.chat?.id ||
      body?.message?.sender?.id ||
      body?.sender?.id ||
      null;

    const text =
      body?.result?.message?.text ||
      body?.message?.text ||
      body?.data?.message?.text ||
      '';

    const senderName =
      body?.result?.message?.sender?.name ||
      body?.message?.sender?.name ||
      body?.sender?.name || null;

    if (chatId) {
      // không block webhook: ghi nền tên mặc định trong payload (nếu có)
      ctx.waitUntil(saveContact(env, chatId, senderName).catch(e => console.error('saveContact', e)));
    }

    // LỆNH: /id
    if (text && /^\/?id$/i.test(String(text).trim())) {
      await zaloSendMessage(env, chatId, `Chat ID của bạn: ${chatId}`);
      return json({ ok: true, echoed: true });
    }

    // LỆNH: /who -> xem tên hiện tại
    if (text && /^\/?who$/i.test(String(text).trim())) {
      const current = await getNameByChatId(env, chatId);
      await zaloSendMessage(env, chatId, current ? `Tên đang lưu: ${current}` : 'Chưa đặt tên hiển thị. Hãy gõ: /name TênCủaBạn');
      return json({ ok: true, who: true, displayName: current || null });
    }
// Lệnh: /name <tên> -> đặt/đổi tên (và xác nhận rõ ràng)
const mName = text && text.match(/^\/?name\s+(.+)$/i);
if (mName && mName[1]) {
  const displayName = mName[1].trim().slice(0, 80);
  try {
    await ensureContactsTable(env);
    await saveContact(env, chatId, displayName);
    await zaloSendMessage(env, chatId,
      `✅ Đã tạo/cập nhật danh bạ thành công!
• Tên hiển thị: "${displayName}"
• chat_id: ${chatId}

Bạn có thể quay lại web và bấm "Tải danh bạ" để chọn người nhận.`);
    return json({ ok: true, named: true, displayName });
  } catch (err) {
    console.error('saveContact error', err);
    await zaloSendMessage(env, chatId,
      `⚠️ Lưu danh bạ thất bại. Vui lòng thử lại.
Chi tiết: ${String(err)}`);
    return json({ ok: false, error: String(err) }, 500);
  }
}




    const isTextEvent =
      /message\.text\.received|user\.send\.text|message\.received/i.test(eventName) || !!text;

    if (!chatId || !isTextEvent) {
      console.log('Zalo webhook ignored', { eventName, haveText: !!text });
      return json({ ok: true, ignored: true, event: eventName });
    }

    // Còn lại: hội thoại thường → xử lý nền
    ctx.waitUntil(handleZaloMessage(env, chatId, text));
    return json({ ok: true }); // ACK ngay
  } catch (e) {
    console.error('Zalo webhook error', e);
    return json({ ok: false, error: String(e) }, 500);
  }
}


// === ZALO: Đăng ký webhook (gọi bằng Postman) ===
if (req.method === 'POST' && url.pathname === '/zalo/set-webhook') {
  try {
    const { url: webhookUrl, secret } = await safeJson(req);
    if (!webhookUrl) return json({ ok: false, error: 'Missing url' }, 400);
    const res = await zaloSetWebhook(env, webhookUrl, secret || env.ZALO_SECRET_TOKEN);
    return json({ ok: true, res });
  } catch (e) {
    return json({ ok: false, error: String(e) }, 500);
  }
}


    // === ZALO: Gửi tin chủ động (tạo event gửi người dùng) ===
    if (req.method === 'POST' && url.pathname === '/zalo/push') {
      try {
        const { chat_id, text } = await safeJson(req);
        if (!chat_id || !text) return json({ ok: false, error: 'Missing chat_id or text' }, 400);
        const res = await zaloSendMessage(env, chat_id, text);
        return json({ ok: true, res });
      } catch (e) {
        return json({ ok: false, error: String(e) }, 500);
      }
    }
    if (req.method === 'GET' && url.pathname === '/health') return new Response('ok', { headers: corsHeaders() });
    // Danh sách liên hệ
if (req.method === 'GET' && url.pathname === '/zalo/contacts/list') {
  try { return json({ ok:true, contacts: await listContacts(env) }); }
  catch(e){ return json({ ok:false, error:String(e) }, 500); }
}

// Gửi theo tên hiển thị
if (req.method === 'POST' && url.pathname === '/zalo/push-by-name') {
  try {
    const { display_name, text } = await safeJson(req);
    if (!display_name) return json({ ok:false, error:'Missing display_name' }, 400);
    const chatId = await findChatIdByName(env, display_name);
    if (!chatId) return json({ ok:false, error:'Tên không tồn tại' }, 404);
    const res = await zaloSendMessage(env, chatId, String(text || '').slice(0,2000));
    return json({ ok:true, res });
  } catch(e){ return json({ ok:false, error:String(e) }, 500); }
}

    return new Response('Not found', { status: 404, headers: corsHeaders() });
  }
};



/* ===== AI Meeting Note Inline Patch (auto-added, worker-safe) =====
 * This block is no-op when running without a DOM (e.g., Cloudflare Worker).
 */
(function(global){
  const hasDOM = !!(global && global.document && global.document.getElementById);
  if (!hasDOM) { return; } // stop in Worker

  function $(id){ return global.document.getElementById(id); }
  async function defaultGetJiraByEmail(email){
    try{
      const res = await fetch(`/jira/account?email=${encodeURIComponent(email)}`);
      if(!res.ok) return null;
      const data = await res.json();
      if (data && (data.accountId || data.accountID)) {
        return { accountId: data.accountId || data.accountID };
      }
    }catch(e){}
    return null;
  }
  function parseEmails(raw){
    return (raw||'').split(/[;\n,\s]+/).map(s=>s.trim().toLowerCase()).filter(Boolean);
  }
  function patch(){
    const ocrEmails = $('ocrEmails');
    const ocrJiraIds = $('ocrJiraIds');
    const btnGetJiraIds = $('btnGetJiraIds');
    const btnProcessText = $('btnProcessText');
    if(!ocrEmails || !ocrJiraIds || !btnGetJiraIds) return;

    try{ ocrEmails.removeAttribute('readonly'); }catch(e){}
    try{ ocrJiraIds.setAttribute('readonly',''); }catch(e){}

    // Initialize btnProcessText to always be enabled
    if (btnProcessText) {
      try { btnProcessText.disabled = false; } catch(e) {}
    }

    function sync(){ 
      btnGetJiraIds.disabled = !(ocrEmails.value.trim());
      // Keep btnProcessText always enabled
      if (btnProcessText) {
        try { btnProcessText.disabled = false; } catch(e) {}
      }
    }
    sync();
    ocrEmails.addEventListener('input', sync);

    try{ btnGetJiraIds.onclick = null; }catch(e){}
    const getByEmail = (global.__getJiraByEmail || defaultGetJiraByEmail);

    btnGetJiraIds.addEventListener('click', async (ev)=>{
      ev.preventDefault(); ev.stopPropagation();
      const emails = parseEmails(ocrEmails.value);
      if(!emails.length){ ocrJiraIds.value=''; return; }
      btnGetJiraIds.disabled = true;
      try{
        const ids = [];
        for(const email of emails){
          try{
            const r = await getByEmail(email);
            if(r && r.accountId) ids.push(r.accountId);
          }catch(e){}
        }
        ocrJiraIds.value = ids.join(';');
      } finally { sync(); }
    });
  }

  const d = global.document;
  if (d && (d.readyState === 'complete' || d.readyState === 'interactive')) {
    setTimeout(patch, 0);
  } else if (d) {
    d.addEventListener('DOMContentLoaded', patch);
  }
})(typeof globalThis !== 'undefined' ? globalThis : (typeof window !== 'undefined' ? window : this));
/* ===== end inline patch ===== */
