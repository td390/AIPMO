// Cloudflare Worker — PMO AI Menu + Meeting Note + Auto Report + Chat Bot + Grok 3 Mini + Confluence + Jira + Zalo
// ENV bắt buộc:
// - R2_ACCOUNT_ID, R2_ACCESS_KEY_ID, R2_SECRET_ACCESS_KEY, R2_BUCKET, R2_PUBLIC_BASE_URL
// - DEEPGRAM_API_KEY, XAI_API_KEY, (optional) XAI_BASE_URL (vd: https://us-east-1.api.x.ai/v1)
// - ATLASSIAN_BASE (vd: https://kvmon-dev.atlassian.net/wiki hoặc https://kvmon-dev.atlassian.net)
// - ATLASSIAN_USER (email) hoặc ATLASSIAN_EMAIL, ATLASSIAN_API_TOKEN
// - ZALO_BOT_TOKEN, ZALO_WEBHOOK_SECRET_TOKEN

// ============================================================================
// 1) KERNEL HELPERS
// ============================================================================
function corsHeaders() {
  return {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET,POST,OPTIONS',
    'Access-Control-Allow-Headers': 'content-type, authorization, x-bot-api-secret-token, X-Bot-Api-Secret-Token'
  };
}
function json(obj, status = 200) {
  return new Response(JSON.stringify(obj), {
    status,
    headers: { 'content-type': 'application/json; charset=utf-8', ...corsHeaders() }
  });
}
async function safeJson(req) {
  try {
    const ct = (req.headers.get('content-type') || '').toLowerCase();
    if (ct.includes('application/json')) {
      return await req.json();
    }
    const text = await req.text(); // fallback
    return text ? JSON.parse(text) : {};
  } catch {
    return {};
  }
}
class StepError extends Error { constructor(step, message) { super(message); this.step = step; } }
function toStepError(err) { return (err instanceof StepError) ? err : new StepError('unknown', String(err?.message || err)); }

// ============================================================================
// 2) CHAT CORE (dùng chung cho web & Zalo)
// ============================================================================
function isJiraQuestion(text) {
  if (!text) return false;
  const s = String(text).toLowerCase();

  const keywords = [
    'jira','task','ticket','issue','trạng thái','status','ưu tiên','priority',
    'assignee','project','dự án','backlog','sprint','bug','story','epic',
    'to do','in progress','done','deadline','quá hạn','duedate','due date',
    'created','updated','assign','giao','tiến độ','bao nhiêu task','board'
  ];
  if (keywords.some(k => s.includes(k))) return true;

  // Pattern mã issue kiểu ABC-123
  return /[A-Z][A-Z0-9_]{1,9}-\d+/.test(text);
}

async function processChatMessage(env, message, opts = {}) {
  if (!message || !String(message).trim()) {
    return { success: false, error: 'Missing message' };
  }
  const projectKey = (opts && opts.projectKey) ? String(opts.projectKey).trim() : '';

  if (isJiraQuestion(message)) {
    try {
      const jql = await generateJQL(env, message, projectKey); // << truyền project
      const jiraResults = await executeJQL(env, jql);
      const response = generateResponse(message, jql, jiraResults);
      return { success: true, response, jql, results: jiraResults };
    } catch (error) {
      let errorMessage = 'Đã xảy ra lỗi khi xử lý câu hỏi Jira của bạn.';
      if (error.step === 'grok') errorMessage = 'Xin lỗi, tôi không thể hiểu câu hỏi Jira. Vui lòng thử diễn đạt lại.';
      else if (error.step === 'jira') errorMessage = 'Hiện không truy cập được Jira. Vui lòng thử lại sau.';
      return { success: false, error: errorMessage, details: error.message };
    }
  }

  try {
    const answer = await askGrok(env, message);
    return { success: true, response: answer, jql: '', results: [] };
  } catch (error) {
    return { success: false, error: 'Có lỗi khi trả lời hội thoại tự nhiên.', details: error.message };
  }
}


async function generateJQL(env, message, defaultProjectKey) {
  const base = (env.XAI_BASE_URL || 'https://api.x.ai/v1').replace(/\/$/, '');

  const prompt = [
    '# TẠO JQL TỪ CÂU HỎI TỰ NHIÊN',
    '',
    'Bạn là một chuyên gia về Jira Query Language (JQL). Hãy chuyển đổi câu hỏi tự nhiên của người dùng thành câu lệnh JQL chính xác.',
    '',
    '## QUY TẮC:',
    '- KẾT THÚC câu JQL bằng "ORDER BY created DESC".',
    '- KHÔNG sử dụng LIMIT.',
    '',
    '## VÍ DỤ:',
    'Câu hỏi: "Tôi muốn xem tất cả các task đang trong trạng thái In Progress"',
    'JQL: status = "In Progress" ORDER BY created DESC',
    '',
    '## CÂU HỎI CỦA NGƯỜI DÙNG:',
    message,
    '',
    '## KẾT QUẢ: (chỉ trả về JQL)'
  ].join('\n');

  const body = { model: 'grok-3-mini', input: prompt, temperature: 0.2 };

  const r = await fetch(`${base}/responses`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${env.XAI_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body)
  });
  if (!r.ok) throw new StepError('grok', `xAI ${r.status}: ${await r.text()}`);
  const data = await r.json();

  let jql = '';
  if (data.output_text) jql = data.output_text.trim();
  if (!jql && data.output?.[1]?.content?.[0]?.text) jql = data.output[1].content[0].text.trim();
  if (!jql) throw new StepError('grok', 'Không thể tạo JQL từ câu hỏi');

  jql = jql.replace(/\bLIMIT\s+\d+/ig, '').replace(/\s{2,}/g, ' ').trim();

  if (!/order\s+by/i.test(jql)) jql = `${jql.trim()} ORDER BY created DESC`;
  else {
    const core = jql.replace(/\border\s+by\b[\s\S]*$/i, '').trim();
    jql = `${core} ORDER BY created DESC`;
  }

  const hasProjectFilter = /\bproject\s*(=|in)\b/i.test(jql);
  const hasIssueKey = /[A-Z][A-Z0-9_]{1,9}-\d+/.test(String(message));
  const fallbackKey = (defaultProjectKey || 'TRADE').toUpperCase().replace(/[^A-Z0-9_]/g, '');
  if (!hasProjectFilter && !hasIssueKey) {
    const core = jql.replace(/\border\s+by\b[\s\S]*$/i, '').trim();
    jql = `(project = "${fallbackKey}") AND (${core}) ORDER BY created DESC`;
  }
  return jql;
}



async function executeJQL(env, jql) {
  const BASE_JIRA = envJiraBase(env);
  const API_URL = `${BASE_JIRA}/rest/api/3/search`;

  try {
    const m = jql.match(/\bLIMIT\s+(\d+)/i);
    const maxResults = m ? Math.max(1, Math.min(1000, parseInt(m[1], 10))) : 50;
    const cleanJql = jql.replace(/\bLIMIT\s+\d+/ig, '').trim();

    const r = await fetch(`${API_URL}?jql=${encodeURIComponent(cleanJql)}&maxResults=${maxResults}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        'Accept': 'application/json',
        'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
      }
    });

    if (!r.ok) {
      throw new StepError('jira', `JQL ${r.status}: ${await r.text()}`);
    }

    const data = await r.json();

    if (!data.issues || !Array.isArray(data.issues)) {
      return [];
    }

    const results = data.issues.map(issue => ({
      key: issue.key,
      summary: issue.fields.summary,
      status: issue.fields.status?.name,
      priority: issue.fields.priority ? issue.fields.priority.name : 'Not set',
      assignee: issue.fields.assignee ? issue.fields.assignee.displayName : null
    }));

    return results;
  } catch (error) {
    throw error;
  }
}

function generateResponse(message, jql, results) {
  const count = results.length;

  if (count === 0) {
    return `Tôi đã tìm kiếm theo câu hỏi của bạn nhưng không tìm thấy kết quả nào. JQL đã sử dụng là:\n\n\`${jql}\``;
  }

  let response = `Tôi đã tìm thấy ${count} kết quả cho câu hỏi của bạn.\n\nJQL đã sử dụng là:\n\`${jql}\``;

  if (count > 10) {
    response += `\n\n(Chỉ hiển thị 10 kết quả đầu)`;
  }

  return response;
}

// ============================================================================
// 3) ZALO INTEGRATION
// ============================================================================
async function zaloSendMessage(env, chatId, text) {
  if (!env.ZALO_BOT_TOKEN) throw new StepError('zalo', 'Missing ZALO_BOT_TOKEN');
  const api = `https://bot-api.zapps.me/bot${env.ZALO_BOT_TOKEN}/sendMessage`;

  const payloadText = String(text || '');
  const CHUNK = 900; // an toàn
  const parts = payloadText.match(new RegExp(`[\\s\\S]{1,${CHUNK}}`, 'g')) || [''];

  let lastRes = null;
  for (const p of parts) {
    const payload = { chat_id: String(chatId), text: p };

    // retry nhẹ khi 429 (rate limit)
    let attempt = 0;
    for (;;) {
      const r = await fetch(api, {
        method: 'POST',
        headers: { 'content-type': 'application/json; charset=utf-8' },
        body: JSON.stringify(payload)
      });
      const t = await r.text();
      if (r.ok) {
        try { lastRes = JSON.parse(t); } catch { lastRes = { ok: true, raw: t }; }
        break;
      }
      if (r.status === 429 && attempt < 2) {
        await new Promise(rs => setTimeout(rs, 500 * (attempt + 1)));
        attempt++;
        continue;
      }
      throw new StepError('zalo', `sendMessage ${r.status}: ${t}`);
    }
  }
  return lastRes;
}

async function zaloSetWebhook(env, webhookUrl, secretToken) {
  if (!env.ZALO_BOT_TOKEN) throw new StepError('zalo', 'Missing ZALO_BOT_TOKEN');
  const api = `https://bot-api.zapps.me/bot${env.ZALO_BOT_TOKEN}/setWebhook`;
  const secret = secretToken || env.ZALO_SECRET_TOKEN || 'dev-secret';

  const r = await fetch(api, {
    method: 'POST',
    headers: { 'content-type': 'application/json; charset=utf-8' },
    body: JSON.stringify({ url: webhookUrl, secret_token: secret })
  });
  const t = await r.text();
  if (!r.ok) throw new StepError('zalo', `setWebhook ${r.status}: ${t}`);
  try { return JSON.parse(t); } catch { return { ok: true, raw: t }; }
}


function buildZaloReply(original, jql, results) {
  const list = Array.isArray(results) ? results : [];
  if (!jql) {
    // Không phải Jira → trả lời tự nhiên
    return (original && typeof original === 'string')
      ? String(original).slice(0, 2000)
      : 'OK';
  }
  if (list.length === 0) {
    return [
      'Không tìm thấy kết quả theo câu hỏi.',
      'JQL:',
      '```',
      jql,
      '```'
    ].join('\n');
  }
  const top = list.slice(0, 10);
  const lines = top.map((r, i) =>
    `${i + 1}. ${r.key} — ${r.summary} [${r.status} | ${r.priority}] ${r.assignee ? `@${r.assignee}` : ''}`
  );
  if (list.length > top.length) lines.push(`… và ${list.length - top.length} kết quả khác.`);
  return [
    `Tìm thấy ${list.length} kết quả.`,
    'JQL:',
    '```',
    jql,
    '```',
    '',
    ...lines
  ].join('\n');
}

async function handleZaloMessage(env, chatId, text) {
  try {
    const out = await processChatMessage(env, text);

    if (!out.success) {
      const msg = out.error || 'Có lỗi khi xử lý. Vui lòng thử lại sau.';
      await zaloSendMessage(env, chatId, msg);
      return;
    }

    if (!out.jql) {
      await zaloSendMessage(env, chatId, out.response || 'OK');
      return;
    }

    const reply = buildZaloReply(out.response, out.jql, out.results || []);
    await zaloSendMessage(env, chatId, reply);
  } catch (e) {
    console.error('handleZaloMessage error', e);
    try { await zaloSendMessage(env, chatId, 'Xin lỗi, hệ thống đang bận. Thử lại sau nhé.'); } catch {}
  }
}


// ============================================================================
// 4) R2 SIGNING
// ============================================================================
function toHex(buf) { return [...new Uint8Array(buf)].map(b => b.toString(16).padStart(2, '0')).join(''); }
async function sha256Hex(str) { const enc = new TextEncoder(); return toHex(await crypto.subtle.digest('SHA-256', enc.encode(str))); }
async function hmac(key, data) {
  const enc = new TextEncoder();
  const cryptoKey = key instanceof CryptoKey ? key : await crypto.subtle.importKey('raw', typeof key === 'string' ? enc.encode(key) : key, { name: 'HMAC', hash: 'SHA-256' }, false, ['sign']);
  return crypto.subtle.sign('HMAC', cryptoKey, enc.encode(data));
}
async function getSigningKey(secret, shortDate) {
  const kDate = await hmac('AWS4' + secret, shortDate);
  const kRegion = await hmac(kDate, 'auto');
  const kService = await hmac(kRegion, 's3');
  return hmac(kService, 'aws4_request');
}
async function presignURL(env, method, key, expiresSec) {
  const bucket = env.R2_BUCKET || 'db-meetingnote';
  const accountId = env.R2_ACCOUNT_ID, accessKey = env.R2_ACCESS_KEY_ID, secretKey = env.R2_SECRET_ACCESS_KEY;
  if (!accountId || !accessKey || !secretKey) throw new Error('Missing R2 signing secrets');

  const host = accountId + '.r2.cloudflarestorage.com';
  const now = new Date();
  const amzDate = now.toISOString().replace(/[:-]|\..*/g, '').slice(0, 15) + 'Z';
  const shortDate = amzDate.slice(0, 8);
  const credential = accessKey + '/' + shortDate + '/auto/s3/aws4_request';

  const qs = new URLSearchParams({
    'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',
    'X-Amz-Credential': credential,
    'X-Amz-Date': amzDate,
    'X-Amz-Expires': String(expiresSec),
    'X-Amz-SignedHeaders': 'host'
  });
  const canonicalQuery = qs.toString();
  const canonicalHeaders = 'host:' + host + '\n';
  const signedHeaders = 'host';
  const payloadHash = 'UNSIGNED-PAYLOAD';
  const uri = '/' + bucket + '/' + encodeURIComponent(key);

  const canonicalRequest = [method, uri, canonicalQuery, canonicalHeaders, signedHeaders, payloadHash].join('\n');
  const stringToSign = ['AWS4-HMAC-SHA256', amzDate, shortDate + '/auto/s3/aws4_request', await sha256Hex(canonicalRequest)].join('\n');

  const kSigning = await getSigningKey(secretKey, shortDate);
  const signature = toHex(await hmac(await kSigning, stringToSign));
  return 'https://' + host + uri + '?' + canonicalQuery + '&X-Amz-Signature=' + signature;
}

// ============================================================================
// 5) MEETING PIPELINE (Deepgram → Grok)
// ============================================================================
function extractTranscript(data) {
  if (!data || typeof data !== 'object') return '';
  if (typeof data.transcript === 'string' && data.transcript.trim()) return data.transcript;
  const t1 = data?.results?.channels?.[0]?.alternatives?.[0]?.transcript;
  if (typeof t1 === 'string' && t1.trim()) return t1;
  const t2 = data?.channels?.[0]?.alternatives?.[0]?.transcript;
  if (typeof t2 === 'string' && t2.trim()) return t2;
  const t3 = Array.isArray(data?.results) ? data.results?.[0]?.alternatives?.[0]?.transcript : '';
  if (typeof t3 === 'string' && t3.trim()) return t3;
  if (Array.isArray(data?.results?.utterances) && data.results.utterances.length) {
    const join = data.results.utterances.map(u => u?.transcript || u?.text || '').filter(Boolean).join(' ').trim();
    if (join) return join;
  }
  return '';
}

function buildLLMPrompt(transcript) {
  return [
    '# TẠO BÁO CÁO TIẾN ĐỘ DỰ ÁN TỪ MEETING NOTES',
    '',
    'Bạn là một chuyên gia phân tích cuộc họp dự án. Hãy đọc meeting notes và trích xuất thông tin theo cấu trúc JSON chính xác dưới đây.',
    '',
    '## CẤU TRÚC JSON BẮT BUỘC:',
    '{',
    '  "master_plan": "string",',
    '  "progress_report": "string",',
    '  "assessment": "Đúng tiến độ" | "Chậm tiến độ",',
    '  "next_plan": "string",',
    '  "challenges": "string",',
    '  "proposals": "string",',
    '  "notes": "string"',
    '}',
    '',
    '## HƯỚNG DẪN CHI TIẾT:',
    '1. Tập trung vào việc trích xuất thông tin chính xác từ transcript',
    '2. Đảm bảo tất cả các trường đều được điền (nếu không có thông tin thì để trống string "")',
    '3. Trường "assessment" PHẢI là một trong hai giá trị: "Đúng tiến độ" hoặc "Chậm tiến độ"',
    '',
    '## TRANSCRIPT:',
    transcript,
    '',
    '## KẾT QUẢ: Chỉ trả về JSON hợp lệ, không thêm bất kỳ văn bản nào khác.'
  ].join('\n');
}
function meetingJsonSchema() {
  return {
    type: 'object',
    properties: {
      master_plan: { type: 'string' },
      progress_report: { type: 'string' },
      assessment: { type: 'string', enum: ['Đúng tiến độ', 'Chậm tiến độ'] },
      next_plan: { type: 'string' },
      challenges: { type: 'string' },
      proposals: { type: 'string' },
      notes: { type: 'string' }
    },
    required: ['master_plan', 'progress_report', 'assessment', 'next_plan'],
    additionalProperties: true
  };
}
async function callGrok(env, transcript) {
  const base = (env.XAI_BASE_URL || 'https://api.x.ai/v1').replace(/\/$/, '');
  const body = {
    model: 'grok-3-mini',
    input: buildLLMPrompt(transcript),
    temperature: 0.2,
    response_format: {
      type: 'json_schema',
      json_schema: { name: 'pmo_extract', schema: meetingJsonSchema(), strict: true }
    }
  };
  const r = await fetch(`${base}/responses`, {
    method: 'POST',
    headers: { 'Authorization': `Bearer ${env.XAI_API_KEY}`, 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  });
  const text = await r.text();
  if (!r.ok) throw new StepError('grok', `xAI ${r.status}: ${text}`);
  const data = JSON.parse(text);

  let raw = '';
  let parsed = {};

  try {
    if (data.output_text) raw = data.output_text;
    if (!raw && data.output?.[1]?.content?.[0]) {
      raw = data.output[1].content[0].text;
    }
    if (raw) {
      const jsonMatch = raw.match(/\{[\s\S]*\}/);
      parsed = jsonMatch ? JSON.parse(jsonMatch[0]) : JSON.parse(raw);
    }

    if (!parsed.master_plan) parsed.master_plan = "";
    if (!parsed.progress_report) parsed.progress_report = "";
    if (!parsed.assessment) parsed.assessment = "Đúng tiến độ";
    if (!parsed.next_plan) parsed.next_plan = "";
    if (!parsed.challenges) parsed.challenges = "";
    if (!parsed.proposals) parsed.proposals = "";
    if (!parsed.notes) parsed.notes = "";
  } catch (e) {
    parsed = {
      master_plan: "",
      progress_report: "",
      assessment: "Đúng tiến độ",
      next_plan: "",
      challenges: "",
      proposals: "",
      notes: ""
    };
  }

  return { json: parsed, raw: raw || '', response: data };
}
async function askGrok(env, userText) {
  const base = (env.XAI_BASE_URL || 'https://api.x.ai/v1').replace(/\/$/, '');
  const body = { model: 'grok-3-mini', input: String(userText || ''), temperature: 0.3 };

  const r = await fetch(`${base}/responses`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${env.XAI_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(body)
  });

  if (!r.ok) {
    throw new StepError('grok', `xAI ${r.status}: ${await r.text()}`);
  }

  const data = await r.json();
  let text = '';
  if (data.output_text) text = data.output_text.trim();
  if (!text && data.output?.[1]?.content?.[0]?.text) {
    text = data.output[1].content[0].text.trim();
  }

  return text || 'Mình chưa chắc về câu này. Bạn có thể nói rõ hơn bối cảnh hoặc mục tiêu muốn đạt không?';
}

// ============================================================================
// 6) CONFLUENCE/JIRA COMMON
// ============================================================================
function envConfluenceBase(env) {
  // trả về https://{site}.atlassian.net/wiki
  let base = (env.ATLASSIAN_BASE || '').trim();
  if (!base) throw new StepError('confluence', 'Missing ATLASSIAN_BASE');
  base = base.replace(/\/+$/, '');
  if (!/\/wiki$/.test(base)) base += '/wiki';
  return base;
}
function confluenceApiUrl(env, path) {
  return envConfluenceBase(env) + '/rest/api' + (path || '');
}
function envJiraBase(env) {
  // trả về https://{site}.atlassian.net (không có /wiki)
  let base = (env.ATLASSIAN_BASE || '').trim();
  if (!base) throw new StepError('jira', 'Missing ATLASSIAN_BASE');
  base = base.replace(/\/+$/, '');
  if (base.endsWith('/wiki')) {
    base = base.substring(0, base.length - 5);
  }
  return base;
}
function atlassianEmail(env) {
  return env.ATLASSIAN_EMAIL || env.ATLASSIAN_USER;
}
function escapeHtml(s = '') { return String(s).replace(/[&<>"]/g, c => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;' }[c])); }

// Hàm chuyển đổi văn bản thành bullet points
function textToBulletPoints(text) {
  if (!text || typeof text !== 'string') return '';

  let processedText = text.trim();
  processedText = processedText.replace(/^[\-\*\+]\s*/gm, '- ');

  processedText = processedText.replace(/;|,+/g, function (match) {
    return (match === ';' || match.length >= 2) ? '||SPLIT||' : match;
  });

  let points = [];
  let parts = processedText.split('||SPLIT||');

  for (const part of parts) {
    const trimmedPart = part.trim();
    if (!trimmedPart) continue;

    let sentenceParts = trimmedPart.split(/[.!?]+/);

    for (const sentencePart of sentenceParts) {
      const trimmedSentence = sentencePart.trim();
      if (!trimmedSentence) continue;

      if (trimmedSentence.length > 50) {
        let subParts = trimmedSentence.split(/,\s*[A-ZÁÀẢÃẠĂẮẰẲẴẶÂẤẦẨẪẬĐÉÈẺẼẸÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴ]/);

        if (subParts.length > 1) {
          for (const subPart of subParts) {
            const trimmedSub = subPart.trim();
            if (trimmedSub) {
              if (trimmedSub.endsWith(',')) {
                points.push(trimmedSub.substring(0, trimmedSub.length - 1).trim());
              } else {
                points.push(trimmedSub);
              }
            }
          }
        } else {
          points.push(trimmedSentence);
        }
      } else {
        points.push(trimmedSentence);
      }
    }
  }

  if (points.length === 0) {
    return escapeHtml(text);
  }

  let bulletPoints = '';
  for (const point of points) {
    const trimmedPoint = point.trim();
    if (trimmedPoint) {
      bulletPoints += `- ${escapeHtml(trimmedPoint)}<br/>`;
    }
  }

  return bulletPoints;
}

function buildConfluenceTableHTML(obj = {}) {
  const v = (k) => escapeHtml((obj?.[k] || '').toString().trim());

  const masterPlan = textToBulletPoints(obj?.master_plan);
  const progressReport = textToBulletPoints(obj?.progress_report);
  const assessment = v('assessment');
  const nextPlan = textToBulletPoints(obj?.next_plan);
  const challenges = textToBulletPoints(obj?.challenges);
  const proposals = textToBulletPoints(obj?.proposals);
  const notes = textToBulletPoints(obj?.notes);

  return `
<table class="confluenceTable">
  <tbody>
    <tr>
      <th rowspan="2" class="confluenceTh" data-highlight-colour="#d9d9d9">NỘI DUNG</th>
      <th rowspan="2" class="confluenceTh" data-highlight-colour="#d9d9d9">Master plan/Timeline của dự án</th>
      <th colspan="5" class="confluenceTh" data-highlight-colour="#b4c6e7">BÁO CÁO TIẾN ĐỘ DỰ ÁN</th>
      <th rowspan="2" class="confluenceTh" data-highlight-colour="#d9d9d9">Ghi chú</th>
    </tr>
    <tr>
      <th class="confluenceTh" data-highlight-colour="#d9d9d9">Báo cáo tiến độ<br/>(Ghi ngắn gọn)</th>
      <th class="confluenceTh" data-highlight-colour="#d9d9d9">Đánh giá tiến độ<br/>(Đúng/chậm so với kế hoạch)</th>
      <th class="confluenceTh" data-highlight-colour="#d9d9d9">Kế hoạch tiếp theo<br/>(Ghi ngắn gọn)</th>
      <th class="confluenceTh" data-highlight-colour="#d9d9d9">Khó khăn vướng mắc</th>
      <th class="confluenceTh" data-highlight-colour="#d9d9d9">Đề xuất/Kiến nghị</th>
    </tr>
    <tr>
      <td class="confluenceTd">Tổng quan</td>
      <td class="confluenceTd">${masterPlan}</td>
      <td class="confluenceTd">${progressReport}</td>
      <td class="confluenceTd">${assessment}</td>
      <td class="confluenceTd">${nextPlan}</td>
      <td class="confluenceTd">${challenges}</td>
      <td class="confluenceTd">${proposals}</td>
      <td class="confluenceTd">${notes}</td>
    </tr>
  </tbody>
</table>`.trim();
}

// ============================================================================
// 6.1) ZALO CONTACTS STORAGE (D1)
// ============================================================================
function d1(env){
  const db =
    env.D1 ||
    env.Zalo_Contact ||      // tên binding của bạn trong console
    env.zalo_contacts ||
    env.ZALO_CONTACT ||
    env.ZALO_Contact;

  if (!db || (typeof db.prepare !== 'function' && typeof db.exec !== 'function')) {
    throw new StepError('d1', 'Missing D1 binding. Bind D1 là "D1" hoặc "Zalo_Contact".');
  }
  return db;
}

async function ensureContactsTable(env){
  const db = d1(env);
  const createTable = `
    CREATE TABLE IF NOT EXISTS zalo_contacts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      chat_id TEXT NOT NULL UNIQUE,
      display_name TEXT,
      created_at TEXT
    );
  `;
  const createIndex = `
    CREATE INDEX IF NOT EXISTS idx_zalo_contacts_name
    ON zalo_contacts (display_name);
  `;
  await db.prepare(createTable).run();
  await db.prepare(createIndex).run();
}

function normName(s){ return String(s || '').trim().slice(0, 80); }

async function saveContact(env, chatId, displayName){
  if (!chatId) return;
  await ensureContactsTable(env);
  const now = new Date().toISOString();
  const name = normName(displayName || '');
  await d1(env).prepare(`
    INSERT INTO zalo_contacts (chat_id, display_name, created_at)
    VALUES (?1, COALESCE(NULLIF(?2,''), (SELECT display_name FROM zalo_contacts WHERE chat_id=?1)), ?3)
    ON CONFLICT(chat_id) DO UPDATE SET
      display_name = COALESCE(excluded.display_name, zalo_contacts.display_name)
  `).bind(String(chatId), name, now).run();
}


async function getNameByChatId(env, chatId){
  await ensureContactsTable(env);
  const row = await d1(env).prepare(`
    SELECT display_name FROM zalo_contacts WHERE chat_id = ?1 LIMIT 1
  `).bind(String(chatId)).first();
  return row ? (row.display_name || null) : null;
}

async function listContacts(env){
  await ensureContactsTable(env);
  const rs = await d1(env).prepare(`
    SELECT chat_id, COALESCE(display_name, chat_id) AS display_name
    FROM zalo_contacts
    ORDER BY lower(display_name) ASC
  `).all();
  return rs.results || [];
}

async function findChatIdByName(env, displayName){
  await ensureContactsTable(env);
  const row = await d1(env).prepare(`
    SELECT chat_id FROM zalo_contacts
    WHERE lower(display_name)=lower(?1)
    LIMIT 1
  `).bind(normName(displayName)).first();
  return row ? row.chat_id : null;
}


// ============================================================================
// 7) UI HTML (đã cắm sẵn toàn bộ)
// ============================================================================
function homeHTML() {
  return `<!DOCTYPE html>
<html lang="vi">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>Công cụ AI cho PMO - BIDV</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<style>
  :root{
    --bg:#f6f8fb;       /* NỀN SÁNG */
    --card:#ffffff;
    --soft:#f1f5f9;
    --text:#111827;
    --muted:#6b7280;
    --line:#e5e7eb;
    --primary:#009639;
    --primary-600:#006b2a;
    --accent:#22c55e;
    --radius:16px;
    --shadow:0 10px 28px rgba(16,24,40,.10);
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{margin:0;background:var(--bg);color:var(--text);font:16px/1.6 Inter,system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}

  /* Header dính, nền sáng */
  .top{position:sticky;top:0;z-index:10;background:rgba(255,255,255,.88);backdrop-filter:saturate(1.05) blur(10px);border-bottom:1px solid var(--line)}
  .top .row{max-width:1240px;margin:0 auto;padding:12px 20px;display:flex;align-items:center;justify-content:space-between;gap:12px}
  .brand{display:flex;align-items:center;gap:10px}
  .logo{width:42px;height:42px;border-radius:10px;background:#e7f6ee;display:grid;place-items:center;overflow:hidden}
  .logo img{max-width:100%;max-height:100%}
  .brand .title{margin:0;font-size:18px;font-weight:800;letter-spacing:.2px}
  .nav{display:flex;gap:8px;flex-wrap:wrap}
  .nav a{padding:8px 12px;border-radius:10px;text-decoration:none;color:#0f172a;border:1px solid transparent}
  .nav a:hover{background:#f0fdf4;border-color:#dcfce7}

  .container{max-width:1240px;margin:0 auto;padding:22px 20px}

  /* HERO — gọn, lấp đầy chiều ngang, nền sáng với gradient rất nhẹ */
  .hero{
    display:grid;grid-template-columns:1.15fr .85fr;gap:22px;
    background:
      radial-gradient(600px 220px at 10% -10%, #dcfce7 0%, transparent 60%),
      radial-gradient(600px 220px at 90% -20%, #e0f2fe 0%, transparent 60%),
      var(--card);
    border:1px solid var(--line);border-radius:22px;padding:22px;box-shadow:var(--shadow);
  }
  .hero h2{margin:0 0 8px;font-size:32px;letter-spacing:.2px}
  .hero p{margin:0;color:var(--muted)}
  .cta{margin-top:16px;display:flex;flex-wrap:wrap;gap:10px}
  .btn{appearance:none;border:0;border-radius:12px;padding:12px 16px;font-weight:800;cursor:pointer;display:inline-flex;gap:8px;align-items:center}
  .btn.primary{background:linear-gradient(90deg,var(--primary),var(--primary-600));color:#fff}
  .btn.ghost{background:#f8fafc;border:1px solid var(--line);color:#0f172a}
  .btn.ghost:hover{background:#eef2f7}

  .hero-side{display:grid;grid-template-columns:1fr 1fr;gap:12px}
  .gcard{background:var(--card);border:1px solid var(--line);border-radius:14px;padding:14px;display:flex;gap:10px;align-items:flex-start}
  .gcard i{color:var(--primary)}
  .gtitle{font-weight:700}
  .gcard small{display:block;color:var(--muted)}

  /* Dải KPI — phủ kín, tránh trống */
  .chips{margin-top:18px;display:grid;grid-template-columns:repeat(6,1fr);gap:12px}
  .chip{background:var(--card);border:1px solid var(--line);border-radius:14px;padding:12px 14px;display:flex;align-items:center;gap:10px}
  .chip i{color:var(--primary)}
  .chip .v{font-weight:800}
  .chip .l{font-size:13px;color:var(--muted)}

  /* Lưới module — 4 card cân đối, kín chiều ngang */
  .grid{margin-top:20px;display:grid;grid-template-columns:repeat(12,1fr);gap:16px}
  a.module{
    grid-column:span 4;
    text-decoration:none;color:inherit;background:var(--card);border:1px solid var(--line);
    border-radius:18px;padding:18px;position:relative;display:flex;flex-direction:column;min-height:190px;transition:transform .1s ease, box-shadow .2s ease
  }
  a.module:hover{transform:translateY(-1px);box-shadow:0 14px 28px rgba(16,24,40,.12)}
  .micon{width:54px;height:54px;border-radius:12px;background:#f0fdf4;border:1px solid #bbf7d0;display:grid;place-items:center}
  .micon i{color:var(--primary);font-size:22px}
  .mtitle{margin:12px 0 6px;font-size:18px;font-weight:800}
  .mdesc{margin:0 0 10px;color:#334155;font-size:14px}
  .tags{margin-top:auto;display:flex;gap:8px;flex-wrap:wrap}
  .tag{background:#f1f5f9;border:1px solid var(--line);padding:4px 10px;border-radius:999px;font-size:12px;font-weight:700;color:#0f172a}
  .go{position:absolute;right:14px;top:14px;color:#64748b}

  /* Khối “Tin mới & Lối tắt” — lấp nốt không gian dưới */
  .bottom{margin-top:20px;display:grid;grid-template-columns:1.2fr .8fr;gap:16px}
  .panel{background:var(--card);border:1px solid var(--line);border-radius:18px;padding:16px}
  .panel h3{margin:0 0 10px;font-size:16px;font-weight:800;color:#0f172a}
  .list{display:grid;gap:10px}
  .item{display:flex;gap:10px;align-items:flex-start;padding:10px;border-radius:12px;background:var(--soft)}
  .item i{color:var(--primary)}
  .shortcuts{display:grid;grid-template-columns:repeat(2,1fr);gap:10px}
  .shortcut{display:flex;gap:8px;align-items:center;padding:12px;border:1px dashed #cbd5e1;border-radius:12px;background:#fcfcfd}
  .shortcut a{text-decoration:none;color:#0f172a}
  .shortcut a:hover{text-decoration:underline}

  .footer{padding:18px 10px;text-align:center;color:var(--muted)}

  @media (max-width:1100px){
    .hero{grid-template-columns:1fr}
    .chips{grid-template-columns:repeat(3,1fr)}
    a.module{grid-column:span 6}
    .bottom{grid-template-columns:1fr}
  }
  @media (max-width:720px){
    .chips{grid-template-columns:repeat(2,1fr)}
    a.module{grid-column:span 12}
  }
</style>
</head>
<body>
  <header class="top">
    <div class="row">
      <div class="brand">
        <div class="logo">
          <img src="https://z-cdn-media.chatglm.cn/files/1a1ab789-5429-451f-bb53-65e73a39e4bd_pasted_image_1758225809744.png"
               alt="BIDV" onerror="this.style.display='none'">
        </div>
        <h1 class="title">Công cụ AI cho PMO</h1>
      </div>
      <nav class="nav">
        <a href="/meetingnote"><i class="fa-solid fa-microphone-lines"></i>&nbsp;Meeting Note</a>      
        <a href="/risk"><i class="fa-solid fa-triangle-exclamation"></i>&nbsp;Risk Management</a>
        <a href="/chatbot"><i class="fa-solid fa-robot"></i>&nbsp;Chat Bot</a>
      </nav>
    </div>
  </header>

  <main class="container">
    <!-- HERO -->
    <section class="hero">
      <div>
        <h2>Tối ưu quản lý dự án với AI</h2>
        <p>Tự động hóa biên bản họp, theo dõi rủi ro, sinh báo cáo và hỏi đáp Jira/Confluence ngay tức thì.</p>
        <div class="cta">
          <a href="/meetingnote" class="btn primary"><i class="fa-solid fa-bolt"></i>Bắt đầu Meeting Note</a>
          <a href="/chatbot" class="btn ghost"><i class="fa-solid fa-robot"></i>Mở Chat Bot</a>
        </div>
      </div>

      <div class="hero-side">
        <div class="gcard">
          <i class="fa-solid fa-wand-magic-sparkles"></i>
          <div>
            <div class="gtitle">Tự động hóa báo cáo</div>
            <small>Trích xuất master plan, tiến độ, vướng mắc & kiến nghị từ transcript.</small>
          </div>
        </div>
        <div class="gcard">
          <i class="fa-solid fa-puzzle-piece"></i>
          <div>
            <div class="gtitle">Tích hợp Jira & Confluence</div>
            <small>Tạo ticket, push page chuẩn PMO chỉ với một cú nhấp.</small>
          </div>
        </div>
      </div>
    </section>

    <!-- KPI STRIP -->
    <section class="chips">
      <div class="chip"><i class="fa-solid fa-clock"></i><div><div class="v">4.2 ngày</div><div class="l">Thời gian hoàn thiện</div></div></div>
      <div class="chip"><i class="fa-solid fa-code"></i><div><div class="v">3.1 ngày</div><div class="l">Thời gian phát triển</div></div></div>
      <div class="chip"><i class="fa-solid fa-chart-line"></i><div><div class="v">+87%</div><div class="l">Tỷ lệ hoàn thành</div></div></div>
      <div class="chip"><i class="fa-solid fa-bug"></i><div><div class="v">12</div><div class="l">Ticket quá hạn</div></div></div>
      <div class="chip"><i class="fa-solid fa-layer-group"></i><div><div class="v">140</div><div class="l">Backlog hiện tại</div></div></div>
      <div class="chip"><i class="fa-solid fa-shield-halved"></i><div><div class="v">4 / 7 / 12</div><div class="l">Rủi ro H/M/L (4w)</div></div></div>
    </section>

    <!-- MODULE GRID -->
    <section class="grid">
      <a class="module" href="/meetingnote">
        <span class="go"><i class="fa-solid fa-arrow-up-right-from-square"></i></span>
        <div class="micon"><i class="fa-solid fa-microphone-lines"></i></div>
        <div class="mtitle">AI Meeting Insights</div>
        <p class="mdesc">Chuyển ghi âm → minutes, action items; đẩy Confluence/Jira.</p>
        <div class="tags"><span class="tag">Deepgram</span><span class="tag">Grok 3 Mini</span></div>
      </a>

      <a class="module" href="/risk">
        <span class="go"><i class="fa-solid fa-arrow-up-right-from-square"></i></span>
        <div class="micon"><i class="fa-solid fa-triangle-exclamation"></i></div>
        <div class="mtitle">AI Risk Management</div>
        <p class="mdesc">Cảnh báo trễ hạn, backlog tăng, dự báo rủi ro & gợi ý xử lý.</p>
        <div class="tags"><span class="tag">Cảnh báo</span><span class="tag">Sprint</span></div>
      </a>

      <a class="module" href="/chatbot">
        <span class="go"><i class="fa-solid fa-arrow-up-right-from-square"></i></span>
        <div class="micon"><i class="fa-solid fa-robot"></i></div>
        <div class="mtitle">AI Chat Bot</div>
        <p class="mdesc">Hỏi Jira/Confluence, lọc JQL tự động, trả lời 24/7.</p>
        <div class="tags"><span class="tag">JQL</span><span class="tag">Zalo Bot</span></div>
      </a>
    </section>

    <!-- BOTTOM PANELS (tin mới + lối tắt) -->
    <section class="bottom">
      <div class="panel">
        <h3><i class="fa-solid fa-bell"></i> Tin mới</h3>
        <div class="list">
          <div class="item"><i class="fa-solid fa-circle-check"></i><div><b>Meeting Note</b> hỗ trợ đặt tiêu đề <i>auto-number</i> khi trùng trang Confluence.</div></div>
          <div class="item"><i class="fa-solid fa-circle-check"></i><div><b>Chat Bot</b> thêm chọn project trực tiếp & hiển thị bảng kết quả.</div></div>
          <div class="item"><i class="fa-solid fa-circle-check"></i><div><b>Risk Management</b> tối ưu hiển thị biểu đồ, lấp đầy chiều ngang.</div></div>
        </div>
      </div>
      <div class="panel">
        <h3><i class="fa-solid fa-bolt"></i> Lối tắt nhanh</h3>
        <div class="shortcuts">
          <div class="shortcut"><i class="fa-solid fa-stethoscope"></i><a href="/health" target="_blank">Kiểm tra hệ thống</a></div>
          <div class="shortcut"><i class="fa-solid fa-robot"></i><a href="/chatbot">Chat Bot (có QR Zalo bên trong)</a></div>
        </div>
      </div>
    </section>
  </main>

  <footer class="footer">© 2025 BIDV — Công cụ AI cho PMO</footer>
</body>
</html>`;
}

function meetingNoteHTML() {
  return `<!doctype html>
<html lang="vi">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>AI Meeting Insights — PMO</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<style>
  /* ====== Palette & tokens đồng bộ trang chủ ====== */
  :root{
    --bg:#f6f8fb;
    --card:#ffffff;
    --soft:#f1f5f9;
    --text:#111827;
    --muted:#6b7280;
    --line:#e5e7eb;
    --primary:#009639;
    --primary-600:#006b2a;
    --accent:#22c55e;
    --radius:16px;
    --shadow:0 10px 28px rgba(16,24,40,.10);
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{margin:0;background:var(--bg);color:var(--text);font:16px/1.6 "Inter",system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}

  /* ====== Header dính giống trang chủ ====== */
  .top{position:sticky;top:0;z-index:10;background:rgba(255,255,255,.88);backdrop-filter:saturate(1.05) blur(10px);border-bottom:1px solid var(--line)}
  .top .row{max-width:1240px;margin:0 auto;padding:12px 20px;display:flex;align-items:center;justify-content:space-between;gap:12px}
  .brand{display:flex;align-items:center;gap:10px}
  .logo{width:42px;height:42px;border-radius:10px;background:#e7f6ee;display:grid;place-items:center;overflow:hidden}
  .logo img{max-width:100%;max-height:100%}
  .title{margin:0;font-size:18px;font-weight:800;letter-spacing:.2px}
  .nav{display:flex;gap:8px;flex-wrap:wrap}
  .nav a{padding:8px 12px;border-radius:10px;text-decoration:none;color:#0f172a;border:1px solid transparent}
  .nav a:hover{background:#f0fdf4;border-color:#dcfce7}

  /* ====== Container ====== */
  .container{max-width:1240px;margin:0 auto;padding:22px 20px}

  /* ====== Hero giống homepage ====== */
  .hero{
    display:grid;grid-template-columns:1.1fr .9fr;gap:22px;
    background:
      radial-gradient(600px 220px at 10% -10%, #dcfce7 0%, transparent 60%),
      radial-gradient(600px 220px at 90% -20%, #e0f2fe 0%, transparent 60%),
      var(--card);
    border:1px solid var(--line);border-radius:22px;padding:22px;box-shadow:var(--shadow);
  }
  .hero h2{margin:0 0 8px;font-size:32px;letter-spacing:.2px}
  .hero p{margin:0;color:var(--muted)}
  .cta{margin-top:16px;display:flex;flex-wrap:wrap;gap:10px}
  .btn{appearance:none;border:0;border-radius:12px;padding:12px 16px;font-weight:800;cursor:pointer;display:inline-flex;gap:8px;align-items:center}
  .btn.primary{background:linear-gradient(90deg,var(--primary),var(--primary-600));color:#fff}
  .btn.ghost{background:#f8fafc;border:1px solid var(--line);color:#0f172a}
  .btn.ghost:hover{background:#eef2f7}
  .muted{color:var(--muted)}

  .hero-side{display:grid;grid-template-columns:1fr 1fr;gap:12px}
  .gcard{background:var(--card);border:1px solid var(--line);border-radius:14px;padding:14px;display:flex;gap:10px;align-items:flex-start}
  .gcard i{color:var(--primary)}
  .gtitle{font-weight:700}
  .gcard small{display:block;color:var(--muted)}

  /* ====== Lưới nội dung chính ====== */
  .grid{margin-top:20px;display:grid;grid-template-columns:repeat(12,1fr);gap:16px}

  .panel{background:var(--card);border:1px solid var(--line);border-radius:18px;padding:18px;box-shadow:var(--shadow)}
  .panel h3{margin:0 0 10px;font-size:18px}

  /* Upload card (dropzone) */
  .drop{border:2px dashed #C1C7D0;border-radius:12px;padding:22px;text-align:center;background:#FAFBFC;transition:.2s}
  .drop.dragover{border-color:var(--primary);background:#F0F7FF}
  .progress{height:8px;background:#EBECF0;border-radius:999px;overflow:hidden;margin-top:12px}
  .bar{height:100%;width:0;background:var(--primary)}

  .row{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
  input[type="file"]{display:block;width:100%;max-width:420px;border:1px dashed var(--line);border-radius:12px;padding:10px;background:#fff}

  textarea{width:100%;min-height:160px;border-radius:12px;border:1px solid #DFE1E6;padding:12px;font:14px/1.4 ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas}
  pre.status{background:#f8fafc;border:1px solid var(--line);border-radius:12px;padding:12px;overflow:auto;max-height:320px}

  .spinner{width:18px;height:18px;border:3px solid #C1C7D0;border-top-color:var(--primary);border-radius:50%;display:none;animation:spin 1s linear infinite}
  @keyframes spin{to{transform:rotate(360deg)}}

  /* Tabs (giữ IDs JS, style mới) */
  .tab-container{margin-top:16px}
  .tab-buttons{display:flex;gap:8px;border-bottom:1px solid var(--line)}
  .tab-button{padding:10px 14px;cursor:pointer;background:transparent;border:none;border-bottom:2px solid transparent;font-weight:700;color:#334155}
  .tab-button.active{border-bottom-color:var(--primary);color:#0f172a}
  .tab-content{display:none;padding:16px 0}
  .tab-content.active{display:block}

  /* Data mapping cards */
  .data-mapping{background:#f8f9fa;border-radius:12px;padding:15px;margin-top:12px;border:1px solid var(--line)}
  .data-mapping h4{margin:0 0 8px}
  .field-item{display:flex;gap:14px;margin-bottom:12px;align-items:flex-start}
  .field-name{font-weight:700;min-width:180px;padding-top:8px;color:#0f172a}
  .field-value{flex:1;display:flex;flex-direction:column;gap:6px}
  .field-textarea{width:100%;min-height:60px;border:1px solid #DFE1E6;border-radius:10px;padding:10px;font-family:inherit;font-size:14px;resize:vertical}
  .field-select{width:100%;border:1px solid #DFE1E6;border-radius:10px;padding:10px;font-family:inherit;font-size:14px}
  .field-actions{display:flex;justify-content:flex-end}
  .btn.small{padding:8px 10px;border-radius:10px;font-weight:700}
  .btn.line{background:#fff;border:1px solid var(--line);color:#0f172a}

  /* Title modes (auto/manual) */
  .title-modes{display:flex;gap:12px;align-items:center;flex-wrap:wrap}
  .title-input{border:1px solid #DFE1E6;border-radius:12px;padding:10px;font-size:14px;min-width:280px;background:#fff}

  /* Jira ticket styles (giữ logic, đổi skin) */
  .ticket-form{background:#f8f9fa;border-radius:12px;padding:15px;border:1px solid var(--line);margin-top:12px}
  .ticket-item{border:1px solid #DFE1E6;border-radius:12px;padding:15px;margin-bottom:12px;background:white}
  .ticket-item-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:10px}
  .ticket-item-header h5{margin:0;font-size:16px}
  .ticket-row{display:flex;gap:10px;margin-bottom:10px;align-items:center}
  .ticket-row label{min-width:120px;font-weight:600}
  .ticket-row select, .ticket-row input, .ticket-row textarea{flex:1;border:1px solid #DFE1E6;border-radius:10px;padding:10px}
  .ticket-row textarea{min-height:80px}
  .ticket-result{display:none;margin-top:12px;padding:12px;border-radius:12px;background:#E3F2FD}
  .ticket-result.success{background:#E6F4EA}
  .ticket-result.error{background:#FFEBE6}

  /* Email OCR - combined panel */
  .email-ocr{display:flex;flex-direction:column;gap:16px}
  .email-upload-section{display:flex;flex-direction:column;gap:10px}
  .email-upload{border:2px dashed #C1C7D0;border-radius:12px;padding:16px;text-align:center;background:#FAFBFC;position:relative;transition:.2s}
  .email-upload.dragover{border-color:var(--primary);background:#F0F7FF}
  .email-upload.has-image{border-style:solid;border-color:#22c55e;background:#f0fdf4}
  .email-paste-area{min-height:120px;display:flex;flex-direction:column;align-items:center;justify-content:center;cursor:pointer;transition:all .3s}
  .email-paste-area i{font-size:24px;color:#94a3b8;margin-bottom:8px}
  .email-paste-area p{margin:0;color:#64748b;font-size:14px}
  .email-paste-area.has-image{min-height:0}
  .email-preview{margin-top:10px;text-align:center;position:relative}
  .email-preview img{max-width:100%;max-height:200px;border-radius:8px;border:1px solid var(--line)}
  .email-preview-actions{position:absolute;top:8px;right:8px;display:flex;gap:6px}
  .email-preview-actions button{width:32px;height:32px;border-radius:50%;background:rgba(255,255,255,0.9);border:1px solid var(--line);display:flex;align-items:center;justify-content:center;cursor:pointer;font-size:12px}
  .email-preview-actions button:hover{background:#fff}
  .email-status{margin-top:8px;padding:6px;border-radius:6px;display:none;font-size:13px}
  .email-status.success{background:#E6F4EA;color:#006644}
  .email-status.error{background:#FFEBE6;color:#BF2600}
  .email-status.processing{background:#E3F2FD;color:#0277bd}
  .email-paste-hint{position:absolute;top:6px;right:6px;background:#f1f5f9;border:1px solid var(--line);border-radius:6px;padding:4px 8px;font-size:11px;color:#64748b}
  
  .email-actions{display:flex;gap:10px;flex-wrap:wrap}
  .email-actions button{flex:1;min-width:120px}
  
  .email-results{display:grid;grid-template-columns:1fr 1fr;gap:10px}
  .email-result-group{display:flex;flex-direction:column;gap:6px}
  .email-result-group label{font-weight:600;font-size:14px;color:#0f172a}
  .email-result-group textarea{min-height:100px}

  /* Confluence settings panel - redesigned */
  .confluence-settings{display:grid;grid-template-columns:repeat(2,1fr);gap:16px;margin-bottom:16px}
  .setting-group{display:flex;flex-direction:column;gap:6px}
  .setting-label{font-weight:600;color:#0f172a;font-size:14px}
  .setting-control{width:100%;border:1px solid #DFE1E6;border-radius:10px;padding:10px;font-family:inherit;font-size:14px;background:#fff}
  
  /* Confluence output panel */
  .confluence-output{display:flex;flex-direction:column;gap:16px}
  .output-actions{display:flex;justify-content:space-between;align-items:center}
  .output-actions-left{display:flex;gap:10px}
  .output-actions-right{display:flex;gap:10px}
  
  /* Footer nhỏ */
  .footer{padding:18px 10px;text-align:center;color:var(--muted)}

  @media (max-width:1100px){
    .hero{grid-template-columns:1fr}
    .grid{grid-template-columns:repeat(12,1fr)}
    .confluence-settings{grid-template-columns:1fr}
    .email-results{grid-template-columns:1fr}
  }
</style>
</head>
<body>
  <!-- Header đồng bộ -->
  <header class="top">
    <div class="row">
      <div class="brand">
        <div class="logo">
          <img src="https://z-cdn-media.chatglm.cn/files/1a1ab789-5429-451f-bb53-65e73a39e4bd_pasted_image_1758225809744.png"
               alt="BIDV" onerror="this.style.display='none'">
        </div>
        <h1 class="title">Công cụ AI cho PMO</h1>
      </div>
      <nav class="nav">
        <a href="/meetingnote"><i class="fa-solid fa-microphone-lines"></i>&nbsp;Meeting Note</a>
        <a href="/risk"><i class="fa-solid fa-triangle-exclamation"></i>&nbsp;Risk Management
        </a>
        <a href="/chatbot"><i class="fa-solid fa-robot"></i>&nbsp;Chat Bot</a>
      </nav>
    </div>
  </header>

  <main class="container">
    <!-- Hero đồng bộ -->
    <section class="hero">
      <div>
        <h2>AI Meeting Insights</h2>
        <p>Tải file ghi âm, trích xuất minutes & tiến độ, và đẩy thẳng Confluence/Jira.</p>
        <div class="cta">
          <button class="btn primary" onclick="document.getElementById('file').click()">
            <i class="fa-solid fa-upload"></i> Chọn tệp audio
          </button>
          <a href="/" class="btn ghost"><i class="fa-solid fa-house"></i> Về menu PMO</a>
        </div>
        <div class="muted" style="margin-top:8px">Hỗ trợ MP3/WAV. Pipeline: Deepgram → R2 → Grok 3 Mini.</div>
      </div>
      <div class="hero-side">
        <div class="gcard">
          <i class="fa-solid fa-wand-magic-sparkles"></i>
          <div>
            <div class="gtitle">Tự động cấu trúc</div>
            <small>Master plan, progress, challenges, proposals, notes.</small>
          </div>
        </div>
        <div class="gcard">
          <i class="fa-solid fa-diagram-project"></i>
          <div>
            <div class="gtitle">Đồng bộ PMO</div>
            <small>Auto-number tiêu đề Confluence; tạo nhiều Jira tickets.</small>
          </div>
        </div>
      </div>
    </section>

    <!-- Hàng 1: Upload audio và Email OCR -->
    <section class="grid" style="margin-top:20px">
      <!-- Upload card -->
      <div class="panel" style="grid-column: span 6">
        <h3><i class="fa-solid fa-file-audio"></i> Tải & xử lý ghi âm</h3>
        <div id="drop" class="drop">
          <input id="file" type="file" accept="audio/*"/>
          <p><strong>Kéo thả</strong> tệp vào đây hoặc chọn MP3/WAV.</p>
          <p class="muted" id="sel">Chưa chọn tệp</p>
          <div class="progress"><div id="bar" class="bar"></div></div>
          <div class="row" style="margin-top:12px">
            <button id="btnUpload" class="btn primary"><i class="fa-solid fa-bolt"></i> Upload & chạy pipeline</button>
            <button id="btnCancel" class="btn line"><i class="fa-solid fa-xmark"></i> Hủy</button>
            <span id="state" class="muted">Trạng thái</span>
            <span id="spin" class="spinner" aria-hidden="true"></span>
          </div>
        </div>
      </div>

      <!-- Email OCR - Combined panel -->
      <div class="panel" style="grid-column: span 6">
        <h3><i class="fa-solid fa-envelope"></i> Chèn ảnh email (OCR)</h3>
        <div class="email-ocr">
          <!-- Upload section -->
          <div class="email-upload-section">
            <div id="emailDrop" class="email-upload">
              <div class="email-paste-hint"><i class="fa-solid fa-paste"></i> Ctrl+V để dán</div>
              <div id="emailPasteArea" class="email-paste-area" style="cursor:pointer" tabindex="0" role="button" aria-label="Chọn ảnh từ máy">
                <i class="fa-solid fa-image"></i>
                <p>Kéo thả hoặc dán ảnh từ clipboard</p>
              </div>
              <input id="emailImage" type="file" accept="image/*" style="position:absolute;left:-9999px;width:0;height:0;opacity:0"/>
              <div class="email-preview" id="emailPreview" style="display:none">
                <img id="emailImgPreview" src="" alt="Email preview">
                <div class="email-preview-actions">
                  <button id="btnRemoveImage" title="Xóa"><i class="fa-solid fa-trash"></i></button>
                  <button id="btnProcessImage" style="display:none" title="Upload" class="primary"><i class="fa-solid fa-upload"></i></button>
                </div>
              </div>
              <div id="emailStatus" class="email-status"></div>
            </div>
          </div>
          
          <!-- Action buttons -->
          <div class="email-actions">
            <button id="btnExtractEmails" class="btn primary" disabled><i class="fa-solid fa-envelope-open-text"></i> Trích xuất email</button>
            <button id="btnGetJiraIds" class="btn line" disabled><i class="fa-solid fa-id-badge"></i> Lấy Jira IDs</button>
          </div>
          
          <!-- Results section -->
          <div class="email-results">
            <div class="email-result-group">
              <label>Danh sách email:</label>
              <textarea id="ocrEmails" class="field-textarea" placeholder="Danh sách email được trích xuất, cách nhau bằng dấu ;" readonly></textarea>
            </div>
            <div class="email-result-group">
              <label>Jira Account IDs:</label>
              <textarea id="ocrJiraIds" class="field-textarea" placeholder="Jira Account IDs sẽ hiển thị ở đây" readonly></textarea>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Hàng 2: Kết quả & Confluence và Trạng thái -->
    <section class="grid" style="margin-top:20px">
      <!-- Kết quả & Tạo Confluence -->
      <div class="panel" style="grid-column: span 6">
        <h3><i class="fa-solid fa-square-poll-horizontal"></i> Kết quả & Confluence</h3>
        
        <!-- Confluence Settings -->
        <div class="confluence-settings">
          <div class="setting-group">
            <label class="setting-label">Space:</label>
            <select id="spaceSelect" class="setting-control">
              <option value="AIG">AIG - Dự án AI</option>
              <option value="OTJ">OTJ - Đào tạo Jira</option>
              <option value="DEV">DEV - Dự án DEVSECOPS</option>
            </select>
          </div>
          
          <div class="setting-group">
            <label class="setting-label">Parent Page ID:</label>
            <input id="parentIdInput" class="setting-control" type="text" placeholder="ID của page cha (tùy chọn)">
          </div>
          
          <div class="setting-group">
            <label class="setting-label">Template:</label>
            <select id="templateSelect" class="setting-control">
              <option value="mom">[MOM] Biên bản họp</option>
              <option value="progress">[Report] Báo cáo tiến độ dự án trọng điểm</option>
              <option value="risk">[Report] Risk Management</option>
            </select>
          </div>
          
          <div class="setting-group">
            <label class="setting-label">Tiêu đề:</label>
            <div class="title-modes">
              <label class="muted"><input type="radio" name="titleMode" id="modeAuto" checked> Tự động</label>
              <label class="muted"><input type="radio" name="titleMode" id="modeManual"> Tự đặt</label>
            </div>
            <input id="pageTitle" class="title-input" type="text" placeholder="Tiêu đề Confluence page" style="display:none">
          </div>
        </div>
        
        <!-- Output Actions -->
        <div class="output-actions">
          <div class="output-actions-left">
            <button id="btnCopy" class="btn line"><i class="fa-solid fa-copy"></i> Copy log</button>
          </div>
          <div class="output-actions-right">
            <button id="btnCreate" class="btn primary" disabled><i class="fa-solid fa-file-circle-plus"></i> Tạo page Confluence</button>
          </div>
        </div>
        
        <!-- Output Area -->
        <div class="confluence-output">
          <textarea id="out" placeholder="Thông báo tiến trình sẽ hiển thị ở đây..." readonly></textarea>
          <pre id="log" class="status" style="display:none"></pre>
          
          <div id="pageLinkContainer" class="panel" style="display:none; padding:12px;">
            <div class="row" style="justify-content:space-between;width:100%">
              <span><i class="fa-solid fa-circle-check" style="color:var(--primary)"></i> Page Confluence đã được tạo thành công!</span>
              <a id="pageLink" href="#" target="_blank" class="btn ghost">
                <i class="fas fa-external-link-alt"></i> Mở page
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- Trạng thái (Data mapping) -->
      <div class="panel" style="grid-column: span 6">
        <h3><i class="fa-solid fa-file-lines"></i> Trạng thái</h3>
        <div class="data-mapping">
          <h4>Bản đồ dữ liệu (chỉnh trước khi tạo Confluence):</h4>
          <div class="field-item">
            <div class="field-name">master_plan:</div>
            <div class="field-value">
              <textarea id="edit-master-plan" class="field-textarea" onchange="updateLLMJsonField('master_plan', this.value)"></textarea>
              <div class="field-actions">
                <button class="btn small line" onclick="addBulletPoint('edit-master-plan')"><i class="fa-solid fa-list-ul"></i> Thêm gạch đầu dòng</button>
              </div>
            </div>
          </div>
          <div class="field-item">
            <div class="field-name">progress_report:</div>
            <div class="field-value">
              <textarea id="edit-progress-report" class="field-textarea" onchange="updateLLMJsonField('progress_report', this.value)"></textarea>
              <div class="field-actions">
                <button class="btn small line" onclick="addBulletPoint('edit-progress-report')"><i class="fa-solid fa-list-ul"></i> Thêm gạch đầu dòng</button>
              </div>
            </div>
          </div>
          <div class="field-item">
            <div class="field-name">assessment:</div>
            <div class="field-value">
              <select id="edit-assessment" class="field-select" onchange="updateLLMJsonField('assessment', this.value)">
                <option value="Đúng tiến độ">Đúng tiến độ</option>
                <option value="Chậm tiến độ">Chậm tiến độ</option>
              </select>
            </div>
          </div>
          <div class="field-item">
            <div class="field-name">next_plan:</div>
            <div class="field-value">
              <textarea id="edit-next-plan" class="field-textarea" onchange="updateLLMJsonField('next_plan', this.value)"></textarea>
              <div class="field-actions">
                <button class="btn small line" onclick="addBulletPoint('edit-next-plan')"><i class="fa-solid fa-list-ul"></i> Thêm gạch đầu dòng</button>
              </div>
            </div>
          </div>
          <div class="field-item">
            <div class="field-name">challenges:</div>
            <div class="field-value">
              <textarea id="edit-challenges" class="field-textarea" onchange="updateLLMJsonField('challenges', this.value)"></textarea>
              <div class="field-actions">
                <button class="btn small line" onclick="addBulletPoint('edit-challenges')"><i class="fa-solid fa-list-ul"></i> Thêm gạch đầu dòng</button>
              </div>
            </div>
          </div>
          <div class="field-item">
            <div class="field-name">proposals:</div>
            <div class="field-value">
              <textarea id="edit-proposals" class="field-textarea" onchange="updateLLMJsonField('proposals', this.value)"></textarea>
              <div class="field-actions">
                <button class="btn small line" onclick="addBulletPoint('edit-proposals')"><i class="fa-solid fa-list-ul"></i> Thêm gạch đầu dòng</button>
              </div>
            </div>
          </div>
          <div class="field-item">
            <div class="field-name">notes:</div>
            <div class="field-value">
              <textarea id="edit-notes" class="field-textarea" onchange="updateLLMJsonField('notes', this.value)"></textarea>
              <div class="field-actions">
                <button class="btn small line" onclick="addBulletPoint('edit-notes')"><i class="fa-solid fa-list-ul"></i> Thêm gạch đầu dòng</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Tabs: Jira -->
    <section class="grid" style="margin-top:20px">
      <div class="panel" style="grid-column: 1 / -1">
        <div class="tab-container">
          <div class="tab-buttons">
            <button class="tab-button active" data-tab="jira">Tạo ticket Jira</button>
          </div>

          <!-- Tab: Jira -->
          <div id="jira-tab" class="tab-content active">
            <div class="row" style="justify-content:space-between;align-items:center;margin-bottom:10px">
              <h3 style="margin:0">Tạo ticket Jira</h3>
              <div class="row">
                <button id="btnAddTicket" class="btn primary"><i class="fa-solid fa-plus"></i> Thêm ticket</button>
                <button id="btnCreateJira" class="btn ghost" disabled><i class="fa-solid fa-paper-plane"></i> Tạo tất cả tickets</button>
              </div>
            </div>
            <div class="ticket-form">
              <div id="ticketList" class="ticket-list"></div>
              <div id="ticketResult" class="ticket-result"></div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <footer class="footer">© 2025 BIDV — Công cụ AI cho PMO</footer>

<script>
(function(){
  var $=id=>document.getElementById(id);
  var drop=$('drop'), input=$('file'), bar=$('bar'), out=$('out'), log=$('log'), state=$('state');
  var btnUpload=$('btnUpload'), btnCancel=$('btnCancel'), btnCopy=$('btnCopy'), sel=$('sel'), spin=$('spin'), btnCreate=$('btnCreate');
  var modeAuto=$('modeAuto'), modeManual=$('modeManual'), pageTitleEl=$('pageTitle');
  
  // New elements for space, parent ID, and template
  var spaceSelect=$('spaceSelect');
  var parentIdInput=$('parentIdInput');
  var templateSelect=$('templateSelect');
  
  // Email upload elements
  var emailDrop=$('emailDrop'), emailInput=$('emailImage'), emailSel=$('emailSel');
  var emailPasteArea=$('emailPasteArea'), emailPreview=$('emailPreview');
  var emailImgPreview=$('emailImgPreview'), emailStatus=$('emailStatus');
  var btnRemoveImage=$('btnRemoveImage'), btnProcessImage=$('btnProcessImage');
  
  // OCR results elements
  var btnExtractEmails=$('btnExtractEmails'), btnGetJiraIds=$('btnGetJiraIds');
  var ocrEmails=$('ocrEmails'), ocrJiraIds=$('ocrJiraIds');
  
  var currentFile=null, uploadXhr=null, transcribeAbort=null, lastLLMJson=null, lastTranscriptUrl=null, lastGrokResponse=null, lastPreviewHtml=null, lastPageUrl=null;
  var tickets = [];
  var emailImageKey = null; // Lưu object key trên R2
  var emailImageBlob = null; // Blob gốc của ảnh (từ paste/drag/file)
  var isUploadingEmailImage = false; // Trạng thái upload ảnh để tránh upload 2 lần

  // Header tabs
  var tabButtons = document.querySelectorAll('.tab-button');
  var tabContents = document.querySelectorAll('.tab-content');
  tabButtons.forEach(button => {
    button.addEventListener('click', () => {
      var tabId = button.getAttribute('data-tab');
      tabButtons.forEach(btn => btn.classList.remove('active'));
      tabContents.forEach(content => content.classList.remove('active'));
      button.classList.add('active');
      document.getElementById(tabId + '-tab').classList.add('active');
    });
  });

  // Toggle hiển thị ô tiêu đề
  function syncTitleInput(){
    if(modeManual.checked){
      pageTitleEl.style.display='';
      if(!pageTitleEl.value) pageTitleEl.value='BÁO CÁO TIẾN ĐỘ DỰ ÁN';
    }else{
      pageTitleEl.style.display='none';
    }
  }
  modeAuto.addEventListener('change', syncTitleInput);
  modeManual.addEventListener('change', syncTitleInput);
  syncTitleInput();

  function setState(s){ state.textContent=s; }
  function setProgress(p){ bar.style.width=(p*100).toFixed(1)+'%'; }
  function logJson(o){ log.textContent=JSON.stringify(o,null,2); }

  function addBulletPoint(textareaId) {
    const textarea = $(textareaId);
    if (!textarea) return;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = textarea.value;
    const beforeText = text.substring(0, start);
    const afterText = text.substring(end);
    const newLine = (beforeText.length > 0 && !beforeText.endsWith('\\n')) ? '\\n' : '';
    const bulletPoint = newLine + '- ';
    textarea.value = beforeText + bulletPoint + afterText;
    const newPosition = start + bulletPoint.length;
    textarea.setSelectionRange(newPosition, newPosition);
    textarea.focus();
    const event = new Event('change', { bubbles: true });
    textarea.dispatchEvent(event);
  }

  function updateDataDisplay(data) {
    if (!data) return;
    const updateField = (fieldId, value) => {
      const element = $(fieldId);
      if (!element) return;
      element.value = value || '';
    };
    updateField('edit-master-plan', data.master_plan);
    updateField('edit-progress-report', data.progress_report);
    updateField('edit-assessment', data.assessment || 'Đúng tiến độ');
    updateField('edit-next-plan', data.next_plan);
    updateField('edit-challenges', data.challenges);
    updateField('edit-proposals', data.proposals);
    updateField('edit-notes', data.notes);
    updateJiraOptions(data);
  }

  function updateLLMJsonField(field, value) {
    if (!lastLLMJson) {
      lastLLMJson = {
        master_plan: "",
        progress_report: "",
        assessment: "Đúng tiến độ",
        next_plan: "",
        challenges: "",
        proposals: "",
        notes: ""
      };
    }
    lastLLMJson[field] = value;
  }

  function updateJiraOptions(data) {
    if (!data) return;
    const options = [];
    if (data.master_plan) options.push({ value: data.master_plan, text: "Master Plan: " + (data.master_plan.length > 50 ? data.master_plan.substring(0, 50) + "..." : data.master_plan) });
    if (data.progress_report) options.push({ value: data.progress_report, text: "Progress Report: " + (data.progress_report.length > 50 ? data.progress_report.substring(0, 50) + "..." : data.progress_report) });
    if (data.next_plan) options.push({ value: data.next_plan, text: "Next Plan: " + (data.next_plan.length > 50 ? data.next_plan.substring(0, 50) + "..." : data.next_plan) });
    if (data.challenges) options.push({ value: data.challenges, text: "Challenges: " + (data.challenges.length > 50 ? data.challenges.substring(0, 50) + "..." : data.challenges) });
    if (data.proposals) options.push({ value: data.proposals, text: "Proposals: " + (data.proposals.length > 50 ? data.proposals.substring(0, 50) + "..." : data.proposals) });
    window.jiraOptions = options;
  }

  function addTicket() {
    const ticketId = 'ticket-' + Date.now();
    const ticket = { id: ticketId, summary: '', description: '', issueType: 'Task', priority: 'Medium' };
    tickets.push(ticket);
    renderTicket(ticket);
    updateCreateButton();
  }

  function renderTicket(ticket) {
    const ticketList = $('ticketList');
    const ticketItem = document.createElement('div');
    ticketItem.className = 'ticket-item';
    ticketItem.id = ticket.id;

    let optionsHtml = '';
    if (window.jiraOptions && window.jiraOptions.length > 0) {
      optionsHtml = '<option value="">-- Chọn từ dữ liệu --</option>';
      window.jiraOptions.forEach(option => {
        optionsHtml += \`<option value="\${escapeHtml(option.value)}">\${escapeHtml(option.text)}</option>\`;
      });
    }

    ticketItem.innerHTML = \`
      <div class="ticket-item-header">
        <h5>Ticket \${tickets.indexOf(ticket) + 1}</h5>
        <button type="button" class="btn line" onclick="removeTicket('\${ticket.id}')"><i class="fa-solid fa-trash"></i> Xóa</button>
      </div>
      <div class="ticket-row">
        <label>Summary:</label>
        <select id="\${ticket.id}-summary-select" onchange="updateSummaryFromSelect('\${ticket.id}')">
          \${optionsHtml}
        </select>
      </div>
      <div class="ticket-row">
        <label>Hoặc nhập:</label>
        <input type="text" id="\${ticket.id}-summary" placeholder="Nhập summary cho ticket" value="\${escapeHtml(ticket.summary)}" onchange="updateTicketField('\${ticket.id}', 'summary', this.value)">
      </div>
      <div class="ticket-row">
        <label>Description:</label>
        <textarea id="\${ticket.id}-description" placeholder="Nhập description cho ticket" onchange="updateTicketField('\${ticket.id}', 'description', this.value)">\${escapeHtml(ticket.description)}</textarea>
      </div>
      <div class="ticket-row">
        <label>Issue Type:</label>
        <select id="\${ticket.id}-issueType" onchange="updateTicketField('\${ticket.id}', 'issueType', this.value)">
          <option value="Task" \${ticket.issueType === 'Task' ? 'selected' : ''}>Task</option>
          <option value="Bug" \${ticket.issueType === 'Bug' ? 'selected' : ''}>Bug</option>
          <option value="Story" \${ticket.issueType === 'Story' ? 'selected' : ''}>Story</option>
          <option value="Improvement" \${ticket.issueType === 'Improvement' ? 'selected' : ''}>Improvement</option>
        </select>
      </div>
      <div class="ticket-row">
        <label>Priority:</label>
        <select id="\${ticket.id}-priority" onchange="updateTicketField('\${ticket.id}', 'priority', this.value)">
          <option value="Lowest" \${ticket.priority === 'Lowest' ? 'selected' : ''}>Lowest</option>
          <option value="Low" \${ticket.priority === 'Low' ? 'selected' : ''}>Low</option>
          <option value="Medium" \${ticket.priority === 'Medium' ? 'selected' : ''}>Medium</option>
          <option value="High" \${ticket.priority === 'High' ? 'selected' : ''}>High</option>
          <option value="Highest" \${ticket.priority === 'Highest' ? 'selected' : ''}>Highest</option>
        </select>
      </div>
    \`;

    ticketList.appendChild(ticketItem);
  }

  function removeTicket(ticketId) {
    tickets = tickets.filter(t => t.id !== ticketId);
    const ticketElement = $(ticketId);
    if (ticketElement) ticketElement.remove();
    updateCreateButton();
  }

  function updateTicketField(ticketId, field, value) {
    const ticket = tickets.find(t => t.id === ticketId);
    if (ticket) ticket[field] = value;
    updateCreateButton();
  }

  function updateSummaryFromSelect(ticketId) {
    const select = \$(ticketId + '-summary-select');
    const summaryInput = \$(ticketId + '-summary');
    if (select && summaryInput) {
      summaryInput.value = select.value;
      updateTicketField(ticketId, 'summary', select.value);
    }
  }

  function updateCreateButton() {
    const btnCreateJira = $('btnCreateJira');
    if (btnCreateJira) {
      btnCreateJira.disabled = tickets.length === 0 || tickets.some(t => !t.summary);
    }
  }

  function showTicketResults(results) {
    const resultContainer = $('ticketResult');
    if (!resultContainer) return;

    let html = '<h4>Kết quả tạo ticket:</h4>';
    results.forEach(result => {
      if (result.ok) {
        html += \`
          <div class="row" style="justify-content:space-between;align-items:center;background:#fff;border:1px solid var(--line);border-radius:10px;padding:10px;margin-bottom:8px">
            <div><strong>\${result.key}</strong>: <a href="\${result.url}" target="_blank">\${escapeHtml(result.url)}</a></div>
            <a href="\${result.url}" target="_blank" class="btn ghost"><i class="fa-solid fa-up-right-from-square"></i> Mở</a>
          </div>\`;
      } else {
        html += \`
          <div class="row" style="align-items:center;background:#fff;border:1px solid var(--line);border-radius:10px;padding:10px;margin-bottom:8px">
            <div><strong>Lỗi:</strong> \${escapeHtml(result.error)}</div>
          </div>\`;
      }
    });

    resultContainer.innerHTML = html;
    resultContainer.style.display = 'block';
    resultContainer.className = 'ticket-result ' + (results.every(r => r.ok) ? 'success' : 'error');
  }

  function escapeHtml(text) {
    const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
    return String(text).replace(/[&<>"']/g, m => map[m]);
  }

  // File select / drag drop for audio
  input.addEventListener('change', function(){
    currentFile = input.files && input.files.length > 0 ? input.files[0] : null;
    sel.textContent=currentFile ? (currentFile.name+' — '+(currentFile.size/1048576).toFixed(2)+' MB') : 'Chưa chọn tệp';
  });
  ['dragover','dragenter'].forEach(ev=>drop.addEventListener(ev, e=>{
    e.preventDefault(); drop.classList.add('dragover');
  }));
  ['dragleave','drop'].forEach(ev=>drop.addEventListener(ev, e=>{
    e.preventDefault(); drop.classList.remove('dragover');
  }));
  drop.addEventListener('drop', e=>{
    e.preventDefault(); 
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      input.files = e.dataTransfer.files;
      currentFile = e.dataTransfer.files[0];
      sel.textContent=currentFile ? (currentFile.name+' — '+(currentFile.size/1048576).toFixed(2)+' MB') : 'Chưa chọn tệp';
    }
  });

  // Email image handling - drag and drop
  ['dragover','dragenter'].forEach(ev=>emailDrop.addEventListener(ev, e=>{
    e.preventDefault(); emailDrop.classList.add('dragover');
  }));
  ['dragleave','drop'].forEach(ev=>emailDrop.addEventListener(ev, e=>{
    e.preventDefault(); emailDrop.classList.remove('dragover');
  }));
  emailDrop.addEventListener('drop', e=>{
    e.preventDefault(); 
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      handleImageFile(e.dataTransfer.files[0]);
    }
  });
  
  // Email image handling - paste
  document.addEventListener('paste', function(e) {
    const items = e.clipboardData.items;
    for (let i = 0; i < items.length; i++) {
      if (items[i].type.indexOf('image') !== -1) {
        const blob = items[i].getAsFile();
        handleImageFile(blob);
        e.preventDefault();
        return;
      }
    }
  });
  
  // Email image handling - click to open file dialog (enabled)
emailPasteArea.addEventListener('click', function() {
  emailInput.click();
});
// Also allow clicking anywhere inside drop zone
emailDrop.addEventListener('click', function(e){
  // ignore clicks on preview area (when image already present)
  if (emailPreview && emailPreview.style.display === 'block') return;
  emailInput.click();
});
emailPasteArea.addEventListener('click', function() {
  emailInput.click();
});  
  
  // Keyboard support for opening file dialog
  emailPasteArea.addEventListener('keydown', function(e){
    if(e.key === 'Enter' || e.key === ' '){ e.preventDefault(); emailInput.click(); }
  });
emailInput.addEventListener('change', function() {
    if (emailInput.files && emailInput.files.length > 0) {
      handleImageFile(emailInput.files[0]);
    }
  });
  
  // Handle image file
  function handleImageFile(file) {
    if (!file.type.match('image.*')) {
      showEmailStatus('Vui lòng chọn file ảnh', 'error');
      return;
    }
    
    const reader = new FileReader();
    reader.onload = function(e) {
      emailImgPreview.src = e.target.result;
      emailPreview.style.display = 'block';
      emailPasteArea.classList.add('has-image');
      emailDrop.classList.add('has-image');
      showEmailStatus('', '');
      
      // Reset OCR results
      ocrEmails.value = '';
      ocrJiraIds.value = '';
      btnExtractEmails.disabled = false;
      btnGetJiraIds.disabled = true;
      emailImageUrl = null;
      emailImageKey = null;
      emailImageBlob = file;
    };
    reader.readAsDataURL(file);
  }
  
  // Remove image
  btnRemoveImage.addEventListener('click', function() {
    emailInput.value = '';
    emailPreview.style.display = 'none';
    emailPasteArea.classList.remove('has-image');
    emailDrop.classList.remove('has-image');
    showEmailStatus('', '');
    
    // Reset OCR results
    ocrEmails.value = '';
    ocrJiraIds.value = '';
    btnExtractEmails.disabled = true;
    btnGetJiraIds.disabled = true;
    emailImageUrl = null;
      emailImageKey = null;
      emailImageBlob = file;
  });
  
  // Process image - Upload to R2
  btnProcessImage.addEventListener('click', async function () {
    if (!emailImgPreview.src) {
      showEmailStatus('Vui lòng chọn ảnh trước', 'error');
      return;
    }

    try {
      isUploadingEmailImage = true;
      btnProcessImage.disabled = true;
      btnExtractEmails.disabled = true;
      showEmailStatus('Đang upload ảnh lên R2…', 'processing');

      // Lấy blob từ ảnh preview (data URL)
      const resp = await fetch(emailImgPreview.src);
      if (!resp.ok) throw new Error('Không thể đọc dữ liệu ảnh');
      const blob = await resp.blob();

      // Tạo key + đuôi mở rộng
      let ext = '.png';
      const mt = (blob.type || '').toLowerCase();
      if (mt.includes('jpeg') || mt.includes('jpg')) ext = '.jpg';
      else if (mt.includes('webp')) ext = '.webp';
      else if (mt.includes('png')) ext = '.png';

      let key = (crypto.randomUUID ? crypto.randomUUID() : String(Date.now())) + ext;

      // Ký URL PUT giống audio
      const signed = await fetch('/sign-put', {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ key })
      }).then(r => r.json());

      if (!signed.url) throw new Error('Không tạo được URL upload');

      // Upload bằng XHR để có onprogress (như audio)
      await new Promise((res, rej) => {
        const xhr = new XMLHttpRequest();
        xhr.open('PUT', signed.url, true);
        xhr.upload.onprogress = e => { /* có thể hiển thị progress nếu muốn */ };
        xhr.onload = () => (xhr.status >= 200 && xhr.status < 300) ? res() : rej(new Error('Upload failed: ' + xhr.status));
        xhr.onerror = () => rej(new Error('Upload error'));
        xhr.send(blob);
      });

      // Lưu key để server tự ghép public URL
      emailImageKey = key;
      emailImageUrl = null;
      emailImageBlob = null; // giữ lại key để OCR dùng

      showEmailStatus('Ảnh đã upload xong!', 'success');
      btnExtractEmails.disabled = false;
      btnProcessImage.disabled = false;
    } catch (e) {
      showEmailStatus('Lỗi upload: ' + String(e), 'error');
      console.error('Upload error:', e);
      btnProcessImage.disabled = false;
    }
  });

  btnExtractEmails.addEventListener('click', async function() {
    if (isUploadingEmailImage) { showEmailStatus('Đang upload ảnh, vui lòng đợi...', 'processing'); return; }
    btnExtractEmails.disabled = true;
    try {
        // 1) Nếu chưa có key/url thì tự upload ảnh
        if (!(emailImageUrl || emailImageKey)) {
            let blob = emailImageBlob;
            if (!blob) {
                if (!emailImgPreview || !emailImgPreview.src) {
                    showEmailStatus('Chưa có ảnh – dán/kéo thả ảnh vào khung trên', 'error');
                    return;
                }
                const resp = await fetch(emailImgPreview.src);
                if (!resp.ok) throw new Error('Không đọc được ảnh từ preview');
                blob = await resp.blob();
            }
            showEmailStatus('Đang upload ảnh lên R2…', 'processing');

            let ext = '.png';
            const mt = (blob.type || '').toLowerCase();
            if (mt.includes('jpeg') || mt.includes('jpg')) ext = '.jpg';
            else if (mt.includes('webp')) ext = '.webp';
            else if (mt.includes('png')) ext = '.png';

            const key = (crypto.randomUUID ? crypto.randomUUID() : String(Date.now())) + ext;

            const signed = await fetch('/sign-put', {
                method: 'POST',
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify({ key })
            }).then(r => r.json());

            if (!signed.url) throw new Error('Không tạo được URL upload');

            await new Promise((res, rej) => {
                const xhr = new XMLHttpRequest();
                xhr.open('PUT', signed.url, true);
                xhr.onload = () => (xhr.status >= 200 && xhr.status < 300) ? res() : rej(new Error('Upload failed: ' + xhr.status));
                xhr.onerror = () => rej(new Error('Upload error'));
                xhr.send(blob);
            });

            emailImageKey = key;
        }

        // 2) Gọi OCR với model hỗ trợ ảnh
        showEmailStatus('Đang trích xuất email...', 'processing');
        
        // Chuẩn bị request body
        const requestBody = {
            ...(emailImageUrl ? { imageUrl: emailImageUrl } : { imageKey: emailImageKey }),
            model: 'grok-4-fast-non-reasoning' // THÊM MODEL HỖ TRỢ ẢNH
        };
        
        console.log('OCR Request:', requestBody); // Debug log
        
        const response = await fetch('/ocr-extract', {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('OCR Error:', errorText); // Debug log
            throw new Error('Lỗi API: ' + response.status + ' - ' + errorText);
        }
        
        const result = await response.json();
        console.log('OCR Result:', result); // Debug log
        
        if (!result.ok) throw new Error(result.error || 'OCR thất bại');

        // 3) Chuẩn hoá email list
        let emails = (result.emails || '').trim();
        if (!emails || emails === '[]') {
            const text = String(result.text || '');
            const found = (text.match(/[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi) || [])
                          .map(s => s.trim().toLowerCase());
            emails = Array.from(new Set(found)).join('; ');
        } else {
            const raw = emails.replace(/[,\\n]+/g, ';').split(';').map(x => x.trim()).filter(Boolean);
            emails = Array.from(new Set(raw.map(x => x.toLowerCase()))).join('; ');
        }

        ocrEmails.value = emails;
        btnGetJiraIds.disabled = !emails;
        if (!emails) showEmailStatus('Không tìm thấy địa chỉ email trong ảnh', 'error');
        else showEmailStatus('Trích xuất thành công!', 'success');
    } catch (e) {
        showEmailStatus('Lỗi: ' + String(e?.message || e), 'error');
        console.error('OCR error:', e);
    }
});
 
  // Get Jira Account IDs
  btnGetJiraIds.addEventListener('click', async function() {
    const emails = ocrEmails.value.trim();
    if (!emails) {
      showEmailStatus('Không có email để xử lý', 'error');
      return;
    }
    
    try {
      showEmailStatus('Đang lấy Jira Account IDs...', 'processing');
      
      // Split emails by semicolon
      const emailList = emails.split(';').map(e => e.trim()).filter(e => e);
      
      // Get Jira Account IDs for each email
      const jiraIds = [];
      for (const email of emailList) {
        try {
          const response = await fetch('/jira-get-account-id', {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({ email })
          });
          
          if (!response.ok) {
            throw new Error('Lỗi API Jira: ' + response.status);
          }
          
          const result = await response.json();
          
          if (result.ok && result.accountId) {
            jiraIds.push(\`\${email}:\${result.accountId}\`);
          } else {
            jiraIds.push(\`\${email}:Not Found\`);
          }
        } catch (e) {
          jiraIds.push(\`\${email}:Error - \${String(e)}\`);
        }
      }
      
      ocrJiraIds.value = jiraIds.join(';');
      showEmailStatus('Hoàn tất!', 'success');
    } catch (e) {
      showEmailStatus('Lỗi: ' + String(e), 'error');
      console.error('Jira API error:', e);
    }
  });
  
  function showEmailStatus(message, type) {
    emailStatus.textContent = message;
    emailStatus.className = 'email-status';
    
    if (message) {
      // Remove all existing type classes
      emailStatus.classList.remove('success', 'error', 'processing');
      
      // Add the new type class if provided
      if (type) {
        emailStatus.classList.add(type);
      }
      
      emailStatus.style.display = 'block';
    } else {
      emailStatus.style.display = 'none';
    }
  }

  $('btnCopy').addEventListener('click', ()=>{ navigator.clipboard.writeText(out.value).then(()=>{btnCopy.textContent='Đã copy'; setTimeout(()=>btnCopy.textContent='Copy log',1200);}); });
  $('btnCancel').addEventListener('click', ()=>{ if(uploadXhr) uploadXhr.abort(); if(transcribeAbort) transcribeAbort.abort(); spin.style.display='none'; setState('Đã hủy'); });

  $('btnUpload').addEventListener('click', async function(){
    if((!currentFile || !currentFile.name) && (!input.files || input.files.length === 0)){ 
      alert('Chọn một tệp audio trước đã'); 
      return; 
    }
    if(!currentFile && input.files && input.files.length > 0) currentFile = input.files[0];

    try{
      btnCreate.disabled=true; lastLLMJson=null; lastTranscriptUrl=null; lastGrokResponse=null; lastPreviewHtml=null; lastPageUrl=null;
      setProgress(0); out.value=''; log.textContent=''; 
      $('pageLinkContainer').style.display='none'; $('ticketResult').style.display='none';
      setState('Ký URL upload...'); spin.style.display='none';
      var key=(crypto.randomUUID?crypto.randomUUID():String(Date.now()));
      var m=(currentFile.name||'').match(/\\.[a-z0-9]+$/i); key+= m? m[0] : '.mp3';

      var signed=await fetch('/sign-put',{method:'POST',headers:{'content-type':'application/json'},body:JSON.stringify({key})}).then(r=>r.json());
      if(!signed.url) throw new Error('Không tạo được URL upload');

      setState('Đang upload lên R2...');
      await new Promise((res,rej)=>{
        var xhr=new XMLHttpRequest(); uploadXhr=xhr;
        xhr.open('PUT', signed.url, true);
        xhr.upload.onprogress=e=>{ if(e.lengthComputable) setProgress(e.loaded/e.total); };
        xhr.onload=function(){ uploadXhr=null; (xhr.status>=200 && xhr.status<300)? res() : rej(new Error('Upload failed: '+xhr.status)); };
        xhr.onerror=function(){ uploadXhr=null; rej(new Error('Upload error')); };
        xhr.onabort=function(){ uploadXhr=null; rej(new Error('Upload aborted')); };
        xhr.send(currentFile);
      });

      setState('Đang xử lý...'); spin.style.display='inline-block'; out.value='Đang xử lý...';
      var ac=new AbortController(); transcribeAbort=ac;
      var result=await fetch('/transcribe',{method:'POST',headers:{'content-type':'application/json'},body:JSON.stringify({key}),signal:ac.signal}).then(r=>r.json()).catch(()=>({ok:false}));
      transcribeAbort=null; spin.style.display='none';

      if(result.ok && result.llmJson){
        lastLLMJson=result.llmJson; lastTranscriptUrl=result.transcriptUrl||null; lastGrokResponse=result.grokResponse||null; lastPreviewHtml=result.previewHtml||null;
        out.value=['✅ Hoàn tất!','- Deepgram: OK','- Lưu transcript lên R2: OK','- Grok 3 Mini: OK','','Transcript URL: '+(result.transcriptUrl||'(n/a)')].join('\\n');
        logJson({steps:result.steps, llmJson:result.llmJson});
        if (lastLLMJson) updateDataDisplay(lastLLMJson);
        setState('Xong — có thể tạo page Confluence'); btnCreate.disabled=false;
      } else {
        setState('Tạo page thất bại');
        out.value = '❌ Lỗi pipeline\\n- Bước lỗi: '+(result.step||'unknown')+'\\n- Thông báo: '+(result.error||'Unknown')+'\\n\\nChi tiết steps:\\n'+JSON.stringify(result.steps||{},null,2);
        btnCreate.disabled=true;
      }
    }catch(e){ spin.style.display='none'; setState('Lỗi'); logJson({ error:String(e) }); }
  });

  $('btnCreate').addEventListener('click', async function(){
    if(!lastLLMJson){ alert('Chưa có dữ liệu để tạo page.'); return; }
    const strategy = modeManual.checked ? 'manual' : 'autonumber';
    const titleVal = modeManual.checked ? (pageTitleEl.value || '').trim() : '';
    const spaceKey = spaceSelect ? spaceSelect.value : 'AIG';
    const parentId = parentIdInput ? parentIdInput.value.trim() : '';
    const template = templateSelect ? templateSelect.value : 'mom';

    if (strategy === 'manual' && !titleVal) { alert('Vui lòng nhập tiêu đề Confluence page'); return; }

    try{
      setState('Đang tạo page Confluence...'); spin.style.display='inline-block';
      const editedData = {
        master_plan: $('edit-master-plan').value,
        progress_report: $('edit-progress-report').value,
        assessment: $('edit-assessment').value,
        next_plan: $('edit-next-plan').value,
        challenges: $('edit-challenges').value,
        proposals: $('edit-proposals').value,
        notes: $('edit-notes').value
      };
      lastLLMJson = editedData;

      var resp = await fetch('/create-confluence', { 
        method:'POST', 
        headers:{'content-type':'application/json'}, 
        body: JSON.stringify({ 
          llmJson: lastLLMJson, 
          transcriptUrl: lastTranscriptUrl,
          titleStrategy: strategy,
          title: titleVal,
          spaceKey: spaceKey,
          parentId: parentId || null,
          template: template
        }) 
      }).then(r=>r.json());

      spin.style.display='none';
      if(resp.ok){ 
        setState('Đã tạo page'); 
        out.value += '\\n\\nConfluence page: ' + (resp.pageUrl||'(đã tạo)') + (resp.title ? ('\\nTiêu đề: ' + resp.title) : '');
        if (resp.pageUrl) {
          lastPageUrl = resp.pageUrl;
          $('pageLink').href = resp.pageUrl;
          $('pageLinkContainer').style.display = 'block';
        }
      }
      else{ setState('Tạo page thất bại'); out.value += '\\n\\n❌ ' + (resp.error||'Confluence error'); }
    }catch(e){ spin.style.display='none'; setState('Lỗi'); out.value += '\\n\\n❌ ' + String(e); }
  });

  $('btnAddTicket').addEventListener('click', () => { addTicket(); });

  $('btnCreateJira').addEventListener('click', async () => {
    if (tickets.length === 0) { alert('Vui lòng thêm ít nhất một ticket'); return; }
    if (tickets.some(t => !t.summary)) { alert('Vui lòng nhập summary cho tất cả các tickets'); return; }
    try {
      setState('Đang tạo tickets Jira...'); 
      spin.style.display = 'inline-block';
      const resp = await fetch('/create-jira-ticket', {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ tickets })
      }).then(r => r.json());
      spin.style.display = 'none';
      if (resp.ok) {
        setState('Đã tạo tickets Jira');
        showTicketResults(resp.results);
        tickets = [];
        $('ticketList').innerHTML = '';
        updateCreateButton();
      } else {
        setState('Tạo tickets Jira thất bại');
        showTicketResults([{ ok: false, error: resp.error || 'Unknown error' }]);
      }
    } catch (e) {
      spin.style.display = 'none';
      setState('Lỗi');
      showTicketResults([{ ok: false, error: String(e) }]);
    }
  });

  window.removeTicket = removeTicket;
  window.updateTicketField = updateTicketField;
  window.updateSummaryFromSelect = updateSummaryFromSelect;
  window.updateLLMJsonField = updateLLMJsonField;
  window.addBulletPoint = addBulletPoint;
})();
</script>
</body>
</html>`;
}

function riskRadarHTML() {
  return `<!doctype html>
<html lang="vi"><head>
<meta charset="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>AI Risk Management - BIDV PMO</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
:root{--primary:#009639;--primary-600:#006b2a;--bg:#F4F5F7;--card:#fff;--muted:#6B778C;--radius:14px}
html,body{margin:0;padding:0;background:var(--bg);font:16px/1.45 Inter,system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}
a.back{display:inline-block;margin:24px;text-decoration:none;color:var(--primary);font-weight:600}
.container{max-width:1200px;margin:0 auto;padding:0 16px 32px}
.title{font-size:32px;font-weight:800;margin:0;color:#172B4D}
.subtitle{color:var(--muted);margin:6px 0 24px}
.grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(360px,1fr));gap:20px}
.card{background:var(--card);border-radius:var(--radius);box-shadow:0 8px 20px rgba(0,0,0,.08);padding:18px}
.card h3{margin:0 0 10px;font-size:18px;color:#172B4D;display:flex;align-items:center;gap:10px}
.kpi{display:grid;grid-template-columns:repeat(4,1fr);gap:12px}
.kpi .box{background:#F8FFF9;border:1px solid #E6F4EA;border-radius:10px;padding:12px}
.kpi .val{font-size:24px;font-weight:800;color:var(--primary)}
.badge{display:inline-block;padding:4px 10px;border-radius:999px;font-size:12px;font-weight:600}
.badge.red{background:#FFEBE6;color:#BF2600}
.badge.amber{background:#FFFAEB;color:#8F5E00}
.badge.green{background:#E3FCEF;color:#006644}
.table{width:100%;border-collapse:collapse;margin-top:8px}
.table th{background:#E6F4EA;color:#0b5a2b;text-align:left;padding:8px}
.table td{padding:8px;border-bottom:1px solid #f0f0f0}
.note{color:var(--muted);font-size:14px;margin-top:6px}
canvas{display:block;width:100%;height:320px}
</style>
</head>
<body>
  <a class="back" href="/">← Về menu PMO</a>
  <div class="container">
    <h1 class="title">AI Risk Management</h1>
    <p class="subtitle">Cảnh báo sớm các rủi ro về tiến độ, backlog và nguồn lực. Dữ liệu mẫu đã được tạo để minh hoạ.</p>

    <!-- KPI -->
    <div class="kpi">
      <div class="box">
        <div>Trễ hạn sprint</div>
        <div class="val">3</div>
        <span class="badge red">Cao</span>
      </div>
      <div class="box">
        <div>Ticket quá hạn</div>
        <div class="val">12</div>
        <span class="badge amber">Trung bình</span>
      </div>
      <div class="box">
        <div>Backlog tăng bất thường</div>
        <div class="val">+35%</div>
        <span class="badge red">Cảnh báo</span>
      </div>
      <div class="box">
        <div>Dự báo rủi ro (H/M/L)</div>
        <div class="val">4 / 7 / 12</div>
        <span class="badge amber">Theo 4 tuần</span>
      </div>
    </div>

    <div class="grid" style="margin-top:20px">
      <div class="card">
        <h3><i class="fas fa-chart-line"></i> Backlog size theo tuần</h3>
        <canvas id="backlogChart"></canvas>
        <div class="note">Đỉnh tăng bất thường tuần W-2 (thêm nhiều story mới).</div>
      </div>

      <div class="card">
        <h3><i class="fas fa-exclamation-triangle"></i> Phân bố mức độ rủi ro (4 tuần tới)</h3>
        <canvas id="riskPie"></canvas>
        <table class="table">
          <thead><tr><th>Mức độ</th><th>Số lượng</th><th>Nguyên nhân chính</th></tr></thead>
          <tbody>
            <tr><td>Cao</td><td>4</td><td>Scope thay đổi, phụ thuộc vendor</td></tr>
            <tr><td>Trung bình</td><td>7</td><td>Năng lực QA thiếu 1 FTE</td></tr>
            <tr><td>Thấp</td><td>12</td><td>Đợi phê duyệt URD nhỏ</td></tr>
          </tbody>
        </table>
      </div>

      <div class="card">
        <h3><i class="fas fa-bolt"></i> Ticket quá hạn theo sprint</h3>
        <canvas id="overdueChart"></canvas>
      </div>
      <div class="card" style="grid-column:1/-1">
      <h3><i class="fas fa-user-clock"></i> Cảnh báo Effort theo 3 nhân sự (6 tháng)</h3>
      <canvas id="effortChart"></canvas>
      <div class="note">Đường mảnh là ngưỡng 160h/tháng. Khi vượt ngưỡng nhiều tháng liên tiếp → cảnh báo quá tải.</div>
    </div>
    

      <div class="card" style="grid-column:1/-1">
        <h3><i class="fas fa-lightbulb"></i> Gợi ý hành động khắc phục</h3>
        <table class="table">
          <thead><tr><th>Rủi ro</th><th>Gợi ý xử lý</th><th>Chủ sở hữu</th></tr></thead>
          <tbody>
            <tr>
              <td>Backlog tăng +35% trong 2 tuần</td>
              <td>Freeze scope sprint hiện tại; họp grooming lại toàn bộ item mới; xếp ưu tiên theo WSJF.</td>
              <td>PO</td>
            </tr>
            <tr>
              <td>Thiếu QA 1 FTE</td>
              <td>Điều phối QA nội bộ tạm thời; xem xét thuê thời vụ 1 tháng; giảm WIP dev.</td>
              <td>PM</td>
            </tr>
            <tr>
              <td>Vendor bàn giao trễ</td>
              <td>Đàm phán mốc trung gian, áp SLA; tách phần có thể song song.</td>
              <td>PM/Vendor</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>

<script>
(function(){
  // ====== DỮ LIỆU MẪU ======
  const weeks = ['W-6','W-5','W-4','W-3','W-2','W-1','W'];
  const backlog = [92, 95, 97, 101, 136, 138, 140]; // spike ở W-2
  const overdueBySprint = { labels: ['S-19','S-20','S-21','S-22','S-23'], data: [4,6,5,8,12] };
  const riskDist = { high:4, medium:7, low:12 };
  const months = ['T1','T2','T3','T4','T5','T6'];
  const effort = {
    'Đoàn Nhật Tân':[158,164,172,168,162,170],
    'Trương Tùng Dương':[140,145,151,148,150,152],
    'Nguyễn Tiến Phong':[120,130,135,128,132,138]
  };

  // ====== CHARTS ======
  // Backlog line
  new Chart(document.getElementById('backlogChart'), {
    type: 'line',
    data: { labels: weeks, datasets: [{ label:'Backlog', data: backlog, tension: .3 }] },
    options: { plugins:{legend:{display:true}} }
  });

  // Risk pie
  new Chart(document.getElementById('riskPie'), {
    type: 'doughnut',
    data: { labels:['Cao','Trung bình','Thấp'], datasets:[{ data:[riskDist.high,riskDist.medium,riskDist.low] }] },
    options: { plugins:{legend:{position:'bottom'}} }
  });

  // Overdue by sprint
  new Chart(document.getElementById('overdueChart'), {
    type: 'bar',
    data: { labels: overdueBySprint.labels, datasets:[{ label:'Ticket quá hạn', data: overdueBySprint.data }] },
    options: { plugins:{legend:{display:false}}, scales:{ y:{ beginAtZero:true } } }
  });

  // Effort 3 users + ngưỡng
  const ds = Object.entries(effort).map(([name,vals])=>({label:name,data:vals,tension:.2}));
  const threshold = new Array(months.length).fill(160);
  ds.push({ label:'Ngưỡng 160h', data: threshold, borderDash:[6,6], pointRadius:0 });
  new Chart(document.getElementById('effortChart'), {
    type:'line',
    data:{ labels: months, datasets: ds },
    options:{ plugins:{legend:{position:'bottom'}}, scales:{ y:{ beginAtZero:true } } }
  });
})();
</script>
</body></html>`;
}

function chatBotHTML() {
  return `<!doctype html>
<html lang="vi">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>AI Chat Bot — PMO</title>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0"></script>
<style>
  /* ====== Tokens đồng bộ trang chủ ====== */
  :root{
    --bg:#f6f8fb;
    --card:#ffffff;
    --soft:#f1f5f9;
    --text:#111827;
    --muted:#6b7280;
    --line:#e5e7eb;
    --primary:#009639;
    --primary-600:#006b2a;
    --accent:#22c55e;
    --radius:16px;
    --shadow:0 10px 28px rgba(16,24,40,.10);
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{margin:0;background:var(--bg);color:var(--text);font:16px/1.6 "Inter",system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial}

  /* Header dính (giống home) */
  .top{position:sticky;top:0;z-index:10;background:rgba(255,255,255,.88);backdrop-filter:saturate(1.05) blur(10px);border-bottom:1px solid var(--line)}
  .top .row{max-width:1240px;margin:0 auto;padding:12px 20px;display:flex;align-items:center;justify-content:space-between;gap:12px}
  .brand{display:flex;align-items:center;gap:10px}
  .logo{width:42px;height:42px;border-radius:10px;background:#e7f6ee;display:grid;place-items:center;overflow:hidden}
  .logo img{max-width:100%;max-height:100%}
  .title{margin:0;font-size:18px;font-weight:800;letter-spacing:.2px}
  .nav{display:flex;gap:8px;flex-wrap:wrap}
  .nav a{padding:8px 12px;border-radius:10px;text-decoration:none;color:#0f172a;border:1px solid transparent}
  .nav a:hover{background:#f0fdf4;border-color:#dcfce7}

  .container{max-width:1240px;margin:0 auto;padding:22px 20px}

  /* Hero giống home */
  .hero{
    display:grid;grid-template-columns:1.1fr .9fr;gap:22px;
    background:
      radial-gradient(600px 220px at 10% -10%, #dcfce7 0%, transparent 60%),
      radial-gradient(600px 220px at 90% -20%, #e0f2fe 0%, transparent 60%),
      var(--card);
    border:1px solid var(--line);border-radius:22px;padding:22px;box-shadow:var(--shadow);
  }
  .hero h2{margin:0 0 8px;font-size:32px;letter-spacing:.2px}
  .hero p{margin:0;color:var(--muted)}
  .cta{margin-top:16px;display:flex;flex-wrap:wrap;gap:10px}
  .btn{appearance:none;border:0;border-radius:12px;padding:12px 16px;font-weight:800;cursor:pointer;display:inline-flex;gap:8px;align-items:center}
  .btn.primary{background:linear-gradient(90deg,var(--primary),var(--primary-600));color:#fff}
  .btn.ghost{background:#f8fafc;border:1px solid var(--line);color:#0f172a}
  .btn.ghost:hover{background:#eef2f7}
  .muted{color:var(--muted)}

  .hero-side{display:grid;grid-template-columns:1fr 1fr;gap:12px}
  .gcard{background:var(--card);border:1px solid var(--line);border-radius:14px;padding:14px;display:flex;gap:10px;align-items:flex-start}
  .gcard i{color:var(--primary)}
  .gtitle{font-weight:700}
  .gcard small{display:block;color:var(--muted)}

  /* Lưới chính: Sidebar + Chat */
  .chat-grid{display:grid;grid-template-columns:320px 1fr;gap:16px;margin-top:20px}
  .panel{background:var(--card);border:1px solid var(--line);border-radius:18px;padding:16px;box-shadow:var(--shadow)}
  .panel h3{margin:0 0 10px;font-size:16px;font-weight:800;color:#0f172a}
  .split{height:1px;background:var(--line);margin:12px 0}

  /* Sidebar */
  .sidebar-title{font-size:14px;font-weight:800;margin:8px 0;color:#0f172a}
  .sidebar-item{padding:10px;border-radius:12px;margin-bottom:8px;cursor:pointer;display:flex;align-items:center;gap:10px;border:1px solid var(--line);background:var(--soft)}
  .sidebar-item:hover{background:#eef2f7}
  .sidebar-icon{width:32px;height:32px;border-radius:8px;display:flex;align-items:center;justify-content:center;background:#fff;border:1px solid var(--line);color:var(--primary)}
  .select{width:100%;padding:10px;border:1px solid var(--line);border-radius:12px;background:#fff}

  /* Zalo card */
  .zalo-card{margin:12px 0;background:#fff;border:1px solid var(--line);border-radius:12px;padding:12px}
  .zalo-card h4{margin:0 0 8px;font-size:14px}
  .zalo-qr{width:100%;height:auto;border-radius:8px;border:1px solid var(--line)}
  .zalo-row{display:flex;gap:8px;margin-top:8px}
  .zalo-row select{flex:1;padding:10px;border:1px solid var(--line);border-radius:12px;background:#fff}
  .zalo-row button{padding:10px 12px;border-radius:12px;border:1px solid var(--line);background:#fff;cursor:pointer}
  .zalo-row button:hover{background:#f7fafc}

  /* Chat khu vực phải */
  .chat-card{display:flex;flex-direction:column;min-height:520px}
  .chat-messages{flex:1;overflow:auto;background:var(--soft);border-radius:12px;padding:16px}
  .message{margin-bottom:14px;display:flex;gap:12px}
  .message.user{flex-direction:row-reverse}
  .message-avatar{width:36px;height:36px;border-radius:10px;display:flex;align-items:center;justify-content:center;background:var(--primary);color:white;flex-shrink:0}
  .message.bot .message-avatar{background:#94a3b8}
  .message-content{max-width:70%;padding:12px 16px;border-radius:14px;background:#fff;border:1px solid var(--line)}
  .message.user .message-content{background:#E3F2FD;border-color:#bfdbfe}
  .message.bot .message-content{background:#F0F4FA;border-color:#e5e7eb}
  .message-time{font-size:12px;color:var(--muted);margin-top:4px}

  .message-form{margin-top:12px;display:flex;flex-direction:column;gap:12px}
  .input-container{display:flex;gap:10px}
  .message-input{flex:1;border:1px solid var(--line);border-radius:999px;padding:12px 18px;font-size:16px;background:#fff;outline:none}
  .send-button{width:48px;height:48px;border-radius:50%;background:linear-gradient(90deg,var(--primary),var(--primary-600));color:white;border:none;display:flex;align-items:center;justify-content:center;cursor:pointer}
  .send-button:disabled{background:#cbd5e1;cursor:not-allowed}

  /* Kết quả JQL + bảng + biểu đồ */
  .result-container{margin-top:12px;background:#fff;border:1px solid var(--line);border-radius:12px;padding:12px;display:none}
  .result-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}
  .result-title{font-weight:800}
  .result-actions{display:flex;gap:8px}
  .action-button{display:flex;align-items:center;gap:6px;padding:8px 12px;border-radius:10px;border:1px solid var(--line);background:white;cursor:pointer;font-size:14px}
  .action-button:hover{background:#f8fafc}
  .action-button.zalo{color:#0068FF}

  .jql-display{background:#f8fafc;border:1px solid var(--line);border-radius:10px;padding:10px;margin-bottom:10px;font-family:ui-monospace,Menlo,Consolas,monospace;font-size:14px;position:relative}
  .jql-display pre{margin:0;white-space:pre-wrap;word-break:break-word}
  .jql-copy{position:absolute;top:8px;right:8px;background:#fff;border:1px solid var(--line);border-radius:8px;padding:6px 10px;cursor:pointer;font-size:12px}
  .jql-copy:hover{background:#eef2f7}

  .table-container{overflow:auto;max-height:50vh}
  .result-table{width:100%;border-collapse:collapse}
  .result-table th{background:#E6F4EA;color:#0b5a2b;text-align:left;padding:10px;font-weight:700;font-size:14px}
  .result-table td{padding:10px;border-bottom:1px solid #f0f0f0;font-size:14px}
  .result-table tr:hover{background:#f8fafc}

  .chart-toolbar{display:flex;flex-wrap:wrap;gap:8px;align-items:center;background:#fff;border:1px dashed var(--line);border-radius:10px;padding:10px;margin-top:10px}
  .charts-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:12px;margin-top:10px}
  .chart-card{background:#fff;border:1px solid var(--line);border-radius:12px;padding:10px;min-height:300px}
  .chart-title{font-weight:700;font-size:14px;margin:0 0 8px}
  .chart-wrap{height:260px}
  .chart-wrap canvas{width:100% !important;height:100% !important;display:block}

  .loading{display:inline-block;width:16px;height:16px;border:2px solid #f3f3f3;border-top-color:var(--primary);border-radius:50%;animation:spin 1s linear infinite;margin-right:8px}
  @keyframes spin{to{transform:rotate(360deg)}}

  .footer{padding:18px 10px;text-align:center;color:var(--muted)}

  @media (max-width:1100px){
    .hero{grid-template-columns:1fr}
    .chat-grid{grid-template-columns:1fr}
  }
</style>
</head>
<body>
  <!-- Header đồng bộ -->
  <header class="top">
    <div class="row">
      <div class="brand">
        <div class="logo">
          <img src="https://z-cdn-media.chatglm.cn/files/1a1ab789-5429-451f-bb53-65e73a39e4bd_pasted_image_1758225809744.png"
               alt="BIDV" onerror="this.style.display='none'">
        </div>
        <h1 class="title">Công cụ AI cho PMO</h1>
      </div>
      <nav class="nav">
        <a href="/meetingnote"><i class="fa-solid fa-microphone-lines"></i>&nbsp;Meeting Note</a>
        <a href="/risk"><i class="fa-solid fa-triangle-exclamation"></i>&nbsp;Risk Management</a>
        <a href="/chatbot"><i class="fa-solid fa-robot"></i>&nbsp;Chat Bot</a>
      </nav>
    </div>
  </header>

  <main class="container">
    <!-- Hero -->
    <section class="hero">
      <div>
        <h2>AI Chat Bot</h2>
        <p>Hỏi Jira/Confluence bằng ngôn ngữ tự nhiên, tự sinh JQL, hiển thị bảng và biểu đồ, gửi kết quả qua Zalo.</p>
        <div class="cta">
          <a href="#chat" class="btn primary"><i class="fa-solid fa-message"></i>Bắt đầu trò chuyện</a>
          <a href="/" class="btn ghost"><i class="fa-solid fa-house"></i>Về menu PMO</a>
        </div>
      </div>
      <div class="hero-side">
        <div class="gcard">
          <i class="fa-solid fa-wand-magic-sparkles"></i>
          <div>
            <div class="gtitle">Tự hiểu câu hỏi Jira</div>
            <small>Phát hiện ngữ cảnh Jira, sinh JQL chuẩn và gọi API tìm kiếm.</small>
          </div>
        </div>
        <div class="gcard">
          <i class="fa-solid fa-chart-pie"></i>
          <div>
            <div class="gtitle">Bảng & biểu đồ tức thì</div>
            <small>Nhóm theo Status/Priority/Assignee; cột–tròn–đường.</small>
          </div>
        </div>
      </div>
    </section>

    <!-- Chat layout -->
    <section id="chat" class="chat-grid">
      <!-- Sidebar -->
      <div class="panel">
        <div class="sidebar-title">Chọn Project</div>
        <div class="sidebar-item" style="background:transparent;padding:0;border:none">
          <select id="projectSelect" class="select">
            <option value="TRADE" selected>TRADE — Báo cáo thị trường chứng khoán</option>
            <option value="AI">AI — Dự án AI</option>
            <option value="JIRAMON">JIRAMON — Dự án Jiramon</option>
          </select>
        </div>

        <div class="split"></div>

        <div class="sidebar-title">Quét QR để chat Zalo</div>
        <div class="zalo-card">
          <img class="zalo-qr" src="https://pub-3ef7fbe347c7453aa246927aec3e1e0f.r2.dev/Screenshot%202025-09-22%20141941.png" alt="QR Zalo Bot">
          <div style="font-size:12px;color:#6B778C;margin-top:6px">Gõ <code>/name TênCủaBạn</code> để đặt tên.</div>
          <div class="zalo-row">
            <button id="btnLoadContacts" title="Tải danh bạ"><i class="fas fa-rotate"></i></button>
            <select id="zaloContactSelect">
              <option value="">-- Chưa tải danh bạ --</option>
            </select>
          </div>
        </div>

        <div class="split"></div>

        <div class="sidebar-title">Câu hỏi nhanh</div>
        <div class="sidebar-item example-query" data-query="Tôi muốn xem tất cả các task đang trong trạng thái 'In Progress'">
          <div class="sidebar-icon"><i class="fas fa-tasks"></i></div>
          <div>
            <div style="font-weight:700">Task đang thực hiện</div>
            <div style="font-size:13px;color:#6B778C">Các task In Progress</div>
          </div>
        </div>
        <div class="sidebar-item example-query" data-query="Hiển thị các task đang assign cho tôi">
          <div class="sidebar-icon"><i class="fas fa-user"></i></div>
          <div>
            <div style="font-weight:700">Task của tôi</div>
            <div style="font-size:13px;color:#6B778C">Assignee = bạn</div>
          </div>
        </div>
        <div class="sidebar-item example-query" data-query="Tìm các task có priority là High và chưa được giải quyết">
          <div class="sidebar-icon"><i class="fas fa-exclamation-triangle"></i></div>
          <div>
            <div style="font-weight:700">Ưu tiên cao</div>
            <div style="font-size:13px;color:#6B778C">Priority = High</div>
          </div>
        </div>
        <div class="sidebar-item example-query" data-query="Lấy các task trong dự án TRADE và có status là 'To Do'">
          <div class="sidebar-icon"><i class="fas fa-project-diagram"></i></div>
          <div>
            <div style="font-weight:700">Cần làm</div>
            <div style="font-size:13px;color:#6B778C">Status = To Do</div>
          </div>
        </div>
        <div class="sidebar-item example-query" data-query="Tôi muốn biết có bao nhiêu task đang bị trễ deadline">
          <div class="sidebar-icon"><i class="fas fa-clock"></i></div>
          <div>
            <div style="font-weight:700">Trễ deadline</div>
            <div style="font-size:13px;color:#6B778C">Thống kê overdue</div>
          </div>
        </div>
      </div>

      <!-- Chat main -->
      <div class="panel chat-card">
        <div class="chat-messages" id="chatMessages">
          <div class="message bot">
            <div class="message-avatar"><i class="fas fa-robot"></i></div>
            <div>
              <div class="message-content">
                Xin chào! Tôi có thể giúp bạn hỏi Jira/Confluence, sinh JQL tự động, hiển thị bảng & biểu đồ, và gửi kết quả qua Zalo. Nhập câu hỏi để bắt đầu.
              </div>
              <div class="message-time">—</div>
            </div>
          </div>
        </div>

        <div class="message-form">
          <div class="input-container">
            <input type="text" class="message-input" id="messageInput" placeholder="Nhập câu hỏi của bạn...">
            <button class="send-button" id="sendButton"><i class="fas fa-paper-plane"></i></button>
          </div>

          <!-- Kết quả -->
          <div class="result-container" id="resultContainer">
            <div class="result-header">
              <div class="result-title">Kết quả tìm kiếm</div>
              <div class="result-actions">
                <button class="action-button" id="closeResults"><i class="fas fa-times"></i> Đóng</button>
                <button class="action-button zalo" id="zaloButton"><i class="fab fa-zalo"></i> Gửi qua Zalo</button>
              </div>
            </div>

            <div class="jql-display">
              <pre id="jqlQuery"></pre>
              <button class="jql-copy" id="copyJql">Sao chép JQL</button>
            </div>

            <div class="table-container">
              <table class="result-table" id="resultTable">
                <thead>
                  <tr>
                    <th>ID</th><th>Tiêu đề</th><th>Trạng thái</th><th>Ưu tiên</th><th>Assignee</th>
                  </tr>
                </thead>
                <tbody id="resultTableBody"></tbody>
              </table>
            </div>

            <!-- Chart controls -->
            <div class="chart-toolbar">
              <label><input type="checkbox" id="toggleCharts" checked> Hiển thị biểu đồ</label>
              <span style="width:1px;height:18px;background:#e5e7eb"></span>
              <label><input type="checkbox" id="optBar" checked> Column</label>
              <label><input type="checkbox" id="optPie" checked> Pie</label>
              <label><input type="checkbox" id="optLine"> Line</label>
              <span style="width:1px;height:18px;background:#e5e7eb"></span>
              <label>Nhóm theo:
                <select id="groupBySelect" class="select" style="max-width:180px;padding:6px 10px">
                  <option value="status">Trạng thái</option>
                  <option value="priority">Ưu tiên</option>
                  <option value="assignee">Assignee</option>
                </select>
              </label>
              <span style="width:1px;height:18px;background:#e5e7eb"></span>
              <label><input type="checkbox" id="optDataLabels" checked> Data labels</label>
              <button class="action-button" id="btnRenderCharts" style="margin-left:auto"><i class="fas fa-sync"></i> Render</button>
            </div>

            <!-- Charts -->
            <div class="charts-grid" id="chartsGrid" style="display:block">
              <div class="chart-card" id="barCard">
                <div class="chart-title">Column Chart</div>
                <div class="chart-wrap"><canvas id="barChart"></canvas></div>
              </div>
              <div class="chart-card" id="pieCard">
                <div class="chart-title">Pie Chart</div>
                <div class="chart-wrap"><canvas id="pieChart"></canvas></div>
              </div>
              <div class="chart-card" id="lineCard" style="display:none">
                <div class="chart-title">Line Chart</div>
                <div class="chart-wrap"><canvas id="lineChart"></canvas></div>
              </div>
            </div>

          </div>
        </div>
      </div>
    </section>
  </main>

  <footer class="footer">© 2025 BIDV — Công cụ AI cho PMO</footer>

<script>
(function(){
  const chatMessages = document.getElementById('chatMessages');
  const messageInput = document.getElementById('messageInput');
  const sendButton = document.getElementById('sendButton');
  const resultContainer = document.getElementById('resultContainer');
  const jqlQuery = document.getElementById('jqlQuery');
  const copyJql = document.getElementById('copyJql');
  const resultTableBody = document.getElementById('resultTableBody');
  const projectSelect = document.getElementById('projectSelect');

  // Chart controls
  const toggleCharts = document.getElementById('toggleCharts');
  const chartsGrid = document.getElementById('chartsGrid');
  const optBar = document.getElementById('optBar');
  const optPie = document.getElementById('optPie');
  const optLine = document.getElementById('optLine');
  const groupBySelect = document.getElementById('groupBySelect');
  const optDataLabels = document.getElementById('optDataLabels');
  const btnRenderCharts = document.getElementById('btnRenderCharts');

  // Zalo UI
  const btnLoadContacts = document.getElementById('btnLoadContacts');
  const zaloContactSelect = document.getElementById('zaloContactSelect');

  // State
  window.__projectKey = (projectSelect && projectSelect.value) ? projectSelect.value : 'TRADE';
  let lastResultsCache = null; // để gửi qua Zalo & vẽ chart
  let barChart, pieChart, lineChart;

  // Register datalabels once
  if (window.Chart && window.ChartDataLabels) { Chart.register(ChartDataLabels); }

  if (projectSelect) {
    projectSelect.addEventListener('change', () => {
      window.__projectKey = projectSelect.value || 'TRADE';
    });
  }

  // Load danh bạ
  async function loadContacts(){
    try{
      zaloContactSelect.innerHTML = '<option value="">Đang tải danh bạ...</option>';
      const res = await fetch('/zalo/contacts/list').then(r=>r.json());
      if (!res.ok) throw new Error(res.error || 'contacts list failed');
      const contacts = res.contacts || [];
      if (contacts.length === 0) {
        zaloContactSelect.innerHTML = '<option value="">Chưa có liên hệ — gõ /name trong Zalo</option>';
        return;
      }
      zaloContactSelect.innerHTML = contacts.map(c =>
        '<option value="'+escapeHtml(c.display_name)+'">'+escapeHtml(c.display_name)+'</option>'
      ).join('');
    }catch(e){
      zaloContactSelect.innerHTML = '<option value="">Lỗi tải danh bạ</option>';
      console.error(e);
    }
  }
  if (btnLoadContacts) btnLoadContacts.addEventListener('click', loadContacts);

  // Ví dụ query click
  const exampleQueries = document.querySelectorAll('.example-query');
  exampleQueries.forEach(q => q.addEventListener('click', () => {
    const t = q.getAttribute('data-query');
    messageInput.value = t;
    sendMessage();
  }));

  function addUserMessage(message) {
    const el = document.createElement('div');
    el.className = 'message user';
    el.innerHTML = \`
      <div class="message-avatar"><i class="fas fa-user"></i></div>
      <div>
        <div class="message-content">\${escapeHtml(message)}</div>
        <div class="message-time">\${nowHM()}</div>
      </div>\`;
    chatMessages.appendChild(el);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }
  function addBotMessage(message) {
    const el = document.createElement('div');
    el.className = 'message bot';
    el.innerHTML = \`
      <div class="message-avatar"><i class="fas fa-robot"></i></div>
      <div>
        <div class="message-content">\${message}</div>
        <div class="message-time">\${nowHM()}</div>
      </div>\`;
    chatMessages.appendChild(el);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  function showResults(results) {
    resultTableBody.innerHTML = '';
    if (!results || results.length === 0) { lastResultsCache = []; renderCharts(); return; }
    lastResultsCache = results;
    results.forEach(r => {
      const row = document.createElement('tr');
      row.innerHTML = \`
        <td><a href="https://kvmon-dev.atlassian.net/browse/\${escapeHtml(r.key)}" target="_blank">\${escapeHtml(r.key)}</a></td>
        <td>\${escapeHtml(r.summary)}</td>
        <td>\${escapeHtml(r.status)}</td>
        <td>\${escapeHtml(r.priority)}</td>
        <td>\${escapeHtml(r.assignee || 'Unassigned')}</td>\`;
      resultTableBody.appendChild(row);
    });
    // Render/refresh charts every time we have new results
    renderCharts();
  }

  // ==== Chart helpers ====
  function destroyCharts(){
    [barChart, pieChart, lineChart].forEach(ch => { try{ if (ch) ch.destroy(); }catch{} });
    barChart = pieChart = lineChart = null;
  }

  function aggregate(results, key){
    const map = new Map();
    results.forEach(r=>{
      let k = (r[key] || 'Unknown');
      if (k == null || k === '') k = 'Unknown';
      const s = String(k);
      map.set(s, (map.get(s) || 0) + 1);
    });
    const labels = Array.from(map.keys());
    const data = Array.from(map.values());
    return { labels, data };
  }

  function renderCharts(){
    // Toggle whole charts area
    chartsGrid.style.display = toggleCharts.checked ? 'grid' : 'none';
    if (!toggleCharts.checked) { destroyCharts(); return; }

    const by = groupBySelect.value || 'status';
    const useLabels = !!optDataLabels.checked;

    // Guard
    const results = Array.isArray(lastResultsCache) ? lastResultsCache : [];
    const agg = aggregate(results, by);

    // Show/hide each card
    document.getElementById('barCard').style.display = optBar.checked ? 'block' : 'none';
    document.getElementById('pieCard').style.display = optPie.checked ? 'block' : 'none';
    document.getElementById('lineCard').style.display = optLine.checked ? 'block' : 'none';

    // Recreate charts fresh
    destroyCharts();

    const commonOpts = {
      responsive: true,
      maintainAspectRatio: false,
      plugins:{
        legend:{ position:'bottom' },
        datalabels: useLabels ? {
          display: true,
          formatter: (v)=> v,
          anchor: 'end',
          align: 'top',
          clamp: true,
          padding: 2,
          font: { size: 11, weight: '600' }
        } : { display:false }
      },
      scales: { y: { beginAtZero: true } }
    };

    if (optBar.checked) {
      barChart = new Chart(document.getElementById('barChart'), {
        type: 'bar',
        data: { labels: agg.labels, datasets: [{ label: 'Số lượng', data: agg.data }] },
        options: commonOpts
      });
    }
    if (optPie.checked) {
      const pieOpts = JSON.parse(JSON.stringify(commonOpts));
      delete pieOpts.scales;
      pieChart = new Chart(document.getElementById('pieChart'), {
        type: 'pie',
        data: { labels: agg.labels, datasets: [{ label:'Tỷ lệ', data: agg.data }] },
        options: pieOpts
      });
    }
    if (optLine.checked) {
      lineChart = new Chart(document.getElementById('lineChart'), {
        type: 'line',
        data: { labels: agg.labels, datasets: [{ label: 'Số lượng', data: agg.data, tension:.25 }] },
        options: commonOpts
      });
    }
  }

  [toggleCharts, optBar, optPie, optLine, groupBySelect, optDataLabels].forEach(el=>{
    el.addEventListener('change', renderCharts);
  });
  btnRenderCharts.addEventListener('click', renderCharts);

  // Chat send
  function sendMessage() {
    const message = messageInput.value.trim();
    if (!message) return;
    addUserMessage(message);
    messageInput.value = '';
    sendButton.disabled = true;
    addBotMessage('<span class="loading"></span>Đang xử lý câu hỏi của bạn...');

    fetch('/chat-process', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message, projectKey: window.__projectKey })
    })
    .then(r => r.json())
    .then(data => {
      const loadingMessage = chatMessages.lastElementChild;
      if (loadingMessage && loadingMessage.querySelector('.loading')) loadingMessage.remove();

      if (data.success) {
        addBotMessage(escapeHtml(data.response || ''));
        jqlQuery.textContent = data.jql || '';
        showResults(data.results);
        if (data.jql && data.results && data.results.length > 0) {
          resultContainer.style.display = 'block';
        } else {
          resultContainer.style.display = 'none';
        }
      } else {
        const msg = (data && (data.error || data.details)) ? (data.error + (data.details ? (' (' + data.details + ')') : '')) : 'Xin lỗi, tôi không thể xử lý câu hỏi của bạn.';
        addBotMessage('<b>Lỗi:</b> ' + escapeHtml(msg));
        resultContainer.style.display = 'none';
        showResults([]);
      }
      sendButton.disabled = false;
    })
    .catch(err => {
      const loadingMessage = chatMessages.lastElementChild;
      if (loadingMessage && loadingMessage.querySelector('.loading')) loadingMessage.remove();
      addBotMessage('Đã xảy ra lỗi khi xử lý câu hỏi của bạn. Vui lòng thử lại sau.');
      sendButton.disabled = false;
      resultContainer.style.display = 'none';
      showResults([]);
      console.error(err);
    });
  }

  const closeResults = document.getElementById('closeResults');
  if (closeResults) closeResults.addEventListener('click', () => { resultContainer.style.display = 'none'; });

  copyJql.addEventListener('click', () => {
    const text = jqlQuery.textContent || '';
    if (!text.trim()) return;
    navigator.clipboard.writeText(text)
      .then(() => { copyJql.textContent = 'Đã sao chép!'; setTimeout(() => { copyJql.textContent = 'Sao chép JQL'; }, 2000); })
      .catch(err => { console.error('Failed to copy: ', err); });
  });

  sendButton.addEventListener('click', sendMessage);
  messageInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') { sendMessage(); } });

  // Gửi qua Zalo: dùng người nhận đã chọn + prompt nội dung
  const zaloButton = document.getElementById('zaloButton');
  if (zaloButton) zaloButton.addEventListener('click', async () => {
    try {
      const receiver = zaloContactSelect && zaloContactSelect.value ? zaloContactSelect.value : '';
      if (!receiver) {
        alert('Hãy bấm "Tải danh bạ" và chọn người nhận trước khi gửi.');
        return;
      }
      const defaultMsg = makeDefaultZaloMessage();
      const text = prompt('Nhập nội dung tin nhắn:', defaultMsg);
      if (text == null || !text.trim()) return; // user cancel

      const res = await fetch('/zalo/push-by-name', {
        method: 'POST',
        headers: { 'content-type':'application/json' },
        body: JSON.stringify({ display_name: receiver, text })
      }).then(r=>r.json());
      if (!res.ok) { alert('Gửi thất bại: ' + (res.error || '')); return; }
      alert('Đã gửi tin nhắn qua Zalo!');
    } catch (e) {
      alert('Lỗi gửi Zalo: ' + String(e));
    }
  });

  function makeDefaultZaloMessage(){
    try{
      const lines = [];
      if (jqlQuery.textContent && jqlQuery.textContent.trim()) {
        lines.push('JQL: ' + jqlQuery.textContent.trim());
      }
      if (lastResultsCache && lastResultsCache.length) {
        const top = lastResultsCache.slice(0, 5).map(r => \`\${r.key} — \${r.summary} [\${r.status}|\${r.priority}]\`);
        lines.push('Top kết quả:'); lines.push(...top);
        if (lastResultsCache.length > 5) lines.push(\`… và \${lastResultsCache.length - 5} kết quả khác.\`);
      }
      return lines.join('\\n') || 'Kết quả từ Chat Bot PMO';
    }catch{ return 'Kết quả từ Chat Bot PMO'; }
  }

  function nowHM(){ const n=new Date(); return n.toLocaleTimeString('vi-VN',{hour:'2-digit',minute:'2-digit'}); }
  function escapeHtml(t){ const m={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'}; return String(t).replace(/[&<>\"']/g, ch => m[ch]); }

  // Auto load contacts
  loadContacts();
})();
</script>
</body>
</html>`;
}


// ============================================================================
// 8) ROUTER (export default)
// ============================================================================
export default {
  async fetch(req, env, ctx) {
    const url = new URL(req.url);
// Endpoint for OCR extraction
if (req.method === 'POST' && url.pathname === '/ocr-extract') {
  try {
    const { imageUrl, imageKey, model } = await safeJson(req);
    if (!imageUrl && !imageKey) return json({ ok: false, error: 'Missing imageUrl or imageKey' }, 400);

    // Tạo public URL từ key nếu cần
    const publicUrl = imageUrl || (() => {
      if (!env.R2_PUBLIC_BASE_URL) throw new StepError('config', 'Missing R2_PUBLIC_BASE_URL');
      const base = env.R2_PUBLIC_BASE_URL.replace(/\/$/, '');
      const safeKey = String(imageKey).split('/').map(encodeURIComponent).join('/');
      return `${base}/${safeKey}`;
    })();

    if (!env.XAI_API_KEY) return json({ ok: false, error: 'Missing XAI_API_KEY' }, 500);
    
    // Sử dụng đúng base URL cho Grok
    const base = env.XAI_BASE_URL || 'https://api.x.ai/v1';
    
    // Sử dụng model hỗ trợ ảnh, mặc định là grok-4-fast-non-reasoning nếu không chỉ định
    const modelToUse = model || 'grok-4-fast-non-reasoning';

    const body = {
      model: modelToUse,
      messages: [
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: 'Trích xuất tất cả địa chỉ email từ ảnh này. Định dạng kết quả là một danh sách email, mỗi email trên một dòng, không có văn bản khác.'
            },
            {
              type: 'image_url',
              image_url: {
                url: publicUrl
              }
            }
          ]
        }
      ],
      temperature: 0.2,
      max_tokens: 1000
    };

    console.log('Grok Request:', JSON.stringify(body, null, 2)); // Debug log

    // Sử dụng endpoint /chat/completions thay vì /responses
    const r = await fetch(`${base}/chat/completions`, {
      method: 'POST',
      headers: { 
        'Authorization': `Bearer ${env.XAI_API_KEY}`, 
        'Content-Type': 'application/json' 
      },
      body: JSON.stringify(body)
    });

    if (!r.ok) {
      const errorText = await r.text();
      console.error('Grok API Error:', errorText); // Debug log
      throw new StepError('grok', `xAI ${r.status}: ${errorText}`);
    }

    const data = await r.json();
    console.log('Grok Response:', JSON.stringify(data, null, 2)); // Debug log
    
    let result = { text: '', emails: '' };
    
    try {
      if (data.choices && data.choices.length > 0 && data.choices[0].message) {
        const content = data.choices[0].message.content;
        if (typeof content === 'string') {
          result.text = content;
          
          // Trích xuất email từ nội dung
          const emailRegex = /[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}/gi;
          const emailMatches = content.match(emailRegex);
          if (emailMatches) {
            result.emails = Array.from(new Set(emailMatches.map(email => email.toLowerCase()))).join('; ');
          }
        }
      }
    } catch (e) {
      console.error('Error parsing Grok response:', e);
      console.error('Grok response:', data);
    }

    return json({ ok: true, ...result });
  } catch (err) {
    const e = toStepError(err);
    console.error('OCR extraction error:', e);
    return json({ ok: false, error: e.message }, 500);
  }
}

// Endpoint for getting Jira Account ID
if (req.method === 'POST' && url.pathname === '/jira-get-account-id') {
  try {
    const { email } = await safeJson(req);
    if (!email) return json({ ok: false, error: 'Missing email' }, 400);

    const BASE_JIRA = envJiraBase(env);
    const API_URL = `${BASE_JIRA}/rest/api/3/user/search`;

    try {
      const r = await fetch(`${API_URL}?query=${encodeURIComponent(email)}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Accept': 'application/json',
          'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
        }
      });

      if (!r.ok) {
        const errorText = await r.text();
        console.error('Jira API error:', errorText);
        throw new StepError('jira', `Jira ${r.status}: ${errorText}`);
      }

      const data = await r.json();
      
      if (data && data.length > 0) {
        // Return the first match's account ID
        return json({ ok: true, accountId: data[0].accountId });
      } else {
        // No user found
        return json({ ok: true, accountId: null });
      }
    } catch (error) {
      throw error;
    }
  } catch (err) {
    const e = toStepError(err);
    console.error('Jira get account ID error:', e);
    return json({ ok: false, error: e.message }, 500);
  }
}

// Endpoint for getting Jira Account ID
if (req.method === 'POST' && url.pathname === '/jira-get-account-id') {
  try {
    const { email } = await safeJson(req);
    if (!email) return json({ ok: false, error: 'Missing email' }, 400);

    const BASE_JIRA = envJiraBase(env);
    const API_URL = `${BASE_JIRA}/rest/api/3/user/search`;

    try {
      const r = await fetch(`${API_URL}?query=${encodeURIComponent(email)}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Accept': 'application/json',
          'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
        }
      });

      if (!r.ok) {
        throw new StepError('jira', `Jira ${r.status}: ${await r.text()}`);
      }

      const data = await r.json();
      
      if (data && data.length > 0) {
        // Return the first match's account ID
        return json({ ok: true, accountId: data[0].accountId });
      } else {
        // No user found
        return json({ ok: true, accountId: null });
      }
    } catch (error) {
      throw error;
    }
  } catch (err) {
    const e = toStepError(err);
    return json({ ok: false, error: e.message }, 500);
  }
}
    // CORS preflight
    if (req.method === 'OPTIONS') {
      return new Response(null, { status: 204, headers: corsHeaders() });
    }

    // Home (UI)
    if (req.method === 'GET' && url.pathname === '/') {
      return new Response(homeHTML(), { headers: { 'content-type': 'text/html; charset=utf-8', ...corsHeaders() } });
    }

    // Meeting Note UI
    if (req.method === 'GET' && url.pathname === '/meetingnote') {
      return new Response(meetingNoteHTML(), { headers: { 'content-type': 'text/html; charset=utf-8', ...corsHeaders() } });
    }

    // Chat Bot UI
    if (req.method === 'GET' && url.pathname === '/chatbot') {
      return new Response(chatBotHTML(), { headers: { 'content-type': 'text/html; charset=utf-8', ...corsHeaders() } });
    }

    // Risk Radar UI
if (req.method === 'GET' && url.pathname === '/risk') {
  return new Response(riskRadarHTML(), {
    headers: { 'content-type': 'text/html; charset=utf-8', ...corsHeaders() }
  });
}


    // Chat processing (UI web gọi)
 // Chat processing (UI web gọi)
if (req.method === 'POST' && url.pathname === '/chat-process') {
  const { message, projectKey } = await safeJson(req);
  const out = await processChatMessage(env, message, { projectKey });
  return json(out, out.success ? 200 : 500);
}

    // Presign PUT lên R2
    if (req.method === 'POST' && url.pathname === '/sign-put') {
      const { key } = await safeJson(req);
      if (!key) return json({ error: 'Missing key' }, 400);
      const signed = await presignURL(env, 'PUT', key, 15 * 60);
      return json({ url: signed });
    }

    // Pipeline: Deepgram → R2 → Grok
    if (req.method === 'POST' && url.pathname === '/transcribe') {
      const { key } = await safeJson(req);
      if (!key) return json({ ok: false, step: 'input', error: 'Missing key' }, 400);

      const steps = { deepgram: { ok: false }, saveR2: { ok: false }, grok: { ok: false } };
      try {
        if (!env.R2_PUBLIC_BASE_URL) throw new StepError('config', 'Missing R2_PUBLIC_BASE_URL');
        if (!env.DEEPGRAM_API_KEY) throw new StepError('config', 'Missing DEEPGRAM_API_KEY');
        if (!env.XAI_API_KEY) throw new StepError('config', 'Missing XAI_API_KEY');

        const base = env.R2_PUBLIC_BASE_URL.replace(/\/$/, '');
        const safeKey = String(key).split('/').map(encodeURIComponent).join('/');
        const audioUrl = `${base}/${safeKey}`;

        // 1) Deepgram → transcript
        const dgUrl = 'https://api.deepgram.com/v1/listen?model=nova-2-general&language=vi&smart_format=true';
        const dgRes = await fetch(dgUrl, {
          method: 'POST',
          headers: { Authorization: `Token ${env.DEEPGRAM_API_KEY}`, 'Content-Type': 'application/json' },
          body: JSON.stringify({ url: audioUrl })
        });
        if (!dgRes.ok) throw new StepError('deepgram', `Deepgram ${dgRes.status}: ${await dgRes.text()}`);
        const dgJson = await dgRes.json();
        const transcript = extractTranscript(dgJson).trim();
        if (!transcript) throw new StepError('deepgram', 'Không trích xuất được transcript');
        steps.deepgram.ok = true;

        // 2) Lưu transcript.txt lên R2 (public)
        const txtKey = key.replace(/\.[^/.]+$/, '') + '.transcript.txt';
        const signedTxt = await presignURL(env, 'PUT', txtKey, 60);
        const putRes = await fetch(signedTxt, { method: 'PUT', headers: { 'content-type': 'text/plain; charset=utf-8' }, body: transcript });
        if (!putRes.ok) throw new StepError('saveR2', `Upload transcript ${putRes.status}: ${await putRes.text()}`);
        const transcriptUrl = `${base}/${txtKey.split('/').map(encodeURIComponent).join('/')}`;
        steps.saveR2.ok = true;

        // 3) Grok 3 Mini → JSON
        const { json: llmJson, raw: llmText, response: grokResponse } = await callGrok(env, transcript);
        steps.grok.ok = true;

        // 4) Preview Confluence
        const previewHtml = buildConfluenceTableHTML(llmJson);

        return json({
          ok: true,
          steps,
          transcriptUrl,
          llmJson,
          llmText,
          grokResponse,
          previewHtml
        });
      } catch (err) {
        const e = toStepError(err);
        if (e.step && steps[e.step]) steps[e.step].ok = false, steps[e.step].error = e.message;
        return json({ ok: false, step: e.step || 'unknown', error: e.message, steps }, 500);
      }
    }

    // Tạo page Confluence
// Tạo page Confluence
if (req.method === 'POST' && url.pathname === '/create-confluence') {
  const { llmJson, transcriptUrl, title, spaceKey, parentId, storageHtml: incomingHtml, titleStrategy } = await safeJson(req);

  // cấu hình hậu tố
  const TITLE_SUFFIX_SEPARATOR = " - "; // đổi thành "" nếu muốn dính liền kiểu "-001"
  const DEFAULT_BASE_TITLE = 'BÁO CÁO TIẾN ĐỘ DỰ ÁN';

  try {
    const BASE_WIKI = envConfluenceBase(env);
    const API_URL = confluenceApiUrl(env, '/content');

    if (!atlassianEmail(env) || !env.ATLASSIAN_API_TOKEN) {
      throw new StepError('confluence', 'Missing Atlassian credentials (ATLASSIAN_EMAIL/ATLASSIAN_USER, ATLASSIAN_API_TOKEN)');
    }

    const storageHtml = typeof incomingHtml === 'string'
      ? incomingHtml
      : buildConfluenceTableHTML(llmJson || {}).trim();

    const baseTitle = (title && String(title).trim()) || DEFAULT_BASE_TITLE;
    const strategy = (titleStrategy === 'autonumber' || titleStrategy === 'manual') ? titleStrategy : 'manual';

    async function tryCreate(withTitle) {
      const payload = {
        type: 'page',
        title: withTitle,
        space: { key: spaceKey || 'AIG' },
        body: { storage: { value: storageHtml, representation: 'storage' } }
      };
      if (parentId) payload.ancestors = [{ id: String(parentId) }];

      const r = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          'Accept': 'application/json',
          'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
        },
        body: JSON.stringify(payload)
      });

      const text = await r.text();
      if (r.ok) {
        const data = JSON.parse(text);
        const pageUrl = data?._links?.webui ? (BASE_WIKI + data._links.webui) : '';
        return { ok: true, id: data.id, url: pageUrl, title: withTitle };
      }

      // xác định "trùng tiêu đề" (Confluence thường trả 409)
      const isConflict = (r.status === 409) || /title/i.test(text || '') && /exist|duplicate|already/i.test(text || '');
      return { ok: false, conflict: isConflict, status: r.status, text };
    }

    if (strategy === 'manual') {
      const res = await tryCreate(baseTitle);
      if (res.ok) return json({ ok: true, pageId: res.id, pageUrl: res.url, title: res.title });
      throw new StepError('confluence', `Confluence ${res.status || ''}: ${res.text || 'create failed'}`);
    }

    // === strategy: 'autonumber' ===
    // 1) thử tiêu đề gốc
    let attempt = await tryCreate(baseTitle);
    if (attempt.ok) {
      return json({ ok: true, pageId: attempt.id, pageUrl: attempt.url, title: attempt.title });
    }

    // 2) nếu trùng thì thử thêm số thứ tự 001..999
    if (!attempt.conflict) {
      // lỗi khác (không phải duplicate) => trả lỗi luôn
      throw new StepError('confluence', `Confluence ${attempt.status || ''}: ${attempt.text || 'create failed'}`);
    }

    for (let i = 1; i <= 999; i++) {
      const suffix = String(i).padStart(3, '0');
      const candidate = baseTitle + TITLE_SUFFIX_SEPARATOR + suffix;
      attempt = await tryCreate(candidate);
      if (attempt.ok) {
        return json({ ok: true, pageId: attempt.id, pageUrl: attempt.url, title: attempt.title });
      }
      if (!attempt.conflict) {
        // gặp lỗi khác -> dừng vòng lặp và báo lỗi
        throw new StepError('confluence', `Confluence ${attempt.status || ''}: ${attempt.text || 'create failed'}`);
      }
    }

    throw new StepError('confluence', 'Không thể tạo page sau khi thử 999 hậu tố.');
  } catch (err) {
    const e = toStepError(err);
    return json({ ok: false, step: e.step || 'confluence', error: e.message }, 500);
  }
}

    // Tạo ticket Jira
    if (req.method === 'POST' && url.pathname === '/create-jira-ticket') {
      const { tickets } = await safeJson(req);
      try {
        if (!tickets || !Array.isArray(tickets) || tickets.length === 0) {
          throw new StepError('jira', 'Invalid tickets data');
        }

        if (!atlassianEmail(env) || !env.ATLASSIAN_API_TOKEN) {
          throw new StepError('jira', 'Missing Atlassian credentials (ATLASSIAN_EMAIL/ATLASSIAN_USER, ATLASSIAN_API_TOKEN)');
        }

        const BASE_JIRA = envJiraBase(env);
        const API_URL = `${BASE_JIRA}/rest/api/3/issue`;

        const results = [];
        for (const ticket of tickets) {
          const { summary, description, issueType, priority } = ticket;

          if (!summary) {
            results.push({ ok: false, error: 'Missing summary' });
            continue;
          }

          const payload = {
            fields: {
              project: { key: 'TRADE' },
              summary: summary,
              description: {
                type: 'doc',
                version: 1,
                content: [
                  {
                    type: 'paragraph',
                    content: [
                      {
                        type: 'text',
                        text: description || ''
                      }
                    ]
                  }
                ]
              },
              issuetype: { name: issueType || 'Task' },
              priority: { name: priority || 'Medium' }
            }
          };

          const r = await fetch(API_URL, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json; charset=utf-8',
              'Accept': 'application/json',
              'Authorization': 'Basic ' + btoa(`${atlassianEmail(env)}:${env.ATLASSIAN_API_TOKEN}`)
            },
            body: JSON.stringify(payload)
          });

          const text = await r.text();
          if (!r.ok) {
            results.push({ ok: false, error: `Jira ${r.status}: ${text}` });
            continue;
          }

          const data = JSON.parse(text);
          results.push({
            ok: true,
            key: data.key,
            id: data.id,
            self: data.self,
            url: `${BASE_JIRA}/browse/${data.key}`
          });
        }

        const allSuccess = results.every(r => r.ok);
        return json({
          ok: allSuccess,
          results
        });
      } catch (err) {
        const e = toStepError(err);
        return json({ ok: false, step: e.step || 'jira', error: e.message }, 500);
      }
    }

// === ZALO: Webhook nhận sự kiện ===
if (req.method === 'POST' && url.pathname === '/zalo/webhook') {
  try {
    const got = req.headers.get('x-bot-api-secret-token')
            || req.headers.get('X-Bot-Api-Secret-Token')
            || new URL(req.url).searchParams.get('secret'); // tiện test
    const expected =
      env.ZALO_SECRET_TOKEN
      || env.ZALO_WEBHOOK_SECRET_TOKEN
      || env.ZALO_WEBHOOK_SECRET
      || env.ZALO_BOT_WEBHOOK_SECRET;
    if (!expected || got !== expected) {
      return json({ ok: false, error: 'Invalid webhook secret' }, 403);
    }

    const body = await safeJson(req);

    const eventName =
      body?.result?.event_name ||
      body?.event_name ||
      body?.event?.name ||
      body?.name || '';

    const chatId =
      body?.result?.message?.chat?.id ||
      body?.message?.chat?.id ||
      body?.data?.message?.chat?.id ||
      body?.message?.sender?.id ||
      body?.sender?.id ||
      null;

    const text =
      body?.result?.message?.text ||
      body?.message?.text ||
      body?.data?.message?.text ||
      '';

    const senderName =
      body?.result?.message?.sender?.name ||
      body?.message?.sender?.name ||
      body?.sender?.name || null;

    if (chatId) {
      // không block webhook: ghi nền tên mặc định trong payload (nếu có)
      ctx.waitUntil(saveContact(env, chatId, senderName).catch(e => console.error('saveContact', e)));
    }

    // LỆNH: /id
    if (text && /^\/?id$/i.test(String(text).trim())) {
      await zaloSendMessage(env, chatId, `Chat ID của bạn: ${chatId}`);
      return json({ ok: true, echoed: true });
    }

    // LỆNH: /who -> xem tên hiện tại
    if (text && /^\/?who$/i.test(String(text).trim())) {
      const current = await getNameByChatId(env, chatId);
      await zaloSendMessage(env, chatId, current ? `Tên đang lưu: ${current}` : 'Chưa đặt tên hiển thị. Hãy gõ: /name TênCủaBạn');
      return json({ ok: true, who: true, displayName: current || null });
    }
// Lệnh: /name <tên> -> đặt/đổi tên (và xác nhận rõ ràng)
const mName = text && text.match(/^\/?name\s+(.+)$/i);
if (mName && mName[1]) {
  const displayName = mName[1].trim().slice(0, 80);
  try {
    await ensureContactsTable(env);
    await saveContact(env, chatId, displayName);
    await zaloSendMessage(env, chatId,
      `✅ Đã tạo/cập nhật danh bạ thành công!
• Tên hiển thị: "${displayName}"
• chat_id: ${chatId}

Bạn có thể quay lại web và bấm "Tải danh bạ" để chọn người nhận.`);
    return json({ ok: true, named: true, displayName });
  } catch (err) {
    console.error('saveContact error', err);
    await zaloSendMessage(env, chatId,
      `⚠️ Lưu danh bạ thất bại. Vui lòng thử lại.
Chi tiết: ${String(err)}`);
    return json({ ok: false, error: String(err) }, 500);
  }
}




    const isTextEvent =
      /message\.text\.received|user\.send\.text|message\.received/i.test(eventName) || !!text;

    if (!chatId || !isTextEvent) {
      console.log('Zalo webhook ignored', { eventName, haveText: !!text });
      return json({ ok: true, ignored: true, event: eventName });
    }

    // Còn lại: hội thoại thường → xử lý nền
    ctx.waitUntil(handleZaloMessage(env, chatId, text));
    return json({ ok: true }); // ACK ngay
  } catch (e) {
    console.error('Zalo webhook error', e);
    return json({ ok: false, error: String(e) }, 500);
  }
}


// === ZALO: Đăng ký webhook (gọi bằng Postman) ===
if (req.method === 'POST' && url.pathname === '/zalo/set-webhook') {
  try {
    const { url: webhookUrl, secret } = await safeJson(req);
    if (!webhookUrl) return json({ ok: false, error: 'Missing url' }, 400);
    const res = await zaloSetWebhook(env, webhookUrl, secret || env.ZALO_SECRET_TOKEN);
    return json({ ok: true, res });
  } catch (e) {
    return json({ ok: false, error: String(e) }, 500);
  }
}


    // === ZALO: Gửi tin chủ động (tạo event gửi người dùng) ===
    if (req.method === 'POST' && url.pathname === '/zalo/push') {
      try {
        const { chat_id, text } = await safeJson(req);
        if (!chat_id || !text) return json({ ok: false, error: 'Missing chat_id or text' }, 400);
        const res = await zaloSendMessage(env, chat_id, text);
        return json({ ok: true, res });
      } catch (e) {
        return json({ ok: false, error: String(e) }, 500);
      }
    }
    if (req.method === 'GET' && url.pathname === '/health') return new Response('ok', { headers: corsHeaders() });
    // Danh sách liên hệ
if (req.method === 'GET' && url.pathname === '/zalo/contacts/list') {
  try { return json({ ok:true, contacts: await listContacts(env) }); }
  catch(e){ return json({ ok:false, error:String(e) }, 500); }
}

// Gửi theo tên hiển thị
if (req.method === 'POST' && url.pathname === '/zalo/push-by-name') {
  try {
    const { display_name, text } = await safeJson(req);
    if (!display_name) return json({ ok:false, error:'Missing display_name' }, 400);
    const chatId = await findChatIdByName(env, display_name);
    if (!chatId) return json({ ok:false, error:'Tên không tồn tại' }, 404);
    const res = await zaloSendMessage(env, chatId, String(text || '').slice(0,2000));
    return json({ ok:true, res });
  } catch(e){ return json({ ok:false, error:String(e) }, 500); }
}

    return new Response('Not found', { status: 404, headers: corsHeaders() });
  }
};
